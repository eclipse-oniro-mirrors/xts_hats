# Copyright (c) 2021-2023 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//base/location/location/config.gni")
import("//build/ohos_var.gni")
import("//drivers/hdf_core/adapter/uhdf2/uhdf.gni")
import("//test/xts/tools/build/suite.gni")

module_output_path = "hdf/location/gnss"
ohos_moduletest_suite("HatsHdfLocationgnssTest") {
  module_out_path = module_output_path

  sources = [ "location_gnss_test.cpp" ]

  configs = [ ":hdf_gnss" ]

  defines = []

  deps = [
    "//third_party/googletest:gmock_main",
    "//third_party/googletest:gtest_main",
  ]
  if (hdf_drivers_interface_location_gnss_enable) {
    ROOT_PATH = "../../../../../../drivers/peripheral"
    deps +=
        [ "${ROOT_PATH}/location/gnss/hdi_service:liblocation_gnss_hdi_driver" ]
  }
  if (is_standard_system) {
    external_deps = [
      "c_utils:utils",
      "hdf_core:libhdf_host",
      "hdf_core:libhdf_ipc_adapter",
      "hdf_core:libhdi",
      "hilog:libhilog",
      "ipc:ipc_single",
    ]
    if (hdf_drivers_interface_location_agnss_enable) {
      external_deps +=
          [ "drivers_interface_location_agnss:liblocation_agnss_proxy_2.0" ]
      defines += [ "HDF_DRIVERS_INTERFACE_AGNSS_ENABLE" ]
    }
    if (hdf_drivers_interface_location_geofence_enable) {
      external_deps += [
        "drivers_interface_location_geofence:liblocation_geofence_proxy_2.0",
      ]
      defines += [ "HDF_DRIVERS_INTERFACE_GEOFENCE_ENABLE" ]
    }
    if (hdf_drivers_interface_location_gnss_enable &&
        location_feature_with_gnss) {
      external_deps +=
          [ "drivers_interface_location_gnss:liblocation_gnss_proxy_2.0" ]
      defines += [ "FEATURE_GNSS_SUPPORT" ]
    }
  } else {
    external_deps = [
      "hilog:libhilog",
      "ipc:ipc_single",
    ]
  }

  subsystem_name = "xts"
  part_name = "hats"
}

config("hdf_gnss") {
  include_dirs = [ "include" ]
  cflags = [
    "-Wall",
    "-Wextra",
    "-Werror",
    "-fsigned-char",
    "-fno-common",
    "-fno-strict-aliasing",
  ]
}
