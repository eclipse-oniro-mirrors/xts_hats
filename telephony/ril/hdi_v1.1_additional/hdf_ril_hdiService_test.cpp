/*
 * Copyright (c) 2022 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "cmath"
#include "condition_variable"
#include "cstdio"
#include "hdf_base.h"
#include "hdf_log.h"
#include "map"
#include "mutex"
#include "securec.h"
#include "stdlib.h"
#include "unistd.h"
#include "v1_2/iril.h"
#include "gtest/gtest.h"

using namespace OHOS::HDI::Ril::V1_2;
using namespace testing::ext;

enum class HdiId {
    HREQ_NONE = -1,
    HREQ_CALL_BASE = 0,
    HREQ_CALL_GET_CALL_LIST,
    HREQ_CALL_DIAL,
    HREQ_CALL_HANGUP,
    HREQ_CALL_REJECT,
    HREQ_CALL_ANSWER,
    HREQ_CALL_HOLD_CALL,
    HREQ_CALL_UNHOLD_CALL,
    HREQ_CALL_SWITCH_CALL,
    HREQ_CALL_COMBINE_CONFERENCE,
    HREQ_CALL_SEPARATE_CONFERENCE,
    HREQ_CALL_CALL_SUPPLEMENT,
    HREQ_CALL_SEND_DTMF,
    HREQ_CALL_START_DTMF,
    HREQ_CALL_STOP_DTMF,
    HREQ_CALL_SET_CLIP,
    HREQ_CALL_GET_CLIP,
    HREQ_CALL_GET_CALL_WAITING,
    HREQ_CALL_SET_CALL_WAITING,
    HREQ_CALL_GET_CALL_RESTRICTION,
    HREQ_CALL_SET_CALL_RESTRICTION,
    HREQ_CALL_GET_CALL_TRANSFER_INFO,
    HREQ_CALL_SET_CALL_TRANSFER_INFO,
    HREQ_CALL_GET_CLIR,
    HREQ_CALL_SET_CLIR,
    HREQ_CALL_GET_CALL_PREFERENCE,
    HREQ_CALL_SET_CALL_PREFERENCE,
    HREQ_CALL_SET_USSD,
    HREQ_CALL_GET_USSD,
    HREQ_CALL_SET_MUTE,
    HREQ_CALL_GET_MUTE,
    HREQ_CALL_GET_EMERGENCY_LIST,
    HREQ_CALL_SET_EMERGENCY_LIST,
    HREQ_CALL_GET_FAIL_REASON,
    HREQ_CALL_SET_BARRING_PASSWORD,
    HREQ_CALL_CLOSE_UNFINISHED_USSD,
    HREQ_SET_VONR_SWITCH,

    HREQ_SMS_BASE = 100,
    HREQ_SMS_SEND_GSM_SMS,
    HREQ_SMS_SEND_CDMA_SMS,
    HREQ_SMS_ADD_SIM_MESSAGE,
    HREQ_SMS_DEL_SIM_MESSAGE,
    HREQ_SMS_UPDATE_SIM_MESSAGE,
    HREQ_SMS_SEND_SMS_MORE_MODE,
    HREQ_SMS_SEND_SMS_ACK,
    HREQ_SMS_SET_SMSC_ADDR,
    HREQ_SMS_GET_SMSC_ADDR,
    HREQ_SMS_SET_CB_CONFIG,
    HREQ_SMS_GET_CB_CONFIG,
    HREQ_SMS_GET_CDMA_CB_CONFIG,
    HREQ_SMS_SET_CDMA_CB_CONFIG,
    HREQ_SMS_ADD_CDMA_SIM_MESSAGE,
    HREQ_SMS_DEL_CDMA_SIM_MESSAGE,
    HREQ_SMS_UPDATE_CDMA_SIM_MESSAGE,

    HREQ_SIM_BASE = 200,
    HREQ_SIM_GET_SIM_STATUS,
    HREQ_SIM_GET_IMSI,
    HREQ_SIM_GET_SIM_IO,
    HREQ_SIM_GET_SIM_LOCK_STATUS,
    HREQ_SIM_SET_SIM_LOCK,
    HREQ_SIM_CHANGE_SIM_PASSWORD,
    HREQ_SIM_UNLOCK_PIN,
    HREQ_SIM_UNLOCK_PUK,
    HREQ_SIM_GET_SIM_PIN_INPUT_TIMES,
    HREQ_SIM_UNLOCK_PIN2,
    HREQ_SIM_UNLOCK_PUK2,
    HREQ_SIM_GET_SIM_PIN2_INPUT_TIMES,
    HREQ_SIM_SET_ACTIVE_SIM,
    HREQ_SIM_RADIO_PROTOCOL,
    HREQ_SIM_STK_SEND_TERMINAL_RESPONSE,
    HREQ_SIM_STK_SEND_ENVELOPE,
    HREQ_SIM_STK_SEND_CALL_SETUP_REQUEST_RESULT,
    HREQ_SIM_STK_IS_READY,
    HREQ_SIM_OPEN_LOGICAL_CHANNEL,
    HREQ_SIM_CLOSE_LOGICAL_CHANNEL,
    HREQ_SIM_TRANSMIT_APDU_LOGICAL_CHANNEL,
    HREQ_SIM_TRANSMIT_APDU_BASIC_CHANNEL,
    HREQ_SIM_AUTHENTICATION,
    HREQ_SIM_UNLOCK_SIM_LOCK,
    HREQ_SIM_SEND_NCFG_OPER_INFO,

    HREQ_DATA_BASE = 300,
    HREQ_DATA_SET_INIT_APN_INFO,
    HREQ_DATA_DEACTIVATE_PDP_CONTEXT,
    HREQ_DATA_ACTIVATE_PDP_CONTEXT,
    HREQ_DATA_GET_PDP_CONTEXT_LIST,
    HREQ_DATA_GET_LINK_BANDWIDTH_INFO,
    HREQ_DATA_SET_LINK_BANDWIDTH_REPORTING_RULE,
    HREQ_DATA_SET_DATA_PROFILE_INFO,
    HREQ_DATA_SEND_DATA_PERFORMANCE_MODE,
    HREQ_DATA_SEND_DATA_SLEEP_MODE,
    HREQ_DATA_SET_DATA_PERMITTED,
    HREQ_DATA_GET_LINK_CAPABILITY,
    HREQ_DATA_CLEAN_ALL_CONNECTIONS,

    HREQ_NETWORK_BASE = 400,
    HREQ_NETWORK_GET_SIGNAL_STRENGTH,
    HREQ_NETWORK_GET_CS_REG_STATUS,
    HREQ_NETWORK_GET_PS_REG_STATUS,
    HREQ_NETWORK_GET_OPERATOR_INFO,
    HREQ_NETWORK_GET_NETWORK_SEARCH_INFORMATION,
    HREQ_NETWORK_GET_NETWORK_SELECTION_MODE,
    HREQ_NETWORK_SET_NETWORK_SELECTION_MODE,
    HREQ_NETWORK_GET_NEIGHBORING_CELLINFO_LIST,
    HREQ_NETWORK_GET_CURRENT_CELL_INFO,
    HREQ_NETWORK_SET_PREFERRED_NETWORK,
    HREQ_NETWORK_GET_PREFERRED_NETWORK,
    HREQ_NETWORK_GET_RADIO_CAPABILITY,
    HREQ_NETWORK_GET_PHYSICAL_CHANNEL_CONFIG,
    HREQ_NETWORK_SET_LOCATE_UPDATES,
    HREQ_NETWORK_SET_NOTIFICATION_FILTER,
    HREQ_NETWORK_SET_DEVICE_STATE,
    HREQ_NETWORK_GET_RRC_CONNECTION_STATE,
    HREQ_NETWORK_SET_NR_OPTION_MODE,
    HREQ_NETWORK_GET_NR_OPTION_MODE,

    HREQ_COMMON_BASE = 500,
    HREQ_MODEM_SHUT_DOWN,
    HREQ_MODEM_SET_RADIO_STATUS,
    HREQ_MODEM_GET_RADIO_STATUS,
    HREQ_MODEM_GET_IMEI,
    HREQ_MODEM_GET_MEID,
    HREQ_MODEM_GET_BASEBAND_VERSION,
    HREQ_MODEM_GET_VOICE_RADIO,
    HREQ_MODEM_EXIT = 1000
};

enum class DeviceStateType { POWER_SAVE_MODE, CHARGING_STATE, LOW_DATA_STATE };

enum class NrMode { NR_MODE_UNKNOWN, NR_MODE_NSA_ONLY, NR_MODE_SA_ONLY, NR_MODE_NSA_AND_SA };

enum class NotificationFilter {
    NOTIFICATION_FILTER_ALL = -1,
    NOTIFICATION_FILTER_NONE = 0,
    NOTIFICATION_FILTER_SIGNAL_STRENGTH = 1,
    NOTIFICATION_FILTER_NETWORK_STATE = 2,
    NOTIFICATION_FILTER_DATA_CALL = 4,
    NOTIFICATION_FILTER_LINK_CAPACITY = 8,
    NOTIFICATION_FILTER_PHYSICAL_CHANNEL_CONFIG = 16
};

enum class RatType {
    NETWORK_TYPE_UNKNOWN = 0,
    NETWORK_TYPE_GSM,
    NETWORK_TYPE_CDMA,
    NETWORK_TYPE_WCDMA,
    NETWORK_TYPE_TDSCDMA,
    NETWORK_TYPE_LTE,
    NETWORK_TYPE_NR
};

enum class SelectionMode { MODE_TYPE_UNKNOWN = -1, MODE_TYPE_AUTO = 0, MODE_TYPE_MANUAL = 1 };

enum class PreferredNetworkMode {
    CORE_NETWORK_MODE_AUTO = 0,
    CORE_NETWORK_MODE_GSM = 1,
    CORE_NETWORK_MODE_WCDMA = 2,
    CORE_NETWORK_MODE_LTE = 3,
    CORE_NETWORK_MODE_LTE_WCDMA = 4,
    CORE_NETWORK_MODE_LTE_WCDMA_GSM = 5,
    CORE_NETWORK_MODE_WCDMA_GSM = 6,
    CORE_NETWORK_MODE_CDMA = 7,
    CORE_NETWORK_MODE_EVDO = 8,
    CORE_NETWORK_MODE_EVDO_CDMA = 9,
    CORE_NETWORK_MODE_WCDMA_GSM_EVDO_CDMA = 10,
    CORE_NETWORK_MODE_LTE_EVDO_CDMA = 11,
    CORE_NETWORK_MODE_LTE_WCDMA_GSM_EVDO_CDMA = 12,
    CORE_NETWORK_MODE_TDSCDMA = 13,
    CORE_NETWORK_MODE_TDSCDMA_GSM = 14,
    CORE_NETWORK_MODE_TDSCDMA_WCDMA = 15,
    CORE_NETWORK_MODE_TDSCDMA_WCDMA_GSM = 16,
    CORE_NETWORK_MODE_LTE_TDSCDMA = 17,
    CORE_NETWORK_MODE_LTE_TDSCDMA_GSM = 18,
    CORE_NETWORK_MODE_LTE_TDSCDMA_WCDMA = 19,
    CORE_NETWORK_MODE_LTE_TDSCDMA_WCDMA_GSM = 20,
    CORE_NETWORK_MODE_TDSCDMA_WCDMA_GSM_EVDO_CDMA = 21,
    CORE_NETWORK_MODE_LTE_TDSCDMA_WCDMA_GSM_EVDO_CDMA = 22,
    CORE_NETWORK_MODE_NR = 31,
    CORE_NETWORK_MODE_NR_LTE = 32,
    CORE_NETWORK_MODE_NR_LTE_WCDMA = 33,
    CORE_NETWORK_MODE_NR_LTE_WCDMA_GSM = 34,
    CORE_NETWORK_MODE_NR_LTE_EVDO_CDMA = 35,
    CORE_NETWORK_MODE_NR_LTE_WCDMA_GSM_EVDO_CDMA = 36,
    CORE_NETWORK_MODE_NR_LTE_TDSCDMA = 37,
    CORE_NETWORK_MODE_NR_LTE_TDSCDMA_GSM = 38,
    CORE_NETWORK_MODE_NR_LTE_TDSCDMA_WCDMA = 39,
    CORE_NETWORK_MODE_NR_LTE_TDSCDMA_WCDMA_GSM = 40,
    CORE_NETWORK_MODE_NR_LTE_TDSCDMA_WCDMA_GSM_EVDO_CDMA = 41,
    CORE_NETWORK_MODE_MAX_VALUE = 99,
};

enum class SimMessageStatus {
    SIM_MESSAGE_STATUS_UNREAD = 0,
    SIM_MESSAGE_STATUS_READ = 1,
    SIM_MESSAGE_STATUS_UNSENT = 2,
    SIM_MESSAGE_STATUS_SENT = 3,
};

class RilCallback : public OHOS::HDI::Ril::V1_2::IRilCallback {
public:
    void NotifyAll();
    void WaitFor(int32_t timeoutSecond);
    bool GetBoolResult(HdiId hdiId_);
    void Clean();

    int32_t CallStateUpdated(const RilRadioResponseInfo &responseInfo) override;
    int32_t CallRingbackVoiceNotice(const RilRadioResponseInfo &responseInfo,
                                    const RingbackVoice &ringbackVoice) override;
    int32_t CallSrvccStatusNotice(const RilRadioResponseInfo &responseInfo, const SrvccStatus &srvccStatus) override;
    int32_t CallUssdNotice(const RilRadioResponseInfo &responseInfo, const UssdNoticeInfo &ussdNoticeInfo) override;
    int32_t CallSsNotice(const RilRadioResponseInfo &responseInfo, const SsNoticeInfo &ssNoticeInfo) override;
    int32_t CallEmergencyNotice(const RilRadioResponseInfo &responseInfo,
                                const EmergencyInfoList &emergencyInfoList) override;
    int32_t CallRsrvccStatusNotify(const RilRadioResponseInfo &responseInfo) override;
    int32_t SetEmergencyCallListResponse(const RilRadioResponseInfo &responseInfo) override;
    int32_t GetEmergencyCallListResponse(const RilRadioResponseInfo &responseInfo,
                                         const EmergencyInfoList &emergencyInfoList) override;
    int32_t GetCallListResponse(const RilRadioResponseInfo &responseInfo, const CallInfoList &callList) override;
    int32_t DialResponse(const RilRadioResponseInfo &responseInfo) override;
    int32_t HangupResponse(const RilRadioResponseInfo &responseInfo) override;
    int32_t RejectResponse(const RilRadioResponseInfo &responseInfo) override;
    int32_t AnswerResponse(const RilRadioResponseInfo &responseInfo) override;
    int32_t HoldCallResponse(const RilRadioResponseInfo &responseInfo) override;
    int32_t UnHoldCallResponse(const RilRadioResponseInfo &responseInfo) override;
    int32_t SwitchCallResponse(const RilRadioResponseInfo &responseInfo) override;
    int32_t GetClipResponse(const RilRadioResponseInfo &responseInfo, const GetClipResult &getClipResult) override;
    int32_t SetClipResponse(const RilRadioResponseInfo &responseInfo) override;
    int32_t CombineConferenceResponse(const RilRadioResponseInfo &responseInfo) override;
    int32_t SeparateConferenceResponse(const RilRadioResponseInfo &responseInfo) override;
    int32_t CallSupplementResponse(const RilRadioResponseInfo &responseInfo) override;
    int32_t GetCallWaitingResponse(const RilRadioResponseInfo &responseInfo,
                                   const CallWaitResult &callWaitResult) override;
    int32_t SetCallWaitingResponse(const RilRadioResponseInfo &responseInfo) override;
    int32_t GetCallTransferInfoResponse(const RilRadioResponseInfo &responseInfo,
                                        const CallForwardQueryInfoList &cFQueryList) override;
    int32_t SetCallTransferInfoResponse(const RilRadioResponseInfo &responseInfo) override;
    int32_t GetCallRestrictionResponse(const RilRadioResponseInfo &responseInfo,
                                       const CallRestrictionResult &result) override;
    int32_t SetCallRestrictionResponse(const RilRadioResponseInfo &responseInfo) override;
    int32_t GetClirResponse(const RilRadioResponseInfo &responseInfo, const GetClirResult &getClirResult) override;
    int32_t SetClirResponse(const RilRadioResponseInfo &responseInfo) override;
    int32_t StartDtmfResponse(const RilRadioResponseInfo &responseInfo) override;
    int32_t SendDtmfResponse(const RilRadioResponseInfo &responseInfo) override;
    int32_t StopDtmfResponse(const RilRadioResponseInfo &responseInfo) override;
    int32_t GetCallPreferenceModeResponse(const RilRadioResponseInfo &responseInfo, int32_t mode) override;
    int32_t SetCallPreferenceModeResponse(const RilRadioResponseInfo &responseInfo) override;
    int32_t SetUssdResponse(const RilRadioResponseInfo &responseInfo) override;
    int32_t GetUssdResponse(const RilRadioResponseInfo &responseInfo, int32_t cusd) override;
    int32_t SetMuteResponse(const RilRadioResponseInfo &responseInfo) override;
    int32_t GetMuteResponse(const RilRadioResponseInfo &responseInfo, int32_t mute) override;
    int32_t GetCallFailReasonResponse(const RilRadioResponseInfo &responseInfo, int32_t callFail) override;
    int32_t SetBarringPasswordResponse(const RilRadioResponseInfo &responseInfo) override;
    int32_t CloseUnFinishedUssdResponse(const RilRadioResponseInfo &responseInfo) override;
    int32_t SetVonrSwitchResponse(const RilRadioResponseInfo &responseInfo) override;

    int32_t PdpContextListUpdated(const RilRadioResponseInfo &responseInfo,
                                  const DataCallResultList &dataCallResultList) override;
    int32_t DataLinkCapabilityUpdated(const RilRadioResponseInfo &responseInfo,
                                      const DataLinkCapability &dataLinkCapability) override;
    int32_t ActivatePdpContextResponse(const RilRadioResponseInfo &responseInfo,
                                       const SetupDataCallResultInfo &setupDataCallResultInfo) override;
    int32_t DeactivatePdpContextResponse(const RilRadioResponseInfo &responseInfo) override;
    int32_t GetPdpContextListResponse(const RilRadioResponseInfo &responseInfo,
                                      const DataCallResultList &dataCallResultList) override;
    int32_t SetInitApnInfoResponse(const RilRadioResponseInfo &responseInfo) override;
    int32_t SetLinkBandwidthReportingRuleResponse(const RilRadioResponseInfo &responseInfo) override;
    int32_t GetLinkBandwidthInfoResponse(const RilRadioResponseInfo &responseInfo,
                                         const DataLinkBandwidthInfo &dataLinkBandwidthInfo) override;
    int32_t SetDataPermittedResponse(const RilRadioResponseInfo &responseInfo) override;
    int32_t SetDataProfileInfoResponse(const RilRadioResponseInfo &responseInfo);
    int32_t GetLinkCapabilityResponse(const RilRadioResponseInfo &responseInfo,
                                      const DataLinkCapability &dataLinkCapability) override;
    int32_t CleanAllConnectionsResponse(const RilRadioResponseInfo &responseInfo) override;

    int32_t RadioStateUpdated(const RilRadioResponseInfo &responseInfo, int32_t state) override;
    int32_t VoiceRadioTechUpdated(const RilRadioResponseInfo &responseInfo,
                                  const VoiceRadioTechnology &voiceRadioTechnology) override;
    int32_t DsdsModeUpdated(const RilRadioResponseInfo &responseInfo, int32_t mode) override;
    int32_t ShutDownResponse(const RilRadioResponseInfo &responseInfo) override;
    int32_t SetRadioStateResponse(const RilRadioResponseInfo &responseInfo) override;
    int32_t GetRadioStateResponse(const RilRadioResponseInfo &responseInfo, int32_t state) override;
    int32_t GetImeiResponse(const RilRadioResponseInfo &responseInfo, const std::string &imei) override;
    int32_t GetMeidResponse(const RilRadioResponseInfo &responseInfo, const std::string &meid) override;
    int32_t GetVoiceRadioTechnologyResponse(const RilRadioResponseInfo &responseInfo,
                                            const VoiceRadioTechnology &voiceRadioTechnology) override;
    int32_t GetBasebandVersionResponse(const RilRadioResponseInfo &responseInfo,
                                       const std::string &basebandVersion) override;

    int32_t SimStateUpdated(const RilRadioResponseInfo &responseInfo) override;
    int32_t SimStkSessionEndNotify(const RilRadioResponseInfo &responseInfo) override;
    int32_t SimStkProactiveNotify(const RilRadioResponseInfo &responseInfo, const std::string &response) override;
    int32_t SimStkAlphaNotify(const RilRadioResponseInfo &responseInfo, const std::string &response) override;
    int32_t SimStkEventNotify(const RilRadioResponseInfo &responseInfo, const std::string &response) override;
    int32_t SimStkCallSetupNotify(const RilRadioResponseInfo &responseInfo) override;
    int32_t SimRefreshNotify(const RilRadioResponseInfo &responseInfo) override;
    int32_t SimRadioProtocolUpdated(const RilRadioResponseInfo &responseInfo,
                                    const RadioProtocol &radioProtocol) override
    {
        return 0;
    }
    int32_t GetSimIOResponse(const RilRadioResponseInfo &responseInfo, const IccIoResultInfo &result) override;
    int32_t GetSimStatusResponse(const RilRadioResponseInfo &responseInfo, const CardStatusInfo &result) override;
    int32_t GetImsiResponse(const RilRadioResponseInfo &responseInfo, const std::string &response) override;
    int32_t GetSimLockStatusResponse(const RilRadioResponseInfo &responseInfo, int32_t simLockStatus) override;
    int32_t SetSimLockResponse(const RilRadioResponseInfo &responseInfo, const LockStatusResp &lockStatus) override;
    int32_t ChangeSimPasswordResponse(const RilRadioResponseInfo &responseInfo,
                                      const LockStatusResp &lockStatus) override;
    int32_t UnlockPinResponse(const RilRadioResponseInfo &responseInfo, const LockStatusResp &lockStatus) override;
    int32_t UnlockPukResponse(const RilRadioResponseInfo &responseInfo, const LockStatusResp &lockStatus) override;
    int32_t UnlockPin2Response(const RilRadioResponseInfo &responseInfo, const LockStatusResp &lockStatus) override;
    int32_t UnlockPuk2Response(const RilRadioResponseInfo &responseInfo, const LockStatusResp &lockStatus) override;
    int32_t SetActiveSimResponse(const RilRadioResponseInfo &responseInfo) override;
    int32_t SimStkSendTerminalResponseResponse(const RilRadioResponseInfo &responseInfo) override;
    int32_t SimStkSendEnvelopeResponse(const RilRadioResponseInfo &responseInfo) override;
    int32_t SimStkSendCallSetupRequestResultResponse(const RilRadioResponseInfo &responseInfo) override;
    int32_t SimStkIsReadyResponse(const RilRadioResponseInfo &responseInfo) override;
    int32_t SetRadioProtocolResponse(const RilRadioResponseInfo &responseInfo,
                                     const RadioProtocol &radioProtocol) override;
    int32_t GetRadioProtocolResponse(const RilRadioResponseInfo &responseInfo,
                                     const RadioProtocol &radioProtocol) override;
    int32_t SimOpenLogicalChannelResponse(const RilRadioResponseInfo &responseInfo,
                                          const OpenLogicalChannelResponse &pOpenLogicalChannelResponse) override;
    int32_t SimCloseLogicalChannelResponse(const RilRadioResponseInfo &responseInfo) override;
    int32_t SimTransmitApduLogicalChannelResponse(const RilRadioResponseInfo &responseInfo,
                                                  const IccIoResultInfo &result) override;
    int32_t SimTransmitApduBasicChannelResponse(const RilRadioResponseInfo &responseInfo,
                                                const IccIoResultInfo &result) override;
    int32_t SimAuthenticationResponse(const RilRadioResponseInfo &responseInfo, const IccIoResultInfo &result) override;
    int32_t UnlockSimLockResponse(const RilRadioResponseInfo &responseInfo, const LockStatusResp &lockStatus) override;
    int32_t SendSimMatchedOperatorInfoResponse(const RilRadioResponseInfo &responseInfo) override;

    int32_t NetworkCsRegStatusUpdated(const RilRadioResponseInfo &responseInfo,
                                      const CsRegStatusInfo &csRegStatusInfo) override;
    int32_t NetworkPsRegStatusUpdated(const RilRadioResponseInfo &responseInfo,
                                      const PsRegStatusInfo &psRegStatusInfo) override;
    int32_t SignalStrengthUpdated(const RilRadioResponseInfo &responseInfo, const Rssi &rssi) override;
    int32_t NetworkTimeZoneUpdated(const RilRadioResponseInfo &responseInfo, const std::string &timeZoneStr) override;
    int32_t NetworkTimeUpdated(const RilRadioResponseInfo &responseInfo, const std::string &timeStr) override;
    int32_t NetworkPhyChnlCfgUpdated(const RilRadioResponseInfo &responseInfo,
                                     const ChannelConfigInfoList &channelConfigInfoList) override;
    int32_t NetworkCurrentCellUpdated(const RilRadioResponseInfo &responseInfo,
                                      const CellListCurrentInfo &cellListCurrentInfo) override;
    int32_t NetworkCurrentCellUpdated_1_1(const RilRadioResponseInfo &responseInfo,
                                          const CellListCurrentInfo_1_1 &cellListCurrentInfo) override;
    int32_t ResidentNetworkUpdated(const RilRadioResponseInfo &responseInfo, const std::string &plmn) override;
    int32_t GetSignalStrengthResponse(const RilRadioResponseInfo &responseInfo, const Rssi &rssi) override;
    int32_t GetCsRegStatusResponse(const RilRadioResponseInfo &responseInfo,
                                   const CsRegStatusInfo &csRegStatusInfo) override;
    int32_t GetPsRegStatusResponse(const RilRadioResponseInfo &responseInfo,
                                   const PsRegStatusInfo &psRegStatusInfo) override;
    int32_t GetOperatorInfoResponse(const RilRadioResponseInfo &responseInfo,
                                    const OperatorInfo &operatorInfo) override;
    int32_t GetNetworkSearchInformationResponse(const RilRadioResponseInfo &responseInfo,
                                                const AvailableNetworkList &availableNetworkList) override;
    int32_t GetNetworkSelectionModeResponse(const RilRadioResponseInfo &responseInfo,
                                            const SetNetworkModeInfo &setNetworkModeInfo) override;
    int32_t SetNetworkSelectionModeResponse(const RilRadioResponseInfo &responseInfo) override;
    int32_t GetNeighboringCellInfoListResponse(const RilRadioResponseInfo &responseInfo,
                                               const CellListNearbyInfo &cellInfoList) override;
    int32_t GetCurrentCellInfoResponse_1_1(const RilRadioResponseInfo &responseInfo,
                                           const CellListCurrentInfo_1_1 &cellListCurrentInfo) override;
    int32_t GetCurrentCellInfoResponse(const RilRadioResponseInfo &responseInfo,
                                       const CellListCurrentInfo &cellInfoList) override;
    int32_t SetPreferredNetworkResponse(const RilRadioResponseInfo &responseInfo) override;
    int32_t GetPreferredNetworkResponse(const RilRadioResponseInfo &responseInfo,
                                        const PreferredNetworkTypeInfo &preferredNetworkTypeInfo) override;
    int32_t GetPhysicalChannelConfigResponse(const RilRadioResponseInfo &responseInfo,
                                             const ChannelConfigInfoList &channelConfigInfoList) override;
    int32_t SetLocateUpdatesResponse(const RilRadioResponseInfo &responseInfo) override;
    int32_t SetNotificationFilterResponse(const RilRadioResponseInfo &responseInfo) override;
    int32_t SetDeviceStateResponse(const RilRadioResponseInfo &responseInfo) override;
    int32_t GetRrcConnectionStateResponse(const RilRadioResponseInfo &responseInfo, int32_t state) override;
    int32_t SetNrOptionModeResponse(const RilRadioResponseInfo &responseInfo) override;
    int32_t GetNrOptionModeResponse(const RilRadioResponseInfo &responseInfo, int32_t mode) override;
    int32_t GetRrcConnectionStateUpdated(const RilRadioResponseInfo &responseInfo, int32_t state) override;

    int32_t NewSmsNotify(const HDI::Ril::V1_1::RilRadioResponseInfo &responseInfo,
                         const SmsMessageInfo &smsMessageInfo) override;
    int32_t NewCdmaSmsNotify(const HDI::Ril::V1_1::RilRadioResponseInfo &responseInfo,
                             const SmsMessageInfo &smsMessageInfo) override;
    int32_t SmsStatusReportNotify(const HDI::Ril::V1_1::RilRadioResponseInfo &responseInfo,
                                  const SmsMessageInfo &smsMessageInfo) override;
    int32_t NewSmsStoredOnSimNotify(const HDI::Ril::V1_1::RilRadioResponseInfo &responseInfo, int32_t recordNumber,
                                    int32_t indicationType) override;
    int32_t CBConfigNotify(const HDI::Ril::V1_1::RilRadioResponseInfo &responseInfo,
                           const CBConfigReportInfo &cellBroadConfigReportInfo) override;
    int32_t SendGsmSmsResponse(const RilRadioResponseInfo &responseInfo,
                               const SendSmsResultInfo &sendSmsResultInfo) override;
    int32_t SendCdmaSmsResponse(const RilRadioResponseInfo &responseInfo,
                                const SendSmsResultInfo &sendSmsResultInfo) override;
    int32_t AddSimMessageResponse(const RilRadioResponseInfo &responseInfo) override;
    int32_t DelSimMessageResponse(const RilRadioResponseInfo &responseInfo) override;
    int32_t UpdateSimMessageResponse(const RilRadioResponseInfo &responseInfo) override;
    int32_t AddCdmaSimMessageResponse(const RilRadioResponseInfo &responseInfo) override;
    int32_t DelCdmaSimMessageResponse(const RilRadioResponseInfo &responseInfo) override;
    int32_t UpdateCdmaSimMessageResponse(const RilRadioResponseInfo &responseInfo) override;
    int32_t SetSmscAddrResponse(const RilRadioResponseInfo &responseInfo) override;
    int32_t GetSmscAddrResponse(const RilRadioResponseInfo &responseInfo,
                                const ServiceCenterAddress &serviceCenterAddress) override;
    int32_t SetCBConfigResponse(const RilRadioResponseInfo &responseInfo) override;
    int32_t GetCBConfigResponse(const RilRadioResponseInfo &responseInfo,
                                const CBConfigInfo &cellBroadcastInfo) override;
    int32_t SetCdmaCBConfigResponse(const RilRadioResponseInfo &responseInfo) override;
    int32_t GetCdmaCBConfigResponse(const RilRadioResponseInfo &responseInfo,
                                    const CdmaCBConfigInfo &cdmaCBConfigInfo) override;
    int32_t SendSmsMoreModeResponse(const RilRadioResponseInfo &responseInfo,
                                    const SendSmsResultInfo &sendSmsResultInfo) override;
    int32_t SendSmsAckResponse(const RilRadioResponseInfo &responseInfo) override;

    int32_t CommonErrorResponse(const RilRadioResponseInfo &responseInfo) override;

private:
    std::mutex callbackMutex_;
    std::condition_variable cv_;
    HdiId hdiId_;
    RilRadioResponseInfo resultInfo_;
};

class HdfRilHdiTestAdditional : public testing::Test {
public:
    static void SetUpTestCase();
    static void TearDownTestCase();
    void SetUp();
    void TearDown();
};

namespace {
sptr<OHOS::HDI::Ril::V1_2::IRil> g_rilInterface = nullptr;
RilCallback callback_;
constexpr static int32_t SLOTID_1 = 0;
constexpr static int32_t SLOTID_2 = 1;
constexpr static int32_t SUCCESS = 0;
constexpr static int32_t WAIT_TIME_SECOND = 20;
constexpr static int32_t WAIT_TIME_SECOND_LONG = 40;
std::map<int32_t, int32_t> simState_;
int32_t currentChannelId_ = 1;
const std::string TEST_STORAGE_PDU = "1234";
const std::string TEST_SEND_PDU = "A10305810180F6000004F4F29C0E";
const std::string TEST_SMSC_PDU = "00";
const std::string TEST_CDMA_PDU = "pdu";
const std::string TEST_SMSC_ADDR = "00";
const std::string TEST_ID_LIST = "0,1,5,320-478,922";
const std::string TEST_DCS_LIST = "0-3,5";
int32_t currentSerialId = 0;
bool g_hangupResponseFlag = false;
bool g_rejectResponseFlag = false;
bool g_answerResponseFlag = false;
bool g_holdCallResponseFlag = false;
bool g_unHoldCallResponseFlag = false;
bool g_switchCallResponseFlag = false;
bool g_getClipResponseFlag = false;
bool g_setClipResponseFlag = false;
bool g_simStkSendTerminalResponseResponseFlag = false;
bool g_simStkSendEnvelopeResponseFlag = false;
bool g_simStkSendCallSetupRequestResultResponseFlag = false;
bool g_simStkIsReadyResponseFlag = false;
bool g_getRadioProtocolResponseFlag = false;
bool g_setRadioProtocolResponseFlag = false;
bool g_simOpenLogicalChannelResponseFlag = false;
bool g_simCloseLogicalChannelResponseFlag = false;
bool g_simTransmitApduLogicalChannelResponseFlag = false;
bool g_simTransmitApduBasicChannelResponseFlag = false;
bool g_simAuthenticationResponseFlag = false;
bool g_unlockSimLockResponseFlag = false;
bool g_getSignalStrengthResponseFlag = false;
bool g_getCsRegStatusResponseFlag = false;
bool g_getPsRegStatusResponseFlag = false;
bool g_getOperatorInfoResponseFlag = false;
bool g_getNetworkSearchInformationResponseFlag = false;
bool g_getNetworkSelectionModeResponseFlag = false;
bool g_getNeighboringCellInfoListResponseFlag = false;
bool g_getCurrentCellInfoResponseFlag = false;
bool g_getCurrentCellInfoResponse_1_1Flag = false;
bool g_setNetworkSelectionModeResponseFlag = false;
bool g_setLocateUpdatesResponseFlag = false;
bool g_setNotificationFilterResponseFlag = false;
bool g_setDeviceStateResponseFlag = false;
bool g_sendGsmSmsResponseFlag = false;
bool g_sendCdmaSmsResponseFlag = false;
bool g_addSimMessageResponseFlag = false;
bool g_delSimMessageResponseFlag = false;
bool g_updateSimMessageResponseFlag = false;
bool g_addCdmaSimMessageResponseFlag = false;
bool g_delCdmaSimMessageResponseFlag = false;
bool g_setPreferredNetworkResponseFlag = false;
bool g_getPreferredNetworkResponseFlag = false;
bool g_getPhysicalChannelConfigResponseFlag = false;
bool g_separateConferenceResponseFlag = false;
bool g_callSupplementResponseFlag = false;
bool g_getCallWaitingResponseFlag = false;
bool g_setCallWaitingResponseFlag = false;
bool g_getUssdResponseFlag = false;
bool g_setMuteResponseFlag = false;
bool g_getMuteResponseFlag = false;
bool g_setDataPermittedResponseFlag = false;
bool g_shutDownResponseFlag = false;
bool g_setRadioStateResponseFlag = false;
bool g_getRadioStateResponseFlag = false;
bool g_getImeiResponseFlag = false;
bool g_getMeidResponseFlag = false;
bool g_getBasebandVersionResponseFlag = false;
bool g_getImsiResponseFlag = false;
bool g_setActiveSimResponseFlag = false;
bool g_setNrOptionModeResponseFlag = false;
bool g_getNrOptionModeResponseFlag = false;
bool g_dialResponseFlag = false;
bool g_setCdmaCBConfigResponseFlag = false;
bool g_getCdmaCBConfigResponseFlag = false;
bool g_sendSmsMoreModeResponseFlag = false;
bool g_sendSmsAckResponseFlag = false;
bool g_updateCdmaSimMessageResponseFlag = false;
bool g_setSmscAddrResponseFlag = false;
bool g_getSmscAddrResponseFlag = false;
bool g_setCBConfigResponseFlag = false;
bool g_getCBConfigResponseFlag = false;
bool g_signalStrengthUpdatedFlag = false;
bool g_networkPhyChnlCfgUpdatedFlag = false;
bool g_networkCurrentCellUpdatedFlag = false;
bool g_setCallTransferInfoResponseFlag = false;
bool g_getCallRestrictionResponseFlag = false;
bool g_setCallRestrictionResponseFlag = false;
bool g_getClirResponseFlag = false;
bool g_setClirResponseFlag = false;
bool g_startDtmfResponseFlag = false;
bool g_sendDtmfResponseFlag = false;
bool g_stopDtmfResponseFlag = false;
bool g_getCallPreferenceModeResponseFlag = false;
bool g_setCallPreferenceModeResponseFlag = false;
bool g_setUssdResponseFlag = false;
bool g_closeUnFinishedUssdResponseFlag = false;
bool g_getCallFailReasonResponseFlag = false;
bool g_setBarringPasswordResponseFlag = false;
bool g_deactivatePdpContextResponseFlag = false;
bool g_getPdpContextListResponseFlag = false;
bool g_setInitApnInfoResponseFlag = false;
bool g_getLinkBandwidthInfoResponseFlag = false;
bool g_getLinkCapabilityResponseFlag = false;
bool g_getVoiceRadioTechnologyResponseFlag = false;
bool g_getSimIOResponseFlag = false;
bool g_getSimStatusResponseFlag = false;
bool g_setSimLockResponseFlag = false;
bool g_changeSimPasswordResponseFlag = false;
bool g_unlockPinResponseFlag = false;
bool g_unlockPukResponseFlag = false;
bool g_unlockPin2ResponseFlag = false;
bool g_unlockPuk2ResponseFlag = false;
bool g_setVonrSwitchResponseFlag = false;
bool g_getSimLockStatusResponseFlag = false;
bool g_getCallTransferInfoResponseFlag = false;
bool g_combineConferenceResponseFlag = false;
bool g_getCallListResponseFlag = false;
bool g_getEmergencyCallListResponseFlag = false;
bool g_setEmergencyCallListResponse = false;
} // namespace

/**
** common fun
**/
void WaitFor(int32_t timeoutSecond) { callback_.WaitFor(WAIT_TIME_SECOND); }

bool GetBoolResult(HdiId hdiId_) { return callback_.GetBoolResult(hdiId_); }

int32_t GetSerialId()
{
    currentSerialId = rand() % 10000000000;
    return currentSerialId;
}

bool IsReady(int32_t slotId)
{
    if (g_rilInterface == nullptr) {
        return false;
    }
    return simState_[slotId] != 0 && simState_[slotId] != -1;
}

/**
** RilCallback implement
**/

void RilCallback::NotifyAll()
{
    std::unique_lock<std::mutex> callbackLock(callbackMutex_);
    if (resultInfo_.serial != currentSerialId) {
        hdiId_ = HdiId::HREQ_NONE;
        HDF_LOGI("NotifyAll currentSerialId : %{public}d, serial: %{public}d not equal", currentSerialId,
                 resultInfo_.serial);
        return;
    }
    cv_.notify_all();
}

void RilCallback::WaitFor(int32_t timeoutSecond)
{
    Clean();
    std::unique_lock<std::mutex> callbackLock(callbackMutex_);
    cv_.wait_for(callbackLock, std::chrono::seconds(timeoutSecond));
}

void RilCallback::Clean() { hdiId_ = HdiId::HREQ_NONE; }

bool RilCallback::GetBoolResult(HdiId hdiId)
{
    HDF_LOGI("GetBoolResult hdiId: %{public}d, error: %{public}d", hdiId, (int32_t)resultInfo_.error);
    bool ret = false;
    if (hdiId_ == HdiId::HREQ_NONE) {
        HDF_LOGE("response timeout, not implemented."
                 "hdiId: %d, current hdiId_: %{public}d",
                 (int32_t)hdiId, hdiId_);
        ret = true;
        Clean();
        return ret;
    }
    if (hdiId_ != hdiId) {
        ret = false;
        HDF_LOGE("GetBoolResult hdiId does not match. hdiId: %{public}d, current hdiId: %{public}d", (int32_t)hdiId,
                 hdiId_);
        Clean();
        return ret;
    }
    ret = true;
    Clean();
    return ret;
}

int32_t RilCallback::SimStateUpdated(const RilRadioResponseInfo &responseInfo)
{
    HDF_LOGI("SimStateUpdated notice : slotId = %{public}d", responseInfo.slotId);
    g_rilInterface->GetSimStatus(GetSerialId(), responseInfo.slotId);
    return 0;
}

int32_t RilCallback::SimStkSessionEndNotify(const RilRadioResponseInfo &responseInfo)
{
    HDF_LOGI("SimStkSessionEndNotify notice : slotId = %{public}d", responseInfo.slotId);
    return 0;
}

int32_t RilCallback::SimStkProactiveNotify(const RilRadioResponseInfo &responseInfo, const std::string &response)
{
    HDF_LOGI("SimStkProactiveNotify notice : slotId = %{public}d, response = %{public}s", responseInfo.slotId,
             response.c_str());
    return 0;
}

int32_t RilCallback::SimStkAlphaNotify(const RilRadioResponseInfo &responseInfo, const std::string &response)
{
    HDF_LOGI("SimStkAlphaNotify notice : slotId = %{public}d, response = %{public}s", responseInfo.slotId,
             response.c_str());
    return 0;
}

int32_t RilCallback::SimStkEventNotify(const RilRadioResponseInfo &responseInfo, const std::string &response)
{
    HDF_LOGI("SimStkEventNotify notice : slotId = %{public}d, response = %{public}s", responseInfo.slotId,
             response.c_str());
    return 0;
}

int32_t RilCallback::SimStkCallSetupNotify(const RilRadioResponseInfo &responseInfo)
{
    HDF_LOGI("SimStkCallSetupNotify notice : slotId = %{public}d", responseInfo.slotId);
    return 0;
}

int32_t RilCallback::SimRefreshNotify(const RilRadioResponseInfo &responseInfo)
{
    HDF_LOGI("SimRefreshNotify notice : slotId = %{public}d", responseInfo.slotId);
    return 0;
}

int32_t RilCallback::GetSimStatusResponse(const HDI::Ril::V1_1::RilRadioResponseInfo &responseInfo,
                                          const HDI::Ril::V1_1::CardStatusInfo &result)
{
    g_getSimStatusResponseFlag = true;
    HDF_LOGI("GetBoolResult GetSimStatus result : slotId = %{public}d, simType = %{public}d, simState = %{public}d",
             responseInfo.slotId, result.simType, result.simState);
    simState_[responseInfo.slotId] = result.simState;
    HDF_LOGI("IsReady %{public}d %{public}d", responseInfo.slotId, simState_[responseInfo.slotId]);
    hdiId_ = HdiId::HREQ_SIM_GET_SIM_STATUS;
    resultInfo_ = responseInfo;
    NotifyAll();
    return 0;
}

int32_t RilCallback::GetSimIOResponse(const RilRadioResponseInfo &responseInfo, const IccIoResultInfo &result)
{
    g_getSimIOResponseFlag = true;
    HDF_LOGI("GetBoolResult GetSimIO result : sw1 = %{public}d, sw2 = %{public}d, response = %{public}s", result.sw1,
             result.sw2, result.response.c_str());
    hdiId_ = HdiId::HREQ_SIM_GET_SIM_IO;
    resultInfo_ = responseInfo;
    NotifyAll();
    return 0;
}

int32_t RilCallback::GetImsiResponse(const RilRadioResponseInfo &responseInfo, const std::string &response)
{
    HDF_LOGI("GetBoolResult GetImsi result : response = %{public}s", response.c_str());
    hdiId_ = HdiId::HREQ_SIM_GET_IMSI;
    resultInfo_ = responseInfo;
    g_getImsiResponseFlag = true;
    NotifyAll();
    return 0;
}
int32_t RilCallback::GetSimLockStatusResponse(const RilRadioResponseInfo &responseInfo, int32_t simLockStatus)
{
    HDF_LOGI("GetBoolResult GetSimLockStatus result : simLockStatus = %{public}d", simLockStatus);
    hdiId_ = HdiId::HREQ_SIM_GET_SIM_LOCK_STATUS;
    resultInfo_ = responseInfo;
    NotifyAll();
    return 0;
}
int32_t RilCallback::SetSimLockResponse(const RilRadioResponseInfo &responseInfo, const LockStatusResp &lockStatus)
{
    g_setSimLockResponseFlag = true;
    HDF_LOGI("GetBoolResult SetSimLock result : result = %{public}d, remain = %{public}d", lockStatus.result,
             lockStatus.remain);
    hdiId_ = HdiId::HREQ_SIM_SET_SIM_LOCK;
    resultInfo_ = responseInfo;
    NotifyAll();
    return 0;
}
int32_t RilCallback::ChangeSimPasswordResponse(const RilRadioResponseInfo &responseInfo,
                                               const LockStatusResp &lockStatus)
{
    g_changeSimPasswordResponseFlag = true;
    HDF_LOGI("GetBoolResult ChangeSimPassword result : result = %{public}d, remain = %{public}d", lockStatus.result,
             lockStatus.remain);
    hdiId_ = HdiId::HREQ_SIM_CHANGE_SIM_PASSWORD;
    resultInfo_ = responseInfo;
    NotifyAll();
    return 0;
}
int32_t RilCallback::UnlockPinResponse(const RilRadioResponseInfo &responseInfo, const LockStatusResp &lockStatus)
{
    g_unlockPinResponseFlag = true;
    HDF_LOGI("GetBoolResult UnlockPin result : result = %{public}d, remain = %{public}d", lockStatus.result,
             lockStatus.remain);
    hdiId_ = HdiId::HREQ_SIM_UNLOCK_PIN;
    resultInfo_ = responseInfo;
    NotifyAll();
    return 0;
}
int32_t RilCallback::UnlockPukResponse(const RilRadioResponseInfo &responseInfo, const LockStatusResp &lockStatus)
{
    g_unlockPukResponseFlag = true;
    HDF_LOGI("GetBoolResult UnlockPuk result : result = %{public}d, remain = %{public}d", lockStatus.result,
             lockStatus.remain);
    hdiId_ = HdiId::HREQ_SIM_UNLOCK_PUK;
    resultInfo_ = responseInfo;
    NotifyAll();
    return 0;
}
int32_t RilCallback::UnlockPin2Response(const RilRadioResponseInfo &responseInfo, const LockStatusResp &lockStatus)
{
    g_unlockPin2ResponseFlag = true;
    HDF_LOGI("GetBoolResult UnlockPin2 result : result = %{public}d, remain = %{public}d", lockStatus.result,
             lockStatus.remain);
    hdiId_ = HdiId::HREQ_SIM_UNLOCK_PIN2;
    resultInfo_ = responseInfo;
    NotifyAll();
    return 0;
}
int32_t RilCallback::UnlockPuk2Response(const RilRadioResponseInfo &responseInfo, const LockStatusResp &lockStatus)
{
    g_unlockPuk2ResponseFlag = true;
    HDF_LOGI("GetBoolResult UnlockPuk2 result : result = %{public}d, remain = %{public}d", lockStatus.result,
             lockStatus.remain);
    hdiId_ = HdiId::HREQ_SIM_UNLOCK_PUK2;
    resultInfo_ = responseInfo;
    NotifyAll();
    return 0;
}

int32_t RilCallback::SetActiveSimResponse(const RilRadioResponseInfo &responseInfo)
{
    HDF_LOGI("GetBoolResult SetActiveSim result");
    hdiId_ = HdiId::HREQ_SIM_SET_ACTIVE_SIM;
    resultInfo_ = responseInfo;
    g_setActiveSimResponseFlag = true;
    NotifyAll();
    return 0;
}

int32_t RilCallback::SimStkSendTerminalResponseResponse(const RilRadioResponseInfo &responseInfo)
{
    g_simStkSendTerminalResponseResponseFlag = true;
    HDF_LOGI("GetBoolResult SimStkSendTerminalResponse result");
    hdiId_ = HdiId::HREQ_SIM_STK_SEND_TERMINAL_RESPONSE;
    resultInfo_ = responseInfo;
    NotifyAll();
    return 0;
}

int32_t RilCallback::SimStkSendEnvelopeResponse(const RilRadioResponseInfo &responseInfo)
{
    g_simStkSendEnvelopeResponseFlag = true;
    HDF_LOGI("GetBoolResult SimStkSendEnvelope result");
    hdiId_ = HdiId::HREQ_SIM_STK_SEND_ENVELOPE;
    resultInfo_ = responseInfo;
    NotifyAll();
    return 0;
}

int32_t RilCallback::SimStkSendCallSetupRequestResultResponse(const RilRadioResponseInfo &responseInfo)
{
    g_simStkSendCallSetupRequestResultResponseFlag = true;
    HDF_LOGI("GetBoolResult SimStkSendCallSetupRequestResult result");
    hdiId_ = HdiId::HREQ_SIM_STK_SEND_CALL_SETUP_REQUEST_RESULT;
    resultInfo_ = responseInfo;
    NotifyAll();
    return 0;
}

int32_t RilCallback::SimStkIsReadyResponse(const RilRadioResponseInfo &responseInfo)
{
    g_simStkIsReadyResponseFlag = true;
    HDF_LOGI("GetBoolResult SimStkIsReady result");
    hdiId_ = HdiId::HREQ_SIM_STK_IS_READY;
    resultInfo_ = responseInfo;
    NotifyAll();
    return 0;
}

int32_t RilCallback::SetRadioProtocolResponse(const RilRadioResponseInfo &responseInfo,
                                              const RadioProtocol &radioProtocol)
{
    g_setRadioProtocolResponseFlag = true;
    HDF_LOGI("GetBoolResult SetRadioProtocol result : phase = %{public}d, slotId = %{public}d", radioProtocol.phase,
             radioProtocol.slotId);
    hdiId_ = HdiId::HREQ_SIM_RADIO_PROTOCOL;
    resultInfo_ = responseInfo;
    NotifyAll();
    return 0;
}

int32_t RilCallback::GetRadioProtocolResponse(const RilRadioResponseInfo &responseInfo,
                                              const RadioProtocol &radioProtocol)
{
    g_getRadioProtocolResponseFlag = true;
    return 0;
}

int32_t RilCallback::SimOpenLogicalChannelResponse(const RilRadioResponseInfo &responseInfo,
                                                   const OpenLogicalChannelResponse &pOpenLogicalChannelResponse)
{
    g_simOpenLogicalChannelResponseFlag = true;
    HDF_LOGI("GetBoolResult SimOpenLogicalChannel result : sw1 = %{public}d, sw2 = %{public}d, channelId = %{public}d, "
             "response = %{public}s",
             pOpenLogicalChannelResponse.sw1, pOpenLogicalChannelResponse.sw2, pOpenLogicalChannelResponse.channelId,
             pOpenLogicalChannelResponse.response.c_str());
    currentChannelId_ = pOpenLogicalChannelResponse.channelId;
    hdiId_ = HdiId::HREQ_SIM_OPEN_LOGICAL_CHANNEL;
    resultInfo_ = responseInfo;
    NotifyAll();
    return 0;
}

int32_t RilCallback::SimCloseLogicalChannelResponse(const RilRadioResponseInfo &responseInfo)
{
    g_simCloseLogicalChannelResponseFlag = true;
    HDF_LOGI("GetBoolResult SimCloseLogicalChannel result");
    hdiId_ = HdiId::HREQ_SIM_CLOSE_LOGICAL_CHANNEL;
    resultInfo_ = responseInfo;
    NotifyAll();
    return 0;
}

int32_t RilCallback::SimTransmitApduLogicalChannelResponse(const RilRadioResponseInfo &responseInfo,
                                                           const IccIoResultInfo &result)
{
    g_simTransmitApduLogicalChannelResponseFlag = true;
    HDF_LOGI("GetBoolResult SimTransmitApduLogicalChannel result : sw1 = %{public}d, sw2 = %{public}d, response = "
             "%{public}s",
             result.sw1, result.sw2, result.response.c_str());
    hdiId_ = HdiId::HREQ_SIM_TRANSMIT_APDU_LOGICAL_CHANNEL;
    resultInfo_ = responseInfo;
    NotifyAll();
    return 0;
}

int32_t RilCallback::SimTransmitApduBasicChannelResponse(const RilRadioResponseInfo &responseInfo,
                                                         const IccIoResultInfo &result)
{
    g_simTransmitApduBasicChannelResponseFlag = true;
    HDF_LOGI(
        "GetBoolResult SimTransmitApduBasicChannel result : sw1 = %{public}d, sw2 = %{public}d, response = %{public}s",
        result.sw1, result.sw2, result.response.c_str());
    hdiId_ = HdiId::HREQ_SIM_TRANSMIT_APDU_BASIC_CHANNEL;
    resultInfo_ = responseInfo;
    NotifyAll();
    return 0;
}
int32_t RilCallback::SimAuthenticationResponse(const RilRadioResponseInfo &responseInfo, const IccIoResultInfo &result)
{
    g_simAuthenticationResponseFlag = true;
    HDF_LOGI("GetBoolResult SimAuthentication result : sw1 = %{public}d, sw2 = %{public}d, response = %{public}s",
             result.sw1, result.sw2, result.response.c_str());
    hdiId_ = HdiId::HREQ_SIM_AUTHENTICATION;
    resultInfo_ = responseInfo;
    NotifyAll();
    return 0;
}

int32_t RilCallback::UnlockSimLockResponse(const RilRadioResponseInfo &responseInfo, const LockStatusResp &lockStatus)
{
    g_unlockSimLockResponseFlag = true;
    HDF_LOGI("GetBoolResult UnlockSimLock result : result = %{public}d, remain = %{public}d", lockStatus.result,
             lockStatus.remain);
    hdiId_ = HdiId::HREQ_SIM_UNLOCK_SIM_LOCK;
    resultInfo_ = responseInfo;
    NotifyAll();
    return 0;
}

int32_t RilCallback::SendSimMatchedOperatorInfoResponse(const RilRadioResponseInfo &responseInfo)
{
    HDF_LOGI("GetBoolResult SendSimMatchedOperatorInfo result");
    hdiId_ = HdiId::HREQ_SIM_SEND_NCFG_OPER_INFO;
    resultInfo_ = responseInfo;
    NotifyAll();
    return 0;
}

int32_t RilCallback::NetworkCsRegStatusUpdated(const RilRadioResponseInfo &responseInfo,
                                               const CsRegStatusInfo &csRegStatusInfo)
{
    HDF_LOGI("RilCallback::NetworkCsRegStatusUpdated notifyType:%{public}d, regStatus:%{public}d, "
             "lacCode:%{public}d, cellId:%{public}d, radioTechnology:%{public}d",
             csRegStatusInfo.notifyType, csRegStatusInfo.regStatus, csRegStatusInfo.lacCode, csRegStatusInfo.cellId,
             csRegStatusInfo.radioTechnology);
    return 0;
}

int32_t RilCallback::NetworkPsRegStatusUpdated(const RilRadioResponseInfo &responseInfo,
                                               const PsRegStatusInfo &psRegStatusInfo)
{
    HDF_LOGI(
        "RilCallback::NetworkPsRegStatusUpdated notifyType:%{public}d, regStatus:%{public}d, lacCode:%{public}d, "
        "cellId:%{public}d, tech:%{public}d, nrRestricted:%{public}d, nrAvailable:%{public}d, enDcAvailable:%{public}d",
        psRegStatusInfo.notifyType, psRegStatusInfo.regStatus, psRegStatusInfo.lacCode, psRegStatusInfo.cellId,
        psRegStatusInfo.radioTechnology, psRegStatusInfo.isDcNrRestricted, psRegStatusInfo.isNrAvailable,
        psRegStatusInfo.isEnDcAvailable);
    return 0;
}

int32_t RilCallback::SignalStrengthUpdated(const RilRadioResponseInfo &responseInfo, const Rssi &rssi)
{
    HDF_LOGI("RilCallback::SignalStrengthUpdated rxlev:%{public}d rsrp:%{public}d", rssi.lte.rxlev, rssi.lte.rsrp);
    return 0;
}

int32_t RilCallback::NetworkTimeZoneUpdated(const RilRadioResponseInfo &responseInfo, const std::string &timeZoneStr)
{
    HDF_LOGI("RilCallback::NetworkTimeZoneUpdated timeZone:%{public}s", timeZoneStr.c_str());
    return 0;
}

int32_t RilCallback::NetworkTimeUpdated(const RilRadioResponseInfo &responseInfo, const std::string &timeStr)
{
    HDF_LOGI("RilCallback::NetworkTimeZoneUpdated time:%{public}s", timeStr.c_str());
    return 0;
}

int32_t RilCallback::NetworkPhyChnlCfgUpdated(const RilRadioResponseInfo &responseInfo,
                                              const ChannelConfigInfoList &channelConfigInfoList)
{
    HDF_LOGI("RilCallback::NetworkPhyChnlCfgUpdated itemNum:%{public}d", channelConfigInfoList.itemNum);
    for (PhysicalChannelConfig phyChnlCfg : channelConfigInfoList.channelConfigInfos) {
        HDF_LOGI("RilCallback::NetworkPhyChnlCfgUpdated cellConnStatus:%{public}d, "
                 "cellBandwidthDownlinkKhz:%{public}d, cellBandwidthUplinkKhz:%{public}d, physicalCellId:%{public}d, "
                 "ratType:%{public}d, freqRange:%{public}d, downlinkChannelNum:%{public}d, "
                 "uplinkChannelNum:%{public}d, contextIdNum:%{public}d",
                 phyChnlCfg.cellConnStatus, phyChnlCfg.cellBandwidthDownlinkKhz, phyChnlCfg.cellBandwidthUplinkKhz,
                 phyChnlCfg.ratType, phyChnlCfg.freqRange, phyChnlCfg.downlinkChannelNum, phyChnlCfg.uplinkChannelNum,
                 phyChnlCfg.physicalCellId, phyChnlCfg.contextIdNum);
        for (int32_t j = 0; j < phyChnlCfg.contextIdNum; j++) {
            HDF_LOGI("contextIds[%{public}d]:%{public}d", j, phyChnlCfg.contextIds[j]);
        }
    }
    return 0;
}

int32_t RilCallback::NetworkCurrentCellUpdated(const RilRadioResponseInfo &responseInfo,
                                               const CellListCurrentInfo &cellListCurrentInfo)
{
    HDF_LOGI("RilCallback::NetworkCurrentCellUpdated itemNum:%{public}d", cellListCurrentInfo.itemNum);
    for (auto info : cellListCurrentInfo.cellCurrentInfo) {
        HDF_LOGI("RilCallback::NetworkCurrentCellUpdated ratType:%{public}d, mcc:%{public}d, mnc:%{public}d",
                 info.ratType, info.mcc, info.mnc);
        switch (static_cast<RatType>(info.ratType)) {
        case RatType::NETWORK_TYPE_LTE:
            HDF_LOGI("cellId:%{public}d", info.serviceCells.lte.cellId);
            HDF_LOGI("arfcn:%{public}d", info.serviceCells.lte.arfcn);
            HDF_LOGI("pci:%{public}d", info.serviceCells.lte.pci);
            HDF_LOGI("rsrp:%{public}d", info.serviceCells.lte.rsrp);
            HDF_LOGI("rsrq:%{public}d", info.serviceCells.lte.rsrq);
            HDF_LOGI("rxlev:%{public}d", info.serviceCells.lte.rssi);
            break;
        case RatType::NETWORK_TYPE_GSM:
            HDF_LOGI("band:%{public}d", info.serviceCells.gsm.band);
            HDF_LOGI("arfcn:%{public}d", info.serviceCells.gsm.arfcn);
            HDF_LOGI("bsic:%{public}d", info.serviceCells.gsm.bsic);
            HDF_LOGI("cellId:%{public}d", info.serviceCells.gsm.cellId);
            HDF_LOGI("rxlev:%{public}d", info.serviceCells.gsm.rxlev);
            HDF_LOGI("lac:%{public}d", info.serviceCells.gsm.lac);
            break;
        case RatType::NETWORK_TYPE_WCDMA:
            HDF_LOGI("arfcn:%{public}d", info.serviceCells.wcdma.arfcn);
            HDF_LOGI("psc:%{public}d", info.serviceCells.wcdma.psc);
            HDF_LOGI("rscp:%{public}d", info.serviceCells.wcdma.rscp);
            HDF_LOGI("ecno:%{public}d", info.serviceCells.wcdma.ecno);
            break;
        case RatType::NETWORK_TYPE_NR:
            HDF_LOGI("arfcn:%{public}d", info.serviceCells.nr.nrArfcn);
            HDF_LOGI("psc:%{public}d", info.serviceCells.nr.pci);
            HDF_LOGI("rscp:%{public}d", info.serviceCells.nr.tac);
            HDF_LOGI("ecno:%{public}d", info.serviceCells.nr.nci);
            break;
        default:
            HDF_LOGE("RilCallback::NetworkCurrentCellUpdated invalid ratType");
        }
    }
    return 0;
}

int32_t RilCallback::NetworkCurrentCellUpdated_1_1(const RilRadioResponseInfo &responseInfo,
                                                   const CellListCurrentInfo_1_1 &cellListCurrentInfo)
{
    HDF_LOGI("RilCallback::NetworkCurrentCellUpdated_1_1 itemNum:%{public}d", cellListCurrentInfo.itemNum);
    for (auto info : cellListCurrentInfo.cellCurrentInfo) {
        HDF_LOGI("RilCallback::NetworkCurrentCellUpdated_1_1 ratType:%{public}d, mcc:%{public}d, mnc:%{public}d",
                 info.ratType, info.mcc, info.mnc);
        switch (static_cast<RatType>(info.ratType)) {
        case RatType::NETWORK_TYPE_LTE:
            HDF_LOGI("cellId:%{public}d", info.serviceCells.lte.cellId);
            HDF_LOGI("arfcn:%{public}d", info.serviceCells.lte.arfcn);
            HDF_LOGI("pci:%{public}d", info.serviceCells.lte.pci);
            HDF_LOGI("rsrp:%{public}d", info.serviceCells.lte.rsrp);
            HDF_LOGI("rsrq:%{public}d", info.serviceCells.lte.rsrq);
            HDF_LOGI("rxlev:%{public}d", info.serviceCells.lte.rssi);
            break;
        case RatType::NETWORK_TYPE_GSM:
            HDF_LOGI("band:%{public}d", info.serviceCells.gsm.band);
            HDF_LOGI("arfcn:%{public}d", info.serviceCells.gsm.arfcn);
            HDF_LOGI("bsic:%{public}d", info.serviceCells.gsm.bsic);
            HDF_LOGI("cellId:%{public}d", info.serviceCells.gsm.cellId);
            HDF_LOGI("rxlev:%{public}d", info.serviceCells.gsm.rxlev);
            HDF_LOGI("lac:%{public}d", info.serviceCells.gsm.lac);
            break;
        case RatType::NETWORK_TYPE_WCDMA:
            HDF_LOGI("arfcn:%{public}d", info.serviceCells.wcdma.arfcn);
            HDF_LOGI("psc:%{public}d", info.serviceCells.wcdma.psc);
            HDF_LOGI("rscp:%{public}d", info.serviceCells.wcdma.rscp);
            HDF_LOGI("ecno:%{public}d", info.serviceCells.wcdma.ecno);
            break;
        case RatType::NETWORK_TYPE_NR:
            HDF_LOGI("arfcn:%{public}d", info.serviceCells.nr.nrArfcn);
            HDF_LOGI("psc:%{public}d", info.serviceCells.nr.pci);
            HDF_LOGI("rscp:%{public}d", info.serviceCells.nr.tac);
            HDF_LOGI("ecno:%{public}d", info.serviceCells.nr.nci);
            HDF_LOGI("rsrp:%{public}d", info.serviceCells.nr.rsrp);
            HDF_LOGI("rsrq:%{public}d", info.serviceCells.nr.rsrq);
            break;
        default:
            HDF_LOGE("RilCallback::NetworkCurrentCellUpdated_1_1 invalid ratType");
        }
    }
    return 0;
}

int32_t RilCallback::ResidentNetworkUpdated(const RilRadioResponseInfo &responseInfo, const std::string &plmn)
{
    HDF_LOGI("RilCallback::ResidentNetworkUpdated plmn:%{public}s", plmn.c_str());
    return 0;
}

int32_t RilCallback::GetSignalStrengthResponse(const RilRadioResponseInfo &responseInfo, const Rssi &rssi)
{
    g_getSignalStrengthResponseFlag = true;
    HDF_LOGI("RilCallback::GetSignalStrengthResponse rxlev:%{public}d rsrp:%{public}d", rssi.lte.rxlev, rssi.lte.rsrp);
    hdiId_ = HdiId::HREQ_NETWORK_GET_SIGNAL_STRENGTH;
    resultInfo_ = responseInfo;
    NotifyAll();
    return 0;
}

int32_t RilCallback::GetCsRegStatusResponse(const RilRadioResponseInfo &responseInfo,
                                            const CsRegStatusInfo &csRegStatusInfo)
{
    g_getCsRegStatusResponseFlag = true;
    HDF_LOGI("RilCallback::GetCsRegStatusResponse notifyType:%{public}d, regStatus:%{public}d, "
             "lacCode:%{public}d, cellId:%{public}d, radioTechnology:%{public}d",
             csRegStatusInfo.notifyType, csRegStatusInfo.regStatus, csRegStatusInfo.lacCode, csRegStatusInfo.cellId,
             csRegStatusInfo.radioTechnology);
    hdiId_ = HdiId::HREQ_NETWORK_GET_CS_REG_STATUS;
    resultInfo_ = responseInfo;
    NotifyAll();
    return 0;
}

int32_t RilCallback::GetPsRegStatusResponse(const RilRadioResponseInfo &responseInfo,
                                            const PsRegStatusInfo &psRegStatusInfo)
{
    g_getPsRegStatusResponseFlag = true;
    HDF_LOGI(
        "RilCallback::GetPsRegStatusResponse notifyType:%{public}d, regStatus:%{public}d, lacCode:%{public}d, "
        "cellId:%{public}d, tech:%{public}d, nrRestricted:%{public}d, nrAvailable:%{public}d, enDcAvailable:%{public}d",
        psRegStatusInfo.notifyType, psRegStatusInfo.regStatus, psRegStatusInfo.lacCode, psRegStatusInfo.cellId,
        psRegStatusInfo.radioTechnology, psRegStatusInfo.isDcNrRestricted, psRegStatusInfo.isNrAvailable,
        psRegStatusInfo.isEnDcAvailable);
    hdiId_ = HdiId::HREQ_NETWORK_GET_PS_REG_STATUS;
    resultInfo_ = responseInfo;
    NotifyAll();
    return 0;
}

int32_t RilCallback::GetOperatorInfoResponse(const RilRadioResponseInfo &responseInfo, const OperatorInfo &operatorInfo)
{
    g_getOperatorInfoResponseFlag = true;
    HDF_LOGI("RilCallback::GetOperatorInfoResponse longName:%{public}s, shortName:%{public}s, numeric:%{public}s",
             operatorInfo.longName.c_str(), operatorInfo.shortName.c_str(), operatorInfo.numeric.c_str());
    hdiId_ = HdiId::HREQ_NETWORK_GET_OPERATOR_INFO;
    resultInfo_ = responseInfo;
    NotifyAll();
    return 0;
}

int32_t RilCallback::GetNetworkSearchInformationResponse(const RilRadioResponseInfo &responseInfo,
                                                         const AvailableNetworkList &availableNetworkList)
{
    g_getNetworkSearchInformationResponseFlag = true;
    HDF_LOGI("RilCallback::GetNetworkSearchInformationResponse itemNum:%{public}d", availableNetworkList.itemNum);
    for (auto availableInfo : availableNetworkList.availableNetworkInfo) {
        HDF_LOGI("status:%{public}d", availableInfo.status);
        HDF_LOGI("numeric:%{public}s", availableInfo.numeric.c_str());
        HDF_LOGI("shortName:%{public}s", availableInfo.shortName.c_str());
        HDF_LOGI("longName:%{public}s", availableInfo.longName.c_str());
        HDF_LOGI("rat:%{public}d", availableInfo.rat);
    }
    hdiId_ = HdiId::HREQ_NETWORK_GET_NETWORK_SEARCH_INFORMATION;
    resultInfo_ = responseInfo;
    NotifyAll();
    return 0;
}

int32_t RilCallback::GetNetworkSelectionModeResponse(const RilRadioResponseInfo &responseInfo,
                                                     const SetNetworkModeInfo &setNetworkModeInfo)
{
    g_getNetworkSelectionModeResponseFlag = true;
    HDF_LOGI("RilCallback::GetNetworkSelectionModeResponse selectMode:%{public}d", setNetworkModeInfo.selectMode);
    hdiId_ = HdiId::HREQ_NETWORK_GET_NETWORK_SELECTION_MODE;
    resultInfo_ = responseInfo;
    NotifyAll();
    return 0;
}

int32_t RilCallback::SetNetworkSelectionModeResponse(const RilRadioResponseInfo &responseInfo)
{
    g_setNetworkSelectionModeResponseFlag = true;
    HDF_LOGI("RilCallback::SetNetworkSelectionModeResponse error:%{public}d", responseInfo.error);
    hdiId_ = HdiId::HREQ_NETWORK_SET_NETWORK_SELECTION_MODE;
    resultInfo_ = responseInfo;
    NotifyAll();
    return 0;
}

int32_t RilCallback::GetNeighboringCellInfoListResponse(const RilRadioResponseInfo &responseInfo,
                                                        const CellListNearbyInfo &cellInfoList)
{
    g_getNeighboringCellInfoListResponseFlag = true;
    HDF_LOGI("RilCallback::GetNeighboringCellInfoListResponse itemNum:%{public}d", cellInfoList.itemNum);
    for (auto info : cellInfoList.cellNearbyInfo) {
        HDF_LOGI("RilCallback::GetNeighboringCellInfoListResponse ratType:%{public}d", info.ratType);
        switch (static_cast<RatType>(info.ratType)) {
        case RatType::NETWORK_TYPE_LTE:
            HDF_LOGI("arfcn:%{public}d", info.serviceCells.lte.arfcn);
            HDF_LOGI("pci:%{public}d", info.serviceCells.lte.pci);
            HDF_LOGI("rsrp:%{public}d", info.serviceCells.lte.rsrp);
            HDF_LOGI("rsrq:%{public}d", info.serviceCells.lte.rsrq);
            HDF_LOGI("rxlev:%{public}d", info.serviceCells.lte.rxlev);
            break;
        case RatType::NETWORK_TYPE_GSM:
            HDF_LOGI("band:%{public}d", info.serviceCells.gsm.band);
            HDF_LOGI("arfcn:%{public}d", info.serviceCells.gsm.arfcn);
            HDF_LOGI("bsic:%{public}d", info.serviceCells.gsm.bsic);
            HDF_LOGI("cellId:%{public}d", info.serviceCells.gsm.cellId);
            HDF_LOGI("rxlev:%{public}d", info.serviceCells.gsm.rxlev);
            HDF_LOGI("lac:%{public}d", info.serviceCells.gsm.lac);
            break;
        case RatType::NETWORK_TYPE_WCDMA:
            HDF_LOGI("arfcn:%{public}d", info.serviceCells.wcdma.arfcn);
            HDF_LOGI("psc:%{public}d", info.serviceCells.wcdma.psc);
            HDF_LOGI("rscp:%{public}d", info.serviceCells.wcdma.rscp);
            HDF_LOGI("ecno:%{public}d", info.serviceCells.wcdma.ecno);
            break;
        case RatType::NETWORK_TYPE_NR:
            HDF_LOGI("arfcn:%{public}d", info.serviceCells.nr.nrArfcn);
            HDF_LOGI("psc:%{public}d", info.serviceCells.nr.pci);
            HDF_LOGI("rscp:%{public}d", info.serviceCells.nr.tac);
            HDF_LOGI("ecno:%{public}d", info.serviceCells.nr.nci);
            break;
        default:
            HDF_LOGE("RilCallback::GetNeighboringCellInfoListResponse invalid ratType");
        }
    }
    hdiId_ = HdiId::HREQ_NETWORK_GET_NEIGHBORING_CELLINFO_LIST;
    resultInfo_ = responseInfo;
    NotifyAll();
    return 0;
}

int32_t RilCallback::GetCurrentCellInfoResponse(const RilRadioResponseInfo &responseInfo,
                                                const CellListCurrentInfo &cellInfoList)
{
    g_getCurrentCellInfoResponseFlag = true;
    HDF_LOGI("RilCallback::GetCurrentCellInfoResponse itemNum:%{public}d", cellInfoList.itemNum);
    for (auto info : cellInfoList.cellCurrentInfo) {
        HDF_LOGI("RilCallback::GetCurrentCellInfoResponse ratType:%{public}d, mcc:%{public}d, mnc:%{public}d",
                 info.ratType, info.mcc, info.mnc);
        switch (static_cast<RatType>(info.ratType)) {
        case RatType::NETWORK_TYPE_LTE:
            HDF_LOGI("cellId:%{public}d", info.serviceCells.lte.cellId);
            HDF_LOGI("arfcn:%{public}d", info.serviceCells.lte.arfcn);
            HDF_LOGI("pci:%{public}d", info.serviceCells.lte.pci);
            HDF_LOGI("rsrp:%{public}d", info.serviceCells.lte.rsrp);
            HDF_LOGI("rsrq:%{public}d", info.serviceCells.lte.rsrq);
            HDF_LOGI("rxlev:%{public}d", info.serviceCells.lte.rssi);
            break;
        case RatType::NETWORK_TYPE_GSM:
            HDF_LOGI("band:%{public}d", info.serviceCells.gsm.band);
            HDF_LOGI("arfcn:%{public}d", info.serviceCells.gsm.arfcn);
            HDF_LOGI("bsic:%{public}d", info.serviceCells.gsm.bsic);
            HDF_LOGI("cellId:%{public}d", info.serviceCells.gsm.cellId);
            HDF_LOGI("rxlev:%{public}d", info.serviceCells.gsm.rxlev);
            HDF_LOGI("lac:%{public}d", info.serviceCells.gsm.lac);
            break;
        case RatType::NETWORK_TYPE_WCDMA:
            HDF_LOGI("arfcn:%{public}d", info.serviceCells.wcdma.arfcn);
            HDF_LOGI("psc:%{public}d", info.serviceCells.wcdma.psc);
            HDF_LOGI("rscp:%{public}d", info.serviceCells.wcdma.rscp);
            HDF_LOGI("ecno:%{public}d", info.serviceCells.wcdma.ecno);
            break;
        case RatType::NETWORK_TYPE_NR:
            HDF_LOGI("arfcn:%{public}d", info.serviceCells.nr.nrArfcn);
            HDF_LOGI("psc:%{public}d", info.serviceCells.nr.pci);
            HDF_LOGI("rscp:%{public}d", info.serviceCells.nr.tac);
            HDF_LOGI("ecno:%{public}d", info.serviceCells.nr.nci);
            break;
        default:
            HDF_LOGE("RilCallback::GetCurrentCellInfoResponse invalid ratType");
        }
    }
    hdiId_ = HdiId::HREQ_NETWORK_GET_CURRENT_CELL_INFO;
    resultInfo_ = responseInfo;
    NotifyAll();
    return 0;
}

int32_t RilCallback::GetCurrentCellInfoResponse_1_1(const RilRadioResponseInfo &responseInfo,
                                                    const CellListCurrentInfo_1_1 &cellListCurrentInfo)
{
    g_getCurrentCellInfoResponse_1_1Flag = true;
    HDF_LOGI("RilCallback::GetCurrentCellInfoResponse_1_1 itemNum:%{public}d", cellListCurrentInfo.itemNum);
    for (auto info : cellListCurrentInfo.cellCurrentInfo) {
        HDF_LOGI("RilCallback::GetCurrentCellInfoResponse_1_1 ratType:%{public}d, mcc:%{public}d, mnc:%{public}d",
                 info.ratType, info.mcc, info.mnc);
        switch (static_cast<RatType>(info.ratType)) {
        case RatType::NETWORK_TYPE_LTE:
            HDF_LOGI("cellId:%{public}d", info.serviceCells.lte.cellId);
            HDF_LOGI("arfcn:%{public}d", info.serviceCells.lte.arfcn);
            HDF_LOGI("pci:%{public}d", info.serviceCells.lte.pci);
            HDF_LOGI("rsrp:%{public}d", info.serviceCells.lte.rsrp);
            HDF_LOGI("rsrq:%{public}d", info.serviceCells.lte.rsrq);
            HDF_LOGI("rxlev:%{public}d", info.serviceCells.lte.rssi);
            break;
        case RatType::NETWORK_TYPE_GSM:
            HDF_LOGI("band:%{public}d", info.serviceCells.gsm.band);
            HDF_LOGI("arfcn:%{public}d", info.serviceCells.gsm.arfcn);
            HDF_LOGI("bsic:%{public}d", info.serviceCells.gsm.bsic);
            HDF_LOGI("cellId:%{public}d", info.serviceCells.gsm.cellId);
            HDF_LOGI("rxlev:%{public}d", info.serviceCells.gsm.rxlev);
            HDF_LOGI("lac:%{public}d", info.serviceCells.gsm.lac);
            break;
        case RatType::NETWORK_TYPE_WCDMA:
            HDF_LOGI("arfcn:%{public}d", info.serviceCells.wcdma.arfcn);
            HDF_LOGI("psc:%{public}d", info.serviceCells.wcdma.psc);
            HDF_LOGI("rscp:%{public}d", info.serviceCells.wcdma.rscp);
            HDF_LOGI("ecno:%{public}d", info.serviceCells.wcdma.ecno);
            break;
        case RatType::NETWORK_TYPE_NR:
            HDF_LOGI("arfcn:%{public}d", info.serviceCells.nr.nrArfcn);
            HDF_LOGI("psc:%{public}d", info.serviceCells.nr.pci);
            HDF_LOGI("rscp:%{public}d", info.serviceCells.nr.tac);
            HDF_LOGI("ecno:%{public}d", info.serviceCells.nr.nci);
            HDF_LOGI("rsrp:%{public}d", info.serviceCells.nr.rsrp);
            HDF_LOGI("rsrq:%{public}d", info.serviceCells.nr.rsrq);
            break;
        default:
            HDF_LOGE("RilCallback::GetCurrentCellInfoResponse_1_1 invalid ratType");
        }
    }
    hdiId_ = HdiId::HREQ_NETWORK_GET_CURRENT_CELL_INFO;
    resultInfo_ = responseInfo;
    NotifyAll();
    return 0;
}

int32_t RilCallback::SetPreferredNetworkResponse(const RilRadioResponseInfo &responseInfo)
{
    HDF_LOGI("RilCallback::SetPreferredNetworkResponse error:%{public}d", responseInfo.error);
    hdiId_ = HdiId::HREQ_NETWORK_SET_PREFERRED_NETWORK;
    resultInfo_ = responseInfo;
    g_setPreferredNetworkResponseFlag = true;
    NotifyAll();
    return 0;
}

int32_t RilCallback::GetPreferredNetworkResponse(const RilRadioResponseInfo &responseInfo,
                                                 const PreferredNetworkTypeInfo &preferredNetworkTypeInfo)
{
    HDF_LOGI("RilCallback::GetPreferredNetworkResponse type:%{public}d", preferredNetworkTypeInfo.preferredNetworkType);
    hdiId_ = HdiId::HREQ_NETWORK_GET_PREFERRED_NETWORK;
    resultInfo_ = responseInfo;
    g_getPreferredNetworkResponseFlag = true;
    NotifyAll();
    return 0;
}

int32_t RilCallback::GetPhysicalChannelConfigResponse(const RilRadioResponseInfo &responseInfo,
                                                      const ChannelConfigInfoList &channelConfigInfoList)
{
    HDF_LOGI("RilCallback::GetPhysicalChannelConfigResponse itemNum:%{public}d", channelConfigInfoList.itemNum);
    for (PhysicalChannelConfig phyChnlCfg : channelConfigInfoList.channelConfigInfos) {
        HDF_LOGI("RilCallback::GetPhysicalChannelConfigResponse cellConnStatus:%{public}d, "
                 "cellBandwidthDownlinkKhz:%{public}d, cellBandwidthUplinkKhz:%{public}d, physicalCellId:%{public}d, "
                 "ratType:%{public}d, freqRange:%{public}d, downlinkChannelNum:%{public}d, "
                 "uplinkChannelNum:%{public}d, contextIdNum:%{public}d",
                 phyChnlCfg.cellConnStatus, phyChnlCfg.cellBandwidthDownlinkKhz, phyChnlCfg.cellBandwidthUplinkKhz,
                 phyChnlCfg.ratType, phyChnlCfg.freqRange, phyChnlCfg.downlinkChannelNum, phyChnlCfg.uplinkChannelNum,
                 phyChnlCfg.physicalCellId, phyChnlCfg.contextIdNum);
        for (int32_t j = 0; j < phyChnlCfg.contextIdNum; j++) {
            HDF_LOGI("contextIds[%{public}d]:%{public}d", j, phyChnlCfg.contextIds[j]);
        }
    }
    hdiId_ = HdiId::HREQ_NETWORK_GET_PHYSICAL_CHANNEL_CONFIG;
    resultInfo_ = responseInfo;
    g_getPhysicalChannelConfigResponseFlag = true;
    NotifyAll();
    return 0;
}

int32_t RilCallback::SetLocateUpdatesResponse(const RilRadioResponseInfo &responseInfo)
{
    g_setLocateUpdatesResponseFlag = true;
    HDF_LOGI("RilCallback::SetLocateUpdatesResponse error:%{public}d", responseInfo.error);
    hdiId_ = HdiId::HREQ_NETWORK_SET_LOCATE_UPDATES;
    resultInfo_ = responseInfo;
    NotifyAll();
    return 0;
}

int32_t RilCallback::SetNotificationFilterResponse(const RilRadioResponseInfo &responseInfo)
{
    g_setNotificationFilterResponseFlag = true;
    HDF_LOGI("RilCallback::SetNotificationFilterResponse error:%{public}d", responseInfo.error);
    hdiId_ = HdiId::HREQ_NETWORK_SET_NOTIFICATION_FILTER;
    resultInfo_ = responseInfo;
    NotifyAll();
    return 0;
}

int32_t RilCallback::SetDeviceStateResponse(const RilRadioResponseInfo &responseInfo)
{
    g_setDeviceStateResponseFlag = true;
    HDF_LOGI("RilCallback::SetDeviceStateResponse error:%{public}d", responseInfo.error);
    hdiId_ = HdiId::HREQ_NETWORK_SET_DEVICE_STATE;
    resultInfo_ = responseInfo;
    NotifyAll();
    return 0;
}

int32_t RilCallback::GetRrcConnectionStateResponse(const RilRadioResponseInfo &responseInfo, int32_t state)
{
    HDF_LOGI("RilCallback::GetRrcConnectionStateResponse state:%{public}d", state);
    hdiId_ = HdiId::HREQ_NETWORK_GET_RRC_CONNECTION_STATE;
    resultInfo_ = responseInfo;
    NotifyAll();
    return 0;
}

int32_t RilCallback::SetNrOptionModeResponse(const RilRadioResponseInfo &responseInfo)
{
    HDF_LOGI("RilCallback::SetDeviceStateResponse error:%{public}d", responseInfo.error);
    g_setNrOptionModeResponseFlag = true;
    hdiId_ = HdiId::HREQ_NETWORK_SET_NR_OPTION_MODE;
    resultInfo_ = responseInfo;
    NotifyAll();
    return 0;
}

int32_t RilCallback::GetNrOptionModeResponse(const RilRadioResponseInfo &responseInfo, int32_t state)
{
    HDF_LOGI("RilCallback::GetNrOptionModeResponse state:%{public}d", state);
    g_getNrOptionModeResponseFlag = true;
    hdiId_ = HdiId::HREQ_NETWORK_GET_NR_OPTION_MODE;
    resultInfo_ = responseInfo;
    NotifyAll();
    return 0;
}

int32_t RilCallback::GetRrcConnectionStateUpdated(const RilRadioResponseInfo &responseInfo, int32_t state)
{
    HDF_LOGI("RilCallback::GetRrcConnectionStateUpdated state:%{public}d", state);
    return 0;
}

int32_t RilCallback::CallEmergencyNotice(const RilRadioResponseInfo &responseInfo,
                                         const EmergencyInfoList &emergencyInfoList)
{
    HDF_LOGI("GetBoolResult CallEmergencyNotice callSize : %{public}d", emergencyInfoList.callSize);
    return 0;
}

int32_t RilCallback::CallStateUpdated(const RilRadioResponseInfo &responseInfo)
{
    HDF_LOGI("GetBoolResult CallStateUpdated slotId : %{public}d, type: %{public}d", responseInfo.slotId,
             responseInfo.type);
    return 0;
}

int32_t RilCallback::CallRingbackVoiceNotice(const RilRadioResponseInfo &responseInfo,
                                             const RingbackVoice &ringbackVoice)
{
    HDF_LOGI("GetBoolResult CallRingbackVoiceNotice slotId : %{public}d, ringbackVoice: %{public}d",
             responseInfo.slotId, ringbackVoice.status);
    return 0;
}

int32_t RilCallback::CallSrvccStatusNotice(const RilRadioResponseInfo &responseInfo, const SrvccStatus &srvccStatus)
{
    HDF_LOGI("GetBoolResult CallSrvccStatusNotice slotId : %{public}d, srvccStatus: %{public}d", responseInfo.slotId,
             srvccStatus.status);
    return 0;
}

int32_t RilCallback::CallUssdNotice(const RilRadioResponseInfo &responseInfo, const UssdNoticeInfo &ussdNoticeInfo)
{
    HDF_LOGI("GetBoolResult CallUssdNotice slotId : %{public}d, ussdNoticeInfo m: %{public}d, str: %{public}s",
             responseInfo.slotId, ussdNoticeInfo.type, ussdNoticeInfo.message.c_str());
    return 0;
}

int32_t RilCallback::CallSsNotice(const RilRadioResponseInfo &responseInfo, const SsNoticeInfo &ssNoticeInfo)
{
    HDF_LOGI("GetBoolResult CallSsNotice slotId : %{public}d, result: %{public}d, serviceType: %{public}d,"
             "requestType: %{public}d, serviceClass: %{public}d",
             responseInfo.slotId, ssNoticeInfo.result, ssNoticeInfo.serviceType, ssNoticeInfo.requestType,
             ssNoticeInfo.serviceClass);
    return 0;
}

int32_t RilCallback::CallRsrvccStatusNotify(const RilRadioResponseInfo &responseInfo)
{
    HDF_LOGI("GetBoolResult CallRsrvccStatusNotify slotId : %{public}d", responseInfo.slotId);
    return 0;
}

int32_t RilCallback::GetEmergencyCallListResponse(const RilRadioResponseInfo &responseInfo,
                                                  const EmergencyInfoList &emergencyInfoList)
{
    HDF_LOGI("GetBoolResult emergencyInfoList callSize : %{public}d", emergencyInfoList.callSize);
    hdiId_ = HdiId::HREQ_CALL_GET_EMERGENCY_LIST;
    resultInfo_ = responseInfo;
    NotifyAll();
    return 0;
}

int32_t RilCallback::SetEmergencyCallListResponse(const RilRadioResponseInfo &responseInfo)
{
    HDF_LOGI("GetBoolResult SetEmergencyCallListResponse");
    hdiId_ = HdiId::HREQ_CALL_SET_EMERGENCY_LIST;
    resultInfo_ = responseInfo;
    NotifyAll();
    return 0;
}

int32_t RilCallback::GetCallListResponse(const RilRadioResponseInfo &responseInfo, const CallInfoList &callList)
{
    HDF_LOGI("GetBoolResult CallInfoList callSize : %{public}d", callList.callSize);
    hdiId_ = HdiId::HREQ_CALL_GET_CALL_LIST;
    resultInfo_ = responseInfo;
    NotifyAll();
    return 0;
}

int32_t RilCallback::DialResponse(const RilRadioResponseInfo &responseInfo)
{
    g_dialResponseFlag = true;
    HDF_LOGI("GetBoolResult DialResponse");
    hdiId_ = HdiId::HREQ_CALL_DIAL;
    resultInfo_ = responseInfo;
    NotifyAll();
    return 0;
}

int32_t RilCallback::HangupResponse(const RilRadioResponseInfo &responseInfo)
{
    g_hangupResponseFlag = true;
    HDF_LOGI("GetBoolResult HangupResponse");
    hdiId_ = HdiId::HREQ_CALL_HANGUP;
    resultInfo_ = responseInfo;
    NotifyAll();
    return 0;
}

int32_t RilCallback::RejectResponse(const RilRadioResponseInfo &responseInfo)
{
    g_rejectResponseFlag = true;
    HDF_LOGI("GetBoolResult RejectResponse");
    hdiId_ = HdiId::HREQ_CALL_REJECT;
    resultInfo_ = responseInfo;
    NotifyAll();
    return 0;
}

int32_t RilCallback::AnswerResponse(const RilRadioResponseInfo &responseInfo)
{
    g_answerResponseFlag = true;
    HDF_LOGI("GetBoolResult AnswerResponse");
    hdiId_ = HdiId::HREQ_CALL_ANSWER;
    resultInfo_ = responseInfo;
    NotifyAll();
    return 0;
}

int32_t RilCallback::HoldCallResponse(const RilRadioResponseInfo &responseInfo)
{
    g_holdCallResponseFlag = true;
    HDF_LOGI("GetBoolResult HoldCallResponse");
    hdiId_ = HdiId::HREQ_CALL_HOLD_CALL;
    resultInfo_ = responseInfo;
    NotifyAll();
    return 0;
}

int32_t RilCallback::UnHoldCallResponse(const RilRadioResponseInfo &responseInfo)
{
    g_unHoldCallResponseFlag = true;
    HDF_LOGI("GetBoolResult UnHoldCallResponse");
    hdiId_ = HdiId::HREQ_CALL_UNHOLD_CALL;
    resultInfo_ = responseInfo;
    NotifyAll();
    return 0;
}

int32_t RilCallback::SwitchCallResponse(const RilRadioResponseInfo &responseInfo)
{
    g_switchCallResponseFlag = true;
    HDF_LOGI("GetBoolResult SwitchCallResponse");
    hdiId_ = HdiId::HREQ_CALL_SWITCH_CALL;
    resultInfo_ = responseInfo;
    NotifyAll();
    return 0;
}

int32_t RilCallback::GetClipResponse(const RilRadioResponseInfo &responseInfo, const GetClipResult &getClipResult)
{
    g_getClipResponseFlag = true;
    HDF_LOGI("GetBoolResult result: %{public}d, action: %{public}d, clipStat: %{public}d", getClipResult.result,
             getClipResult.action, getClipResult.clipStat);
    hdiId_ = HdiId::HREQ_CALL_GET_CLIP;
    resultInfo_ = responseInfo;
    NotifyAll();
    return 0;
}

int32_t RilCallback::SetClipResponse(const RilRadioResponseInfo &responseInfo)
{
    g_setClipResponseFlag = true;
    HDF_LOGI("GetBoolResult SetClipResponse");
    hdiId_ = HdiId::HREQ_CALL_SET_CLIP;
    resultInfo_ = responseInfo;
    NotifyAll();
    return 0;
}

int32_t RilCallback::CombineConferenceResponse(const RilRadioResponseInfo &responseInfo)
{
    HDF_LOGI("GetBoolResult CombineConferenceResponse");
    hdiId_ = HdiId::HREQ_CALL_COMBINE_CONFERENCE;
    resultInfo_ = responseInfo;
    NotifyAll();
    return 0;
}

int32_t RilCallback::SeparateConferenceResponse(const RilRadioResponseInfo &responseInfo)
{
    HDF_LOGI("GetBoolResult SeparateConferenceResponse");
    hdiId_ = HdiId::HREQ_CALL_SEPARATE_CONFERENCE;
    resultInfo_ = responseInfo;
    g_separateConferenceResponseFlag = true;
    NotifyAll();
    return 0;
}

int32_t RilCallback::CallSupplementResponse(const RilRadioResponseInfo &responseInfo)
{
    HDF_LOGI("GetBoolResult CallSupplementResponse");
    hdiId_ = HdiId::HREQ_CALL_CALL_SUPPLEMENT;
    resultInfo_ = responseInfo;
    g_callSupplementResponseFlag = true;
    NotifyAll();
    return 0;
}

int32_t RilCallback::GetCallWaitingResponse(const RilRadioResponseInfo &responseInfo,
                                            const CallWaitResult &callWaitResult)
{
    HDF_LOGI("GetBoolResult GetCallWaitingResponse result: %{public}d, status: %{public}d, classCw: %{public}d",
             callWaitResult.result, callWaitResult.status, callWaitResult.classCw);
    hdiId_ = HdiId::HREQ_CALL_GET_CALL_WAITING;
    resultInfo_ = responseInfo;
    g_getCallWaitingResponseFlag = true;
    NotifyAll();
    return 0;
}

int32_t RilCallback::SetCallWaitingResponse(const RilRadioResponseInfo &responseInfo)
{
    HDF_LOGI("GetBoolResult SetCallWaitingResponse");
    hdiId_ = HdiId::HREQ_CALL_SET_CALL_WAITING;
    resultInfo_ = responseInfo;
    g_setCallWaitingResponseFlag = true;
    NotifyAll();
    return 0;
}

int32_t RilCallback::GetCallTransferInfoResponse(const RilRadioResponseInfo &responseInfo,
                                                 const CallForwardQueryInfoList &cFQueryList)
{
    HDF_LOGI("GetBoolResult GetCallTransferInfoResponse cFQueryList: %{public}d", cFQueryList.callSize);
    hdiId_ = HdiId::HREQ_CALL_GET_CALL_TRANSFER_INFO;
    resultInfo_ = responseInfo;
    NotifyAll();
    return 0;
}

int32_t RilCallback::SetCallTransferInfoResponse(const RilRadioResponseInfo &responseInfo)
{
    g_setCallTransferInfoResponseFlag = true;
    HDF_LOGI("GetBoolResult SetCallTransferInfoResponse");
    hdiId_ = HdiId::HREQ_CALL_SET_CALL_TRANSFER_INFO;
    resultInfo_ = responseInfo;
    NotifyAll();
    return 0;
}

int32_t RilCallback::GetCallRestrictionResponse(const RilRadioResponseInfo &responseInfo,
                                                const CallRestrictionResult &result)
{
    g_getCallRestrictionResponseFlag = true;
    HDF_LOGI("GetBoolResult result: %{public}d, status: %{public}d, classCw: %{public}d", result.result, result.status,
             result.classCw);
    hdiId_ = HdiId::HREQ_CALL_GET_CALL_RESTRICTION;
    resultInfo_ = responseInfo;
    NotifyAll();
    return 0;
}
int32_t RilCallback::SetCallRestrictionResponse(const RilRadioResponseInfo &responseInfo)
{
    g_setCallRestrictionResponseFlag = true;
    HDF_LOGI("GetBoolResult SetCallRestrictionResponse");
    hdiId_ = HdiId::HREQ_CALL_SET_CALL_RESTRICTION;
    resultInfo_ = responseInfo;
    NotifyAll();
    return 0;
}
int32_t RilCallback::GetClirResponse(const RilRadioResponseInfo &responseInfo, const GetClirResult &getClirResult)
{
    g_getClirResponseFlag = true;
    HDF_LOGI("GetBoolResult result: %{public}d, action: %{public}d, clirStat: %{public}d", getClirResult.result,
             getClirResult.action, getClirResult.clirStat);
    hdiId_ = HdiId::HREQ_CALL_GET_CLIR;
    resultInfo_ = responseInfo;
    NotifyAll();
    return 0;
}

int32_t RilCallback::SetClirResponse(const RilRadioResponseInfo &responseInfo)
{
    g_setClirResponseFlag = true;
    HDF_LOGI("GetBoolResult SetClirResponse");
    hdiId_ = HdiId::HREQ_CALL_SET_CLIR;
    resultInfo_ = responseInfo;
    NotifyAll();
    return 0;
}

int32_t RilCallback::StartDtmfResponse(const RilRadioResponseInfo &responseInfo)
{
    g_startDtmfResponseFlag = true;
    HDF_LOGI("GetBoolResult StartDtmfResponse");
    hdiId_ = HdiId::HREQ_CALL_START_DTMF;
    resultInfo_ = responseInfo;
    NotifyAll();
    return 0;
}

int32_t RilCallback::SendDtmfResponse(const RilRadioResponseInfo &responseInfo)
{
    g_sendDtmfResponseFlag = true;
    HDF_LOGI("GetBoolResult SendDtmfResponse");
    hdiId_ = HdiId::HREQ_CALL_SEND_DTMF;
    resultInfo_ = responseInfo;
    NotifyAll();
    return 0;
}

int32_t RilCallback::StopDtmfResponse(const RilRadioResponseInfo &responseInfo)
{
    g_stopDtmfResponseFlag = true;
    HDF_LOGI("GetBoolResult StopDtmfResponse");
    hdiId_ = HdiId::HREQ_CALL_STOP_DTMF;
    resultInfo_ = responseInfo;
    NotifyAll();
    return 0;
}

int32_t RilCallback::GetCallPreferenceModeResponse(const RilRadioResponseInfo &responseInfo, int32_t mode)
{
    g_getCallPreferenceModeResponseFlag = true;
    HDF_LOGI("GetBoolResult GetCallPreferenceModeResponse mode: %{public}d", mode);
    hdiId_ = HdiId::HREQ_CALL_GET_CALL_PREFERENCE;
    resultInfo_ = responseInfo;
    NotifyAll();
    return 0;
}

int32_t RilCallback::SetCallPreferenceModeResponse(const RilRadioResponseInfo &responseInfo)
{
    g_setCallPreferenceModeResponseFlag = true;
    HDF_LOGI("GetBoolResult SetCallPreferenceModeResponse");
    hdiId_ = HdiId::HREQ_CALL_SET_CALL_PREFERENCE;
    resultInfo_ = responseInfo;
    NotifyAll();
    return 0;
}

int32_t RilCallback::SetUssdResponse(const RilRadioResponseInfo &responseInfo)
{
    g_setUssdResponseFlag = true;
    HDF_LOGI("GetBoolResult SetUssdResponse");
    hdiId_ = HdiId::HREQ_CALL_SET_USSD;
    resultInfo_ = responseInfo;
    NotifyAll();
    return 0;
}

int32_t RilCallback::GetUssdResponse(const RilRadioResponseInfo &responseInfo, int32_t cusd)
{
    HDF_LOGI("GetBoolResult GetUssdResponse cusd: %{public}d", cusd);
    hdiId_ = HdiId::HREQ_CALL_GET_USSD;
    resultInfo_ = responseInfo;
    g_getUssdResponseFlag = true;
    NotifyAll();
    return 0;
}

int32_t RilCallback::SetMuteResponse(const RilRadioResponseInfo &responseInfo)
{
    HDF_LOGI("GetBoolResult SetMuteResponse");
    hdiId_ = HdiId::HREQ_CALL_SET_MUTE;
    resultInfo_ = responseInfo;
    g_setMuteResponseFlag = true;
    NotifyAll();
    return 0;
}

int32_t RilCallback::GetMuteResponse(const RilRadioResponseInfo &responseInfo, int32_t mute)
{
    HDF_LOGI("GetBoolResult GetMuteResponse mute: %{public}d", mute);
    hdiId_ = HdiId::HREQ_CALL_GET_MUTE;
    resultInfo_ = responseInfo;
    g_getMuteResponseFlag = true;
    NotifyAll();
    return 0;
}

int32_t RilCallback::GetCallFailReasonResponse(const RilRadioResponseInfo &responseInfo, int32_t callFail)
{
    g_getCallFailReasonResponseFlag = true;
    HDF_LOGI("GetBoolResult GetCallFailReasonResponse callFail: %{public}d", callFail);
    hdiId_ = HdiId::HREQ_CALL_GET_FAIL_REASON;
    resultInfo_ = responseInfo;
    NotifyAll();
    return 0;
}

int32_t RilCallback::SetBarringPasswordResponse(const RilRadioResponseInfo &responseInfo)
{
    g_setBarringPasswordResponseFlag = true;
    HDF_LOGI("GetBoolResult SetBarringPasswordResponse");
    hdiId_ = HdiId::HREQ_CALL_SET_BARRING_PASSWORD;
    resultInfo_ = responseInfo;
    NotifyAll();
    return 0;
}

int32_t RilCallback::CloseUnFinishedUssdResponse(const RilRadioResponseInfo &responseInfo)
{
    g_closeUnFinishedUssdResponseFlag = true;
    HDF_LOGI("GetBoolResult CloseUnFinishedUssdResponse");
    hdiId_ = HdiId::HREQ_CALL_CLOSE_UNFINISHED_USSD;
    resultInfo_ = responseInfo;
    NotifyAll();
    return 0;
}

int32_t RilCallback::SetVonrSwitchResponse(const RilRadioResponseInfo &responseInfo)
{
    g_setVonrSwitchResponseFlag = true;
    HDF_LOGI("GetBoolResult SetVonrSwitchResponse");
    hdiId_ = HdiId::HREQ_SET_VONR_SWITCH;
    resultInfo_ = responseInfo;
    NotifyAll();
    return 0;
}

/**
 * modem
 **/
int32_t RilCallback::RadioStateUpdated(const RilRadioResponseInfo &responseInfo, int32_t state)
{
    HDF_LOGI("RadioStateUpdated state : %{public}d", state);
    return 0;
}

int32_t RilCallback::VoiceRadioTechUpdated(const RilRadioResponseInfo &responseInfo,
                                           const VoiceRadioTechnology &voiceRadioTechnology)
{
    HDF_LOGI("GetVoiceRadioTechnologyResponse srvStatus : %{public}d srvDomain : %{public}d roamStatus: %{public}d "
             "simStatus : %{public}d lockStatus : %{public}d sysMode : %{public}d actType : %{public}d sysModeName : "
             "%{public}s actName : %{public}s",
             voiceRadioTechnology.srvStatus, voiceRadioTechnology.srvDomain, voiceRadioTechnology.roamStatus,
             voiceRadioTechnology.simStatus, voiceRadioTechnology.lockStatus, voiceRadioTechnology.sysMode,
             voiceRadioTechnology.actType, voiceRadioTechnology.sysModeName.c_str(),
             voiceRadioTechnology.actName.c_str());
    return 0;
}

int32_t RilCallback::DsdsModeUpdated(const RilRadioResponseInfo &responseInfo, int32_t mode)
{
    HDF_LOGI("DsdsModeUpdated mode : %{public}d", mode);
    return 0;
}

int32_t RilCallback::ShutDownResponse(const RilRadioResponseInfo &responseInfo)
{
    HDF_LOGI("ShutDownResponse");
    hdiId_ = HdiId::HREQ_MODEM_SHUT_DOWN;
    resultInfo_ = responseInfo;
    g_shutDownResponseFlag = true;
    NotifyAll();
    return 0;
}

int32_t RilCallback::SetRadioStateResponse(const RilRadioResponseInfo &responseInfo)
{
    HDF_LOGI("SetRadioStateResponse");
    hdiId_ = HdiId::HREQ_MODEM_SET_RADIO_STATUS;
    resultInfo_ = responseInfo;
    g_setRadioStateResponseFlag = true;
    NotifyAll();
    return 0;
}

int32_t RilCallback::GetRadioStateResponse(const RilRadioResponseInfo &responseInfo, int32_t state)
{
    HDF_LOGI("GetRadioStateResponse state : %{public}d", state);
    hdiId_ = HdiId::HREQ_MODEM_GET_RADIO_STATUS;
    resultInfo_ = responseInfo;
    g_getRadioStateResponseFlag = true;
    NotifyAll();
    return 0;
}

int32_t RilCallback::GetImeiResponse(const RilRadioResponseInfo &responseInfo, const std::string &imei)
{
    HDF_LOGI("GetImeiResponse imei : %{public}s", imei.c_str());
    hdiId_ = HdiId::HREQ_MODEM_GET_IMEI;
    resultInfo_ = responseInfo;
    g_getImeiResponseFlag = true;
    NotifyAll();
    return 0;
}

int32_t RilCallback::GetMeidResponse(const RilRadioResponseInfo &responseInfo, const std::string &meid)
{
    HDF_LOGI("GetMeidResponse meid : %{public}s", meid.c_str());
    hdiId_ = HdiId::HREQ_MODEM_GET_MEID;
    resultInfo_ = responseInfo;
    g_getMeidResponseFlag = true;
    NotifyAll();
    return 0;
}

int32_t RilCallback::GetVoiceRadioTechnologyResponse(const RilRadioResponseInfo &responseInfo,
                                                     const VoiceRadioTechnology &voiceRadioTechnology)
{
    g_getVoiceRadioTechnologyResponseFlag = true;
    HDF_LOGI("GetVoiceRadioTechnologyResponse srvStatus : %{public}d srvDomain : %{public}d roamStatus: %{public}d "
             "simStatus : %{public}d lockStatus : %{public}d sysMode : %{public}d actType : %{public}d sysModeName : "
             "%{public}s actName : %{public}s",
             voiceRadioTechnology.srvStatus, voiceRadioTechnology.srvDomain, voiceRadioTechnology.roamStatus,
             voiceRadioTechnology.simStatus, voiceRadioTechnology.lockStatus, voiceRadioTechnology.sysMode,
             voiceRadioTechnology.actType, voiceRadioTechnology.sysModeName.c_str(),
             voiceRadioTechnology.actName.c_str());
    hdiId_ = HdiId::HREQ_MODEM_GET_VOICE_RADIO;
    resultInfo_ = responseInfo;
    NotifyAll();
    return 0;
}

int32_t RilCallback::GetBasebandVersionResponse(const RilRadioResponseInfo &responseInfo,
                                                const std::string &basebandVersion)
{
    HDF_LOGI("GetBasebandVersionResponse basebandVersion : %{public}s", basebandVersion.c_str());
    hdiId_ = HdiId::HREQ_MODEM_GET_BASEBAND_VERSION;
    resultInfo_ = responseInfo;
    g_getBasebandVersionResponseFlag = true;
    NotifyAll();
    return 0;
}

int32_t RilCallback::PdpContextListUpdated(const RilRadioResponseInfo &responseInfo,
                                           const DataCallResultList &dataCallResultList)
{
    HDF_LOGI("RilCallback::PdpContextListUpdated size:%{public}d", dataCallResultList.size);
    for (auto &setupDataCallResultInfo : dataCallResultList.dcList) {
        HDF_LOGI(
            "RilCallback::PdpContextListUpdated flag:%{public}d reason:%{public}d retryTime:%{public}d "
            "cid:%{public}d active:%{public}d type:%{public}s netPortName:%{public}s address:%{public}s "
            "dns:%{public}s dnsSec:%{public}s gateway:%{public}s maxTransferUnit:%{public}d pCscfPrimAddr:%{public}s "
            "pCscfSecAddr:%{public}s pduSessionId:%{public}d",
            setupDataCallResultInfo.flag, setupDataCallResultInfo.reason, setupDataCallResultInfo.retryTime,
            setupDataCallResultInfo.cid, setupDataCallResultInfo.active, setupDataCallResultInfo.type.c_str(),
            setupDataCallResultInfo.netPortName.c_str(), setupDataCallResultInfo.address.c_str(),
            setupDataCallResultInfo.dns.c_str(), setupDataCallResultInfo.dnsSec.c_str(),
            setupDataCallResultInfo.gateway.c_str(), setupDataCallResultInfo.maxTransferUnit,
            setupDataCallResultInfo.pCscfPrimAddr.c_str(), setupDataCallResultInfo.pCscfSecAddr.c_str(),
            setupDataCallResultInfo.pduSessionId);
    }
    return 0;
}

int32_t RilCallback::DataLinkCapabilityUpdated(const RilRadioResponseInfo &responseInfo,
                                               const DataLinkCapability &dataLinkCapability)
{
    HDF_LOGI("RilCallback::DataLinkCapabilityUpdated primaryDownlinkKbps:%{public}d primaryUplinkKbps:%{public}d "
             "secondaryDownlinkKbps:%{public}d secondaryUplinkKbps:%{public}d",
             dataLinkCapability.primaryDownlinkKbps, dataLinkCapability.primaryUplinkKbps,
             dataLinkCapability.secondaryDownlinkKbps, dataLinkCapability.secondaryUplinkKbps);
    return 0;
}

int32_t RilCallback::ActivatePdpContextResponse(const RilRadioResponseInfo &responseInfo,
                                                const SetupDataCallResultInfo &setupDataCallResultInfo)
{
    HDF_LOGI("RilCallback::ActivatePdpContextResponse flag:%{public}d reason:%{public}d retryTime:%{public}d "
             "cid:%{public}d active:%{public}d type:%{public}s netPortName:%{public}s address:%{public}s "
             "dns:%{public}s dnsSec:%{public}s gateway:%{public}s maxTransferUnit:%{public}d pCscfPrimAddr:%{public}s "
             "pCscfSecAddr:%{public}s pduSessionId:%{public}d",
             setupDataCallResultInfo.flag, setupDataCallResultInfo.reason, setupDataCallResultInfo.retryTime,
             setupDataCallResultInfo.cid, setupDataCallResultInfo.active, setupDataCallResultInfo.type.c_str(),
             setupDataCallResultInfo.netPortName.c_str(), setupDataCallResultInfo.address.c_str(),
             setupDataCallResultInfo.dns.c_str(), setupDataCallResultInfo.dnsSec.c_str(),
             setupDataCallResultInfo.gateway.c_str(), setupDataCallResultInfo.maxTransferUnit,
             setupDataCallResultInfo.pCscfPrimAddr.c_str(), setupDataCallResultInfo.pCscfSecAddr.c_str(),
             setupDataCallResultInfo.pduSessionId);
    hdiId_ = HdiId::HREQ_DATA_ACTIVATE_PDP_CONTEXT;
    resultInfo_ = responseInfo;
    NotifyAll();
    return 0;
}

int32_t RilCallback::DeactivatePdpContextResponse(const RilRadioResponseInfo &responseInfo)
{
    g_deactivatePdpContextResponseFlag = true;
    HDF_LOGI("RilCallback::DeactivatePdpContextResponse error:%{public}d", responseInfo.error);
    hdiId_ = HdiId::HREQ_DATA_DEACTIVATE_PDP_CONTEXT;
    resultInfo_ = responseInfo;
    NotifyAll();
    return 0;
}

int32_t RilCallback::GetPdpContextListResponse(const RilRadioResponseInfo &responseInfo,
                                               const DataCallResultList &dataCallResultList)
{
    g_getPdpContextListResponseFlag = true;
    HDF_LOGI("RilCallback::GetPdpContextListResponse size:%{public}d", dataCallResultList.size);
    for (auto &setupDataCallResultInfo : dataCallResultList.dcList) {
        HDF_LOGI(
            "RilCallback::GetPdpContextListResponse flag:%{public}d reason:%{public}d retryTime:%{public}d "
            "cid:%{public}d active:%{public}d type:%{public}s netPortName:%{public}s address:%{public}s "
            "dns:%{public}s dnsSec:%{public}s gateway:%{public}s maxTransferUnit:%{public}d pCscfPrimAddr:%{public}s "
            "pCscfSecAddr:%{public}s pduSessionId:%{public}d",
            setupDataCallResultInfo.flag, setupDataCallResultInfo.reason, setupDataCallResultInfo.retryTime,
            setupDataCallResultInfo.cid, setupDataCallResultInfo.active, setupDataCallResultInfo.type.c_str(),
            setupDataCallResultInfo.netPortName.c_str(), setupDataCallResultInfo.address.c_str(),
            setupDataCallResultInfo.dns.c_str(), setupDataCallResultInfo.dnsSec.c_str(),
            setupDataCallResultInfo.gateway.c_str(), setupDataCallResultInfo.maxTransferUnit,
            setupDataCallResultInfo.pCscfPrimAddr.c_str(), setupDataCallResultInfo.pCscfSecAddr.c_str(),
            setupDataCallResultInfo.pduSessionId);
    }
    hdiId_ = HdiId::HREQ_DATA_GET_PDP_CONTEXT_LIST;
    resultInfo_ = responseInfo;
    NotifyAll();
    return 0;
}

int32_t RilCallback::SetInitApnInfoResponse(const RilRadioResponseInfo &responseInfo)
{
    g_setInitApnInfoResponseFlag = true;
    HDF_LOGI("RilCallback::SetInitApnInfoResponse error:%{public}d", responseInfo.error);
    hdiId_ = HdiId::HREQ_DATA_SET_INIT_APN_INFO;
    resultInfo_ = responseInfo;
    NotifyAll();
    return 0;
}

int32_t RilCallback::SetLinkBandwidthReportingRuleResponse(const RilRadioResponseInfo &responseInfo)
{
    HDF_LOGI("RilCallback::SetLinkBandwidthReportingRuleResponse error:%{public}d", responseInfo.error);
    hdiId_ = HdiId::HREQ_DATA_SET_LINK_BANDWIDTH_REPORTING_RULE;
    resultInfo_ = responseInfo;
    NotifyAll();
    return 0;
}

int32_t RilCallback::GetLinkBandwidthInfoResponse(const RilRadioResponseInfo &responseInfo,
                                                  const DataLinkBandwidthInfo &dataLinkBandwidthInfo)
{
    g_getLinkBandwidthInfoResponseFlag = true;
    HDF_LOGI(
        "RilCallback::GetLinkBandwidthInfoResponse serial:%{public}d cid:%{public}d qi:%{public}d dlGfbr:%{public}d "
        "ulGfbr:%{public}d dlMfbr:%{public}d ulMfbr:%{public}d ulSambr:%{public}d dlSambr:%{public}d "
        "averagingWindow:%{public}d",
        dataLinkBandwidthInfo.serial, dataLinkBandwidthInfo.cid, dataLinkBandwidthInfo.qi, dataLinkBandwidthInfo.dlGfbr,
        dataLinkBandwidthInfo.ulGfbr, dataLinkBandwidthInfo.dlMfbr, dataLinkBandwidthInfo.ulMfbr,
        dataLinkBandwidthInfo.ulSambr, dataLinkBandwidthInfo.dlSambr, dataLinkBandwidthInfo.averagingWindow);
    hdiId_ = HdiId::HREQ_DATA_GET_LINK_BANDWIDTH_INFO;
    resultInfo_ = responseInfo;
    NotifyAll();
    return 0;
}

int32_t RilCallback::SetDataPermittedResponse(const RilRadioResponseInfo &responseInfo)
{
    HDF_LOGI("RilCallback::SetDataPermittedResponse error:%{public}d", responseInfo.error);
    hdiId_ = HdiId::HREQ_DATA_SET_DATA_PERMITTED;
    resultInfo_ = responseInfo;
    g_setDataPermittedResponseFlag = true;
    NotifyAll();
    return 0;
}

int32_t RilCallback::SetDataProfileInfoResponse(const RilRadioResponseInfo &responseInfo)
{
    HDF_LOGI("RilCallback::SetDataProfileInfoResponse error:%{public}d", responseInfo.error);
    hdiId_ = HdiId::HREQ_DATA_SET_DATA_PROFILE_INFO;
    resultInfo_ = responseInfo;
    NotifyAll();
    return 0;
}

int32_t RilCallback::GetLinkCapabilityResponse(const RilRadioResponseInfo &responseInfo,
                                               const DataLinkCapability &dataLinkCapability)
{
    g_getLinkCapabilityResponseFlag = true;
    HDF_LOGI("RilCallbackTest::GetLinkCapabilityResponse primaryDownlinkKbps:%{public}d "
             "primaryUplinkKbps:%{public}d secondaryDownlinkKbps:%{public}d secondaryUplinkKbps:%{public}d",
             dataLinkCapability.primaryDownlinkKbps, dataLinkCapability.primaryUplinkKbps,
             dataLinkCapability.secondaryDownlinkKbps, dataLinkCapability.secondaryUplinkKbps);
    hdiId_ = HdiId::HREQ_DATA_GET_LINK_CAPABILITY;
    resultInfo_ = responseInfo;
    NotifyAll();
    return 0;
}

int32_t RilCallback::CleanAllConnectionsResponse(const RilRadioResponseInfo &responseInfo)
{
    HDF_LOGI("RilCallback::CleanAllConnectionsResponse error:%{public}d", responseInfo.error);
    hdiId_ = HdiId::HREQ_DATA_CLEAN_ALL_CONNECTIONS;
    resultInfo_ = responseInfo;
    NotifyAll();
    return 0;
}

int32_t RilCallback::NewSmsNotify(const HDI::Ril::V1_1::RilRadioResponseInfo &responseInfo,
                                  const SmsMessageInfo &smsMessageInfo)
{
    HDF_LOGI("RilCallback::NewSmsNotify smsMessageInfo size : %{public}d", smsMessageInfo.size);
    return 0;
}

int32_t RilCallback::NewCdmaSmsNotify(const HDI::Ril::V1_1::RilRadioResponseInfo &responseInfo,
                                      const SmsMessageInfo &smsMessageInfo)
{
    HDF_LOGI("RilCallback::NewCdmaSmsNotify smsMessageInfo size : %{public}d", smsMessageInfo.size);
    return 0;
}

int32_t RilCallback::SmsStatusReportNotify(const HDI::Ril::V1_1::RilRadioResponseInfo &responseInfo,
                                           const SmsMessageInfo &smsMessageInfo)
{
    HDF_LOGI("RilCallback::SmsStatusReportNotify smsMessageInfo size : %{public}d", smsMessageInfo.size);
    return 0;
}

int32_t RilCallback::NewSmsStoredOnSimNotify(const HDI::Ril::V1_1::RilRadioResponseInfo &responseInfo,
                                             int32_t recordNumber, int32_t indicationType)
{
    HDF_LOGI("RilCallback::NewSmsStoredOnSimNotify recordNumber : %{public}d, indicationType : %{public}d",
             recordNumber, indicationType);
    return 0;
}

int32_t RilCallback::CBConfigNotify(const HDI::Ril::V1_1::RilRadioResponseInfo &responseInfo,
                                    const CBConfigReportInfo &cellBroadConfigReportInfo)
{
    HDF_LOGI("RilCallback::CBConfigNotify cellBroadConfigReportInfo dcs : %{public}s",
             cellBroadConfigReportInfo.dcs.c_str());
    return 0;
}

int32_t RilCallback::SendGsmSmsResponse(const RilRadioResponseInfo &responseInfo,
                                        const SendSmsResultInfo &sendSmsResultInfo)
{
    g_sendGsmSmsResponseFlag = true;
    HDF_LOGI("RilCallback::SendGsmSmsResponse sendSmsResultInfo pdu : %{public}s, error : %{public}d",
             sendSmsResultInfo.pdu.c_str(), sendSmsResultInfo.errCode);
    hdiId_ = HdiId::HREQ_SMS_SEND_GSM_SMS;
    resultInfo_ = responseInfo;
    NotifyAll();
    return 0;
}

int32_t RilCallback::SendCdmaSmsResponse(const RilRadioResponseInfo &responseInfo,
                                         const SendSmsResultInfo &sendSmsResultInfo)
{
    g_sendCdmaSmsResponseFlag = true;
    HDF_LOGI("RilCallback::SendCdmaSmsResponse sendSmsResultInfo pdu : %{public}s, error : %{public}d",
             sendSmsResultInfo.pdu.c_str(), sendSmsResultInfo.errCode);
    hdiId_ = HdiId::HREQ_SMS_SEND_CDMA_SMS;
    resultInfo_ = responseInfo;
    NotifyAll();
    return 0;
}

int32_t RilCallback::AddSimMessageResponse(const RilRadioResponseInfo &responseInfo)
{
    g_addSimMessageResponseFlag = true;
    HDF_LOGI("RilCallback::AddSimMessageResponse error : %{public}d", responseInfo.error);
    hdiId_ = HdiId::HREQ_SMS_ADD_SIM_MESSAGE;
    resultInfo_ = responseInfo;
    NotifyAll();
    return 0;
}

int32_t RilCallback::DelSimMessageResponse(const RilRadioResponseInfo &responseInfo)
{
    g_delSimMessageResponseFlag = true;
    HDF_LOGI("RilCallback::DelSimMessageResponse error : %{public}d", responseInfo.error);
    hdiId_ = HdiId::HREQ_SMS_DEL_SIM_MESSAGE;
    resultInfo_ = responseInfo;
    NotifyAll();
    return 0;
}
int32_t RilCallback::UpdateSimMessageResponse(const RilRadioResponseInfo &responseInfo)
{
    g_updateSimMessageResponseFlag = true;
    HDF_LOGI("RilCallback::UpdateSimMessageResponse error : %{public}d", responseInfo.error);
    hdiId_ = HdiId::HREQ_SMS_UPDATE_SIM_MESSAGE;
    resultInfo_ = responseInfo;
    NotifyAll();
    return 0;
}

int32_t RilCallback::AddCdmaSimMessageResponse(const RilRadioResponseInfo &responseInfo)
{
    g_addCdmaSimMessageResponseFlag = true;
    HDF_LOGI("RilCallback::AddCdmaSimMessageResponse error : %{public}d", responseInfo.error);
    hdiId_ = HdiId::HREQ_SMS_ADD_CDMA_SIM_MESSAGE;
    resultInfo_ = responseInfo;
    NotifyAll();
    return 0;
}

int32_t RilCallback::DelCdmaSimMessageResponse(const RilRadioResponseInfo &responseInfo)
{
    g_delCdmaSimMessageResponseFlag = true;
    HDF_LOGI("RilCallback::DelCdmaSimMessageResponse error : %{public}d", responseInfo.error);
    hdiId_ = HdiId::HREQ_SMS_DEL_CDMA_SIM_MESSAGE;
    resultInfo_ = responseInfo;
    NotifyAll();
    return 0;
}

int32_t RilCallback::UpdateCdmaSimMessageResponse(const RilRadioResponseInfo &responseInfo)
{
    g_updateCdmaSimMessageResponseFlag = true;
    HDF_LOGI("RilCallback::UpdateCdmaSimMessageResponse error : %{public}d", responseInfo.error);
    hdiId_ = HdiId::HREQ_SMS_UPDATE_CDMA_SIM_MESSAGE;
    resultInfo_ = responseInfo;
    NotifyAll();
    return 0;
}

int32_t RilCallback::SetSmscAddrResponse(const RilRadioResponseInfo &responseInfo)
{
    g_setSmscAddrResponseFlag = true;
    HDF_LOGI("RilCallback::SetSmscAddrResponse error : %{public}d", responseInfo.error);
    hdiId_ = HdiId::HREQ_SMS_SET_SMSC_ADDR;
    resultInfo_ = responseInfo;
    NotifyAll();
    return 0;
}

int32_t RilCallback::GetSmscAddrResponse(const RilRadioResponseInfo &responseInfo,
                                         const ServiceCenterAddress &serviceCenterAddress)
{
    g_getSmscAddrResponseFlag = true;
    HDF_LOGI("RilCallback::GetSmscAddrResponse serviceCenterAddress tosca : %{public}d, address : %{public}s",
             serviceCenterAddress.tosca, serviceCenterAddress.address.c_str());
    hdiId_ = HdiId::HREQ_SMS_GET_SMSC_ADDR;
    resultInfo_ = responseInfo;
    NotifyAll();
    return 0;
}

int32_t RilCallback::SetCBConfigResponse(const RilRadioResponseInfo &responseInfo)
{
    g_setCBConfigResponseFlag = true;
    HDF_LOGI("RilCallback::SetCBConfigResponse error : %{public}d", responseInfo.error);
    hdiId_ = HdiId::HREQ_SMS_SET_CB_CONFIG;
    resultInfo_ = responseInfo;
    NotifyAll();
    return 0;
}

int32_t RilCallback::GetCBConfigResponse(const RilRadioResponseInfo &responseInfo,
                                         const CBConfigInfo &cellBroadcastInfo)
{
    g_getCBConfigResponseFlag = true;
    HDF_LOGI("RilCallback::GetCBConfigResponse cellBroadcastInfo mids : %{public}s, dcss: %{public}s",
             cellBroadcastInfo.mids.c_str(), cellBroadcastInfo.dcss.c_str());
    hdiId_ = HdiId::HREQ_SMS_GET_CB_CONFIG;
    resultInfo_ = responseInfo;
    NotifyAll();
    return 0;
}

int32_t RilCallback::SetCdmaCBConfigResponse(const RilRadioResponseInfo &responseInfo)
{
    HDF_LOGI("RilCallback::SetCdmaCBConfigResponse error : %{public}d", responseInfo.error);
    g_setCdmaCBConfigResponseFlag = true;
    hdiId_ = HdiId::HREQ_SMS_SET_CDMA_CB_CONFIG;
    resultInfo_ = responseInfo;
    NotifyAll();
    return 0;
}

int32_t RilCallback::GetCdmaCBConfigResponse(const RilRadioResponseInfo &responseInfo,
                                             const CdmaCBConfigInfo &cdmaCBConfigInfo)
{
    HDF_LOGI("RilCallback::GetCdmaCBConfigResponse cdmaCBConfigInfo service : %{public}d, language : %{public}d, "
             "checked: %{public}d",
             cdmaCBConfigInfo.service, cdmaCBConfigInfo.language, cdmaCBConfigInfo.checked);
    g_getCdmaCBConfigResponseFlag = true;
    hdiId_ = HdiId::HREQ_SMS_GET_CDMA_CB_CONFIG;
    resultInfo_ = responseInfo;
    NotifyAll();
    return 0;
}

int32_t RilCallback::SendSmsMoreModeResponse(const RilRadioResponseInfo &responseInfo,
                                             const SendSmsResultInfo &sendSmsResultInfo)
{
    HDF_LOGI("RilCallback::SendSmsMoreModeResponse sendSmsResultInfo pdu : %{public}s, error : %{public}d",
             sendSmsResultInfo.pdu.c_str(), sendSmsResultInfo.errCode);
    g_sendSmsMoreModeResponseFlag = true;
    hdiId_ = HdiId::HREQ_SMS_SEND_SMS_MORE_MODE;
    resultInfo_ = responseInfo;
    NotifyAll();
    return 0;
}

int32_t RilCallback::SendSmsAckResponse(const RilRadioResponseInfo &responseInfo)
{
    HDF_LOGI("RilCallback::SendSmsAckResponse error:%{public}d", responseInfo.error);
    g_sendSmsAckResponseFlag = true;
    hdiId_ = HdiId::HREQ_SMS_SEND_SMS_ACK;
    resultInfo_ = responseInfo;
    NotifyAll();
    return 0;
}

int32_t RilCallback::CommonErrorResponse(const RilRadioResponseInfo &responseInfo)
{
    HDF_LOGI("RilCallback::CommonErrorResponse type:%{public}d error:%{public}d", responseInfo.type,
             responseInfo.error);
    return 0;
}

/**
** HdfRilHdiTestAdditional implement
**/
void HdfRilHdiTestAdditional::SetUpTestCase() {}

void HdfRilHdiTestAdditional::TearDownTestCase() {}

void HdfRilHdiTestAdditional::SetUp()
{
    g_rilInterface = OHOS::HDI::Ril::V1_2::IRil::Get();
    if (g_rilInterface != nullptr) {
        g_rilInterface->SetCallback1_2(&callback_);
    }
}
void HdfRilHdiTestAdditional::TearDown() {}

/**
**  Xts Test
**/
/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SetEmergencyCallList_0300
 * @tc.name   : testV1SetEmergencyCallList001
 * @tc.desc   : Call the function V1 SetEmergencyCallList with slotId and a value of 2
 **/
HWTEST_F(HdfRilHdiTestAdditional, testV1SetEmergencyCallList001, Function | MediumTest | Level1)
{
    if (!IsReady(1)) {
        return;
    }
    if (g_rilInterface == nullptr) {
        EXPECT_EQ(SUCCESS, 1);
    }
    if (simState_[1] != 0 && simState_[1] != -1) {
    } else {
        EXPECT_EQ(SUCCESS, 1);
    }
    EmergencyInfoList emergencyInfoList;
    EmergencyCall emergencyInfo = {};
    emergencyInfo.index = 1;
    emergencyInfo.total = 1;
    emergencyInfo.eccNum = "120";
    emergencyInfo.eccType = EccType::TYPE_CATEGORY;
    emergencyInfo.simpresent = SimpresentType::TYPE_HAS_CARD;
    emergencyInfo.mcc = "460";
    emergencyInfo.abnormalService = AbnormalServiceType::TYPE_ALL;
    emergencyInfoList.calls.push_back(emergencyInfo);
    int32_t ret = g_rilInterface->SetEmergencyCallList(2, GetSerialId(), emergencyInfoList);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_SET_EMERGENCY_LIST));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SetEmergencyCallList_0400
 * @tc.name   : testV1SetEmergencyCallList002
 * @tc.desc   : Call the function V1 SetEmergencyCallList with slotId and a value of 256
 **/
HWTEST_F(HdfRilHdiTestAdditional, testV1SetEmergencyCallList002, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    EmergencyInfoList emergencyInfoList;
    EmergencyCall emergencyInfo = {};
    emergencyInfo.index = 1;
    emergencyInfo.total = 1;
    emergencyInfo.eccNum = "120";
    emergencyInfo.eccType = EccType::TYPE_CATEGORY;
    emergencyInfo.simpresent = SimpresentType::TYPE_HAS_CARD;
    emergencyInfo.mcc = "460";
    emergencyInfo.abnormalService = AbnormalServiceType::TYPE_ALL;
    emergencyInfoList.calls.push_back(emergencyInfo);
    int32_t ret = g_rilInterface->SetEmergencyCallList(256, GetSerialId(), emergencyInfoList);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_SET_EMERGENCY_LIST));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SetEmergencyCallList_0500
 * @tc.name   : testV1SetEmergencyCallList003
 * @tc.desc   : Call the function V1 SetEmergencyCallList with slotId and a value of -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetEmergencyCallList003, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    EmergencyInfoList emergencyInfoList;
    EmergencyCall emergencyInfo = {};
    emergencyInfo.index = 1;
    emergencyInfo.total = 1;
    emergencyInfo.eccNum = "120";
    emergencyInfo.eccType = EccType::TYPE_CATEGORY;
    emergencyInfo.simpresent = SimpresentType::TYPE_HAS_CARD;
    emergencyInfo.mcc = "460";
    emergencyInfo.abnormalService = AbnormalServiceType::TYPE_ALL;
    emergencyInfoList.calls.push_back(emergencyInfo);
    int32_t ret = g_rilInterface->SetEmergencyCallList(-1, GetSerialId(), emergencyInfoList);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_SET_EMERGENCY_LIST));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SetEmergencyCallList_0600
 * @tc.name   : testV1SetEmergencyCallList004
 * @tc.desc   : Call the function V1 SetEmergencyCallList with serialId and a value of -11111
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetEmergencyCallList004, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    EmergencyInfoList emergencyInfoList;
    EmergencyCall emergencyInfo = {};
    emergencyInfo.index = 1;
    emergencyInfo.total = 1;
    emergencyInfo.eccNum = "120";
    emergencyInfo.eccType = EccType::TYPE_CATEGORY;
    emergencyInfo.simpresent = SimpresentType::TYPE_HAS_CARD;
    emergencyInfo.mcc = "460";
    emergencyInfo.abnormalService = AbnormalServiceType::TYPE_ALL;
    emergencyInfoList.calls.push_back(emergencyInfo);
    int32_t ret = g_rilInterface->SetEmergencyCallList(SLOTID_1, -11111, emergencyInfoList);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_SET_EMERGENCY_LIST));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SetEmergencyCallList_0700
 * @tc.name   : testV1SetEmergencyCallList005
 * @tc.desc   : Call the function V1 SetEmergencyCallList with serialId and a value of 0
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetEmergencyCallList005, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    EmergencyInfoList emergencyInfoList;
    EmergencyCall emergencyInfo = {};
    emergencyInfo.index = 1;
    emergencyInfo.total = 1;
    emergencyInfo.eccNum = "120";
    emergencyInfo.eccType = EccType::TYPE_CATEGORY;
    emergencyInfo.simpresent = SimpresentType::TYPE_HAS_CARD;
    emergencyInfo.mcc = "460";
    emergencyInfo.abnormalService = AbnormalServiceType::TYPE_ALL;
    emergencyInfoList.calls.push_back(emergencyInfo);
    int32_t ret = g_rilInterface->SetEmergencyCallList(SLOTID_1, 0, emergencyInfoList);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_SET_EMERGENCY_LIST));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SetEmergencyCallList_0800
 * @tc.name   : testV1SetEmergencyCallList006
 * @tc.desc   : Call the function V1 SetEmergencyCallList with serialId and a value of 11111
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetEmergencyCallList006, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    EmergencyInfoList emergencyInfoList;
    EmergencyCall emergencyInfo = {};
    emergencyInfo.index = 1;
    emergencyInfo.total = 1;
    emergencyInfo.eccNum = "120";
    emergencyInfo.eccType = EccType::TYPE_CATEGORY;
    emergencyInfo.simpresent = SimpresentType::TYPE_HAS_CARD;
    emergencyInfo.mcc = "460";
    emergencyInfo.abnormalService = AbnormalServiceType::TYPE_ALL;
    emergencyInfoList.calls.push_back(emergencyInfo);
    int32_t ret = g_rilInterface->SetEmergencyCallList(SLOTID_1, 11111, emergencyInfoList);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_SET_EMERGENCY_LIST));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SetEmergencyCallList_0900
 * @tc.name   : testV1SetEmergencyCallList007
 * @tc.desc   : Call the function V1 SetEmergencyCallList with serialId and a value of 32768
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetEmergencyCallList007, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    EmergencyInfoList emergencyInfoList;
    EmergencyCall emergencyInfo = {};
    emergencyInfo.index = 1;
    emergencyInfo.total = 1;
    emergencyInfo.eccNum = "120";
    emergencyInfo.eccType = EccType::TYPE_CATEGORY;
    emergencyInfo.simpresent = SimpresentType::TYPE_HAS_CARD;
    emergencyInfo.mcc = "460";
    emergencyInfo.abnormalService = AbnormalServiceType::TYPE_ALL;
    emergencyInfoList.calls.push_back(emergencyInfo);
    int32_t ret = g_rilInterface->SetEmergencyCallList(SLOTID_1, 32768, emergencyInfoList);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_SET_EMERGENCY_LIST));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SetEmergencyCallList_1000
 * @tc.name   : testV1SetEmergencyCallList008
 * @tc.desc   : Call the function V1 SetEmergencyCallList with serialId and a value of -32768
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetEmergencyCallList008, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    EmergencyInfoList emergencyInfoList;
    EmergencyCall emergencyInfo = {};
    emergencyInfo.index = 1;
    emergencyInfo.total = 1;
    emergencyInfo.eccNum = "120";
    emergencyInfo.eccType = EccType::TYPE_CATEGORY;
    emergencyInfo.simpresent = SimpresentType::TYPE_HAS_CARD;
    emergencyInfo.mcc = "460";
    emergencyInfo.abnormalService = AbnormalServiceType::TYPE_ALL;
    emergencyInfoList.calls.push_back(emergencyInfo);
    int32_t ret = g_rilInterface->SetEmergencyCallList(SLOTID_1, -32768, emergencyInfoList);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_SET_EMERGENCY_LIST));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SetEmergencyCallList_1100
 * @tc.name   : testV1SetEmergencyCallList009
 * @tc.desc   : Call the function V1 SetEmergencyCallList with index and a value of 0
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetEmergencyCallList009, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    EmergencyInfoList emergencyInfoList;
    EmergencyCall emergencyInfo = {};
    emergencyInfo.index = 0;
    emergencyInfo.total = 1;
    emergencyInfo.eccNum = "120";
    emergencyInfo.eccType = EccType::TYPE_CATEGORY;
    emergencyInfo.simpresent = SimpresentType::TYPE_HAS_CARD;
    emergencyInfo.mcc = "460";
    emergencyInfo.abnormalService = AbnormalServiceType::TYPE_ALL;
    emergencyInfoList.calls.push_back(emergencyInfo);
    int32_t ret = g_rilInterface->SetEmergencyCallList(SLOTID_1, GetSerialId(), emergencyInfoList);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_SET_EMERGENCY_LIST));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SetEmergencyCallList_1200
 * @tc.name   : testV1SetEmergencyCallList010
 * @tc.desc   : Call the function V1 SetEmergencyCallList with index and a value of -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetEmergencyCallList010, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    EmergencyInfoList emergencyInfoList;
    EmergencyCall emergencyInfo = {};
    emergencyInfo.index = -1;
    emergencyInfo.total = 1;
    emergencyInfo.eccNum = "120";
    emergencyInfo.eccType = EccType::TYPE_CATEGORY;
    emergencyInfo.simpresent = SimpresentType::TYPE_HAS_CARD;
    emergencyInfo.mcc = "460";
    emergencyInfo.abnormalService = AbnormalServiceType::TYPE_ALL;
    emergencyInfoList.calls.push_back(emergencyInfo);
    int32_t ret = g_rilInterface->SetEmergencyCallList(SLOTID_1, GetSerialId(), emergencyInfoList);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_SET_EMERGENCY_LIST));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SetEmergencyCallList_1300
 * @tc.name   : testV1SetEmergencyCallList011
 * @tc.desc   : Call the function V1 SetEmergencyCallList with total and a value of 0
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetEmergencyCallList011, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    EmergencyInfoList emergencyInfoList;
    EmergencyCall emergencyInfo = {};
    emergencyInfo.index = 1;
    emergencyInfo.total = 0;
    emergencyInfo.eccNum = "120";
    emergencyInfo.eccType = EccType::TYPE_CATEGORY;
    emergencyInfo.simpresent = SimpresentType::TYPE_HAS_CARD;
    emergencyInfo.mcc = "460";
    emergencyInfo.abnormalService = AbnormalServiceType::TYPE_ALL;
    emergencyInfoList.calls.push_back(emergencyInfo);
    int32_t ret = g_rilInterface->SetEmergencyCallList(SLOTID_1, GetSerialId(), emergencyInfoList);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_SET_EMERGENCY_LIST));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SetEmergencyCallList_1400
 * @tc.name   : testV1SetEmergencyCallList012
 * @tc.desc   : Call the function V1 SetEmergencyCallList with total and a value of -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetEmergencyCallList012, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    EmergencyInfoList emergencyInfoList;
    EmergencyCall emergencyInfo = {};
    emergencyInfo.index = 1;
    emergencyInfo.total = -1;
    emergencyInfo.eccNum = "120";
    emergencyInfo.eccType = EccType::TYPE_CATEGORY;
    emergencyInfo.simpresent = SimpresentType::TYPE_HAS_CARD;
    emergencyInfo.mcc = "460";
    emergencyInfo.abnormalService = AbnormalServiceType::TYPE_ALL;
    emergencyInfoList.calls.push_back(emergencyInfo);
    int32_t ret = g_rilInterface->SetEmergencyCallList(SLOTID_1, GetSerialId(), emergencyInfoList);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_SET_EMERGENCY_LIST));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SetEmergencyCallList_1500
 * @tc.name   : testV1SetEmergencyCallList013
 * @tc.desc   : Call the function V1 SetEmergencyCallList with eccNum and a value of 0
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetEmergencyCallList013, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    EmergencyInfoList emergencyInfoList;
    EmergencyCall emergencyInfo = {};
    emergencyInfo.index = 1;
    emergencyInfo.total = 1;
    emergencyInfo.eccNum = "0";
    emergencyInfo.eccType = EccType::TYPE_CATEGORY;
    emergencyInfo.simpresent = SimpresentType::TYPE_HAS_CARD;
    emergencyInfo.mcc = "460";
    emergencyInfo.abnormalService = AbnormalServiceType::TYPE_ALL;
    emergencyInfoList.calls.push_back(emergencyInfo);
    int32_t ret = g_rilInterface->SetEmergencyCallList(SLOTID_1, GetSerialId(), emergencyInfoList);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_SET_EMERGENCY_LIST));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SetEmergencyCallList_1600
 * @tc.name   : testV1SetEmergencyCallList014
 * @tc.desc   : Call the function V1 SetEmergencyCallList with eccNum and a value of 110
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetEmergencyCallList014, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    EmergencyInfoList emergencyInfoList;
    EmergencyCall emergencyInfo = {};
    emergencyInfo.index = 1;
    emergencyInfo.total = 1;
    emergencyInfo.eccNum = "110";
    emergencyInfo.eccType = EccType::TYPE_CATEGORY;
    emergencyInfo.simpresent = SimpresentType::TYPE_HAS_CARD;
    emergencyInfo.mcc = "460";
    emergencyInfo.abnormalService = AbnormalServiceType::TYPE_ALL;
    emergencyInfoList.calls.push_back(emergencyInfo);
    int32_t ret = g_rilInterface->SetEmergencyCallList(SLOTID_1, GetSerialId(), emergencyInfoList);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_SET_EMERGENCY_LIST));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SetEmergencyCallList_1700
 * @tc.name   : testV1SetEmergencyCallList015
 * @tc.desc   : Call the function V1 SetEmergencyCallList with eccNum and a value of -110
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetEmergencyCallList015, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    EmergencyInfoList emergencyInfoList;
    EmergencyCall emergencyInfo = {};
    emergencyInfo.index = 1;
    emergencyInfo.total = 1;
    emergencyInfo.eccNum = "-110";
    emergencyInfo.eccType = EccType::TYPE_CATEGORY;
    emergencyInfo.simpresent = SimpresentType::TYPE_HAS_CARD;
    emergencyInfo.mcc = "460";
    emergencyInfo.abnormalService = AbnormalServiceType::TYPE_ALL;
    emergencyInfoList.calls.push_back(emergencyInfo);
    int32_t ret = g_rilInterface->SetEmergencyCallList(SLOTID_1, GetSerialId(), emergencyInfoList);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_SET_EMERGENCY_LIST));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SetEmergencyCallList_1800
 * @tc.name   : testV1SetEmergencyCallList016
 * @tc.desc   : Call the function V1 SetEmergencyCallList with mcc and a value of 0
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetEmergencyCallList016, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    EmergencyInfoList emergencyInfoList;
    EmergencyCall emergencyInfo = {};
    emergencyInfo.index = 1;
    emergencyInfo.total = 1;
    emergencyInfo.eccNum = "120";
    emergencyInfo.eccType = EccType::TYPE_CATEGORY;
    emergencyInfo.simpresent = SimpresentType::TYPE_HAS_CARD;
    emergencyInfo.mcc = "0";
    emergencyInfo.abnormalService = AbnormalServiceType::TYPE_ALL;
    emergencyInfoList.calls.push_back(emergencyInfo);
    int32_t ret = g_rilInterface->SetEmergencyCallList(SLOTID_1, GetSerialId(), emergencyInfoList);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_SET_EMERGENCY_LIST));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SetEmergencyCallList_1900
 * @tc.name   : testV1SetEmergencyCallList017
 * @tc.desc   : Call the function V1 SetEmergencyCallList with mcc and a value of 86
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetEmergencyCallList017, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    EmergencyInfoList emergencyInfoList;
    EmergencyCall emergencyInfo = {};
    emergencyInfo.index = 1;
    emergencyInfo.total = 1;
    emergencyInfo.eccNum = "120";
    emergencyInfo.eccType = EccType::TYPE_CATEGORY;
    emergencyInfo.simpresent = SimpresentType::TYPE_HAS_CARD;
    emergencyInfo.mcc = "86";
    emergencyInfo.abnormalService = AbnormalServiceType::TYPE_ALL;
    emergencyInfoList.calls.push_back(emergencyInfo);
    int32_t ret = g_rilInterface->SetEmergencyCallList(SLOTID_1, GetSerialId(), emergencyInfoList);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_SET_EMERGENCY_LIST));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SetEmergencyCallList_2000
 * @tc.name   : testV1SetEmergencyCallList018
 * @tc.desc   : Call the function V1 SetEmergencyCallList with mcc and a value of -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetEmergencyCallList018, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    EmergencyInfoList emergencyInfoList;
    EmergencyCall emergencyInfo = {};
    emergencyInfo.index = 1;
    emergencyInfo.total = 1;
    emergencyInfo.eccNum = "120";
    emergencyInfo.eccType = EccType::TYPE_CATEGORY;
    emergencyInfo.simpresent = SimpresentType::TYPE_HAS_CARD;
    emergencyInfo.mcc = "-1";
    emergencyInfo.abnormalService = AbnormalServiceType::TYPE_ALL;
    emergencyInfoList.calls.push_back(emergencyInfo);
    int32_t ret = g_rilInterface->SetEmergencyCallList(SLOTID_1, GetSerialId(), emergencyInfoList);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_SET_EMERGENCY_LIST));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SetEmergencyCallList_2100
 * @tc.name   : testV1SetEmergencyCallList019
 * @tc.desc   : Call the function V1 SetEmergencyCallList with eccType and a value of TYPE_POLICE
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetEmergencyCallList019, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    EmergencyInfoList emergencyInfoList;
    EmergencyCall emergencyInfo = {};
    emergencyInfo.index = 1;
    emergencyInfo.total = 1;
    emergencyInfo.eccNum = "120";
    emergencyInfo.eccType = EccType::TYPE_POLICE;
    emergencyInfo.simpresent = SimpresentType::TYPE_HAS_CARD;
    emergencyInfo.mcc = "460";
    emergencyInfo.abnormalService = AbnormalServiceType::TYPE_ALL;
    emergencyInfoList.calls.push_back(emergencyInfo);
    int32_t ret = g_rilInterface->SetEmergencyCallList(SLOTID_1, GetSerialId(), emergencyInfoList);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_SET_EMERGENCY_LIST));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SetEmergencyCallList_2200
 * @tc.name   : testV1SetEmergencyCallList020
 * @tc.desc   : Call the function V1 SetEmergencyCallList with eccType and a value of TYPE_AMBULANCE
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetEmergencyCallList020, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    EmergencyInfoList emergencyInfoList;
    EmergencyCall emergencyInfo = {};
    emergencyInfo.index = 1;
    emergencyInfo.total = 1;
    emergencyInfo.eccNum = "120";
    emergencyInfo.eccType = EccType::TYPE_AMBULANCE;
    emergencyInfo.simpresent = SimpresentType::TYPE_HAS_CARD;
    emergencyInfo.mcc = "460";
    emergencyInfo.abnormalService = AbnormalServiceType::TYPE_ALL;
    emergencyInfoList.calls.push_back(emergencyInfo);
    int32_t ret = g_rilInterface->SetEmergencyCallList(SLOTID_1, GetSerialId(), emergencyInfoList);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_SET_EMERGENCY_LIST));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SetEmergencyCallList_2300
 * @tc.name   : testV1SetEmergencyCallList021
 * @tc.desc   : Call the function V1 SetEmergencyCallList with eccType and a value of TYPE_FIRE
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetEmergencyCallList021, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    EmergencyInfoList emergencyInfoList;
    EmergencyCall emergencyInfo = {};
    emergencyInfo.index = 1;
    emergencyInfo.total = 1;
    emergencyInfo.eccNum = "120";
    emergencyInfo.eccType = EccType::TYPE_FIRE;
    emergencyInfo.simpresent = SimpresentType::TYPE_HAS_CARD;
    emergencyInfo.mcc = "460";
    emergencyInfo.abnormalService = AbnormalServiceType::TYPE_ALL;
    emergencyInfoList.calls.push_back(emergencyInfo);
    int32_t ret = g_rilInterface->SetEmergencyCallList(SLOTID_1, GetSerialId(), emergencyInfoList);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_SET_EMERGENCY_LIST));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SetEmergencyCallList_2400
 * @tc.name   : testV1SetEmergencyCallList022
 * @tc.desc   : Call the function V1 SetEmergencyCallList with eccType and a value of TYPE_SEA
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetEmergencyCallList022, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    EmergencyInfoList emergencyInfoList;
    EmergencyCall emergencyInfo = {};
    emergencyInfo.index = 1;
    emergencyInfo.total = 1;
    emergencyInfo.eccNum = "120";
    emergencyInfo.eccType = EccType::TYPE_SEA;
    emergencyInfo.simpresent = SimpresentType::TYPE_HAS_CARD;
    emergencyInfo.mcc = "460";
    emergencyInfo.abnormalService = AbnormalServiceType::TYPE_ALL;
    emergencyInfoList.calls.push_back(emergencyInfo);
    int32_t ret = g_rilInterface->SetEmergencyCallList(SLOTID_1, GetSerialId(), emergencyInfoList);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_SET_EMERGENCY_LIST));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SetEmergencyCallList_2500
 * @tc.name   : testV1SetEmergencyCallList023
 * @tc.desc   : Call the function V1 SetEmergencyCallList with eccType and a value of TYPE_MOUNTAIN
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetEmergencyCallList023, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    EmergencyInfoList emergencyInfoList;
    EmergencyCall emergencyInfo = {};
    emergencyInfo.index = 1;
    emergencyInfo.total = 1;
    emergencyInfo.eccNum = "120";
    emergencyInfo.eccType = EccType::TYPE_MOUNTAIN;
    emergencyInfo.simpresent = SimpresentType::TYPE_HAS_CARD;
    emergencyInfo.mcc = "460";
    emergencyInfo.abnormalService = AbnormalServiceType::TYPE_ALL;
    emergencyInfoList.calls.push_back(emergencyInfo);
    int32_t ret = g_rilInterface->SetEmergencyCallList(SLOTID_1, GetSerialId(), emergencyInfoList);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_SET_EMERGENCY_LIST));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SetEmergencyCallList_2600
 * @tc.name   : testV1SetEmergencyCallList024
 * @tc.desc   : Call the function V1 SetEmergencyCallList with simpresent and a value of TYPE_NO_CARD
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetEmergencyCallList024, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    EmergencyInfoList emergencyInfoList;
    EmergencyCall emergencyInfo = {};
    emergencyInfo.index = 1;
    emergencyInfo.total = 1;
    emergencyInfo.eccNum = "120";
    emergencyInfo.eccType = EccType::TYPE_CATEGORY;
    emergencyInfo.simpresent = SimpresentType::TYPE_NO_CARD;
    emergencyInfo.mcc = "460";
    emergencyInfo.abnormalService = AbnormalServiceType::TYPE_ALL;
    emergencyInfoList.calls.push_back(emergencyInfo);
    int32_t ret = g_rilInterface->SetEmergencyCallList(SLOTID_1, GetSerialId(), emergencyInfoList);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_SET_EMERGENCY_LIST));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SetEmergencyCallList_2700
 * @tc.name   : testV1SetEmergencyCallList025
 * @tc.desc   : Call the function V1 SetEmergencyCallList with abnormalService and a value of TYPE_ONLY_CS
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetEmergencyCallList025, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    EmergencyInfoList emergencyInfoList;
    EmergencyCall emergencyInfo = {};
    emergencyInfo.index = 1;
    emergencyInfo.total = 1;
    emergencyInfo.eccNum = "120";
    emergencyInfo.eccType = EccType::TYPE_CATEGORY;
    emergencyInfo.simpresent = SimpresentType::TYPE_HAS_CARD;
    emergencyInfo.mcc = "460";
    emergencyInfo.abnormalService = AbnormalServiceType::TYPE_ONLY_CS;
    emergencyInfoList.calls.push_back(emergencyInfo);
    int32_t ret = g_rilInterface->SetEmergencyCallList(SLOTID_1, GetSerialId(), emergencyInfoList);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_SET_EMERGENCY_LIST));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1CloseUnFinishedUssd_0300
 * @tc.name   : testV1CloseUnFinishedUssd001
 * @tc.desc   : Call the function V1 CloseUnFinishedUssd with slotId and a value of 2
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1CloseUnFinishedUssd001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->CloseUnFinishedUssd(2, GetSerialId());
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_CLOSE_UNFINISHED_USSD));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1CloseUnFinishedUssd_0400
 * @tc.name   : testV1CloseUnFinishedUssd002
 * @tc.desc   : Call the function V1 CloseUnFinishedUssd with slotId and a value of 256
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1CloseUnFinishedUssd002, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->CloseUnFinishedUssd(256, GetSerialId());
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_CLOSE_UNFINISHED_USSD));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1CloseUnFinishedUssd_0500
 * @tc.name   : testV1CloseUnFinishedUssd003
 * @tc.desc   : Call the function V1 CloseUnFinishedUssd with slotId and a value of -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1CloseUnFinishedUssd003, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->CloseUnFinishedUssd(-1, GetSerialId());
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_CLOSE_UNFINISHED_USSD));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1CloseUnFinishedUssd_0600
 * @tc.name   : testV1CloseUnFinishedUssd004
 * @tc.desc   : Call the function V1 CloseUnFinishedUssd with serialId and a value of -11111
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1CloseUnFinishedUssd004, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->CloseUnFinishedUssd(SLOTID_1, -11111);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_CLOSE_UNFINISHED_USSD));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1CloseUnFinishedUssd_0700
 * @tc.name   : testV1CloseUnFinishedUssd005
 * @tc.desc   : Call the function V1 CloseUnFinishedUssd with serialId and a value of 0
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1CloseUnFinishedUssd005, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->CloseUnFinishedUssd(SLOTID_1, 0);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_CLOSE_UNFINISHED_USSD));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1CloseUnFinishedUssd_0800
 * @tc.name   : testV1CloseUnFinishedUssd006
 * @tc.desc   : Call the function V1 CloseUnFinishedUssd with serialId and a value of 11111
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1CloseUnFinishedUssd006, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->CloseUnFinishedUssd(SLOTID_1, 11111);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_CLOSE_UNFINISHED_USSD));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1CloseUnFinishedUssd_0900
 * @tc.name   : testV1CloseUnFinishedUssd007
 * @tc.desc   : Call the function V1 CloseUnFinishedUssd with serialId and a value of 32768
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1CloseUnFinishedUssd007, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->CloseUnFinishedUssd(SLOTID_1, 32768);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_CLOSE_UNFINISHED_USSD));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1CloseUnFinishedUssd_1000
 * @tc.name   : testV1CloseUnFinishedUssd008
 * @tc.desc   : Call the function V1 CloseUnFinishedUssd with serialId and a value of -32768
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1CloseUnFinishedUssd008, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->CloseUnFinishedUssd(SLOTID_1, -32768);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_CLOSE_UNFINISHED_USSD));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SetBarringPassword_0300
 * @tc.name   : testV1SetBarringPassword001
 * @tc.desc   : Call the function V1 SetBarringPassword with slotId and a value of 2
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetBarringPassword001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SetBarringInfo setBarringInfo = {};
    setBarringInfo.fac = "AB";
    setBarringInfo.oldPassword = "1234";
    setBarringInfo.newPassword = "2345";
    int32_t ret = g_rilInterface->SetBarringPassword(2, GetSerialId(), setBarringInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_SET_BARRING_PASSWORD));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SetBarringPassword_0400
 * @tc.name   : testV1SetBarringPassword002
 * @tc.desc   : Call the function V1 SetBarringPassword with slotId and a value of 256
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetBarringPassword002, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SetBarringInfo setBarringInfo = {};
    setBarringInfo.fac = "AB";
    setBarringInfo.oldPassword = "1234";
    setBarringInfo.newPassword = "2345";
    int32_t ret = g_rilInterface->SetBarringPassword(256, GetSerialId(), setBarringInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_SET_BARRING_PASSWORD));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SetBarringPassword_0500
 * @tc.name   : testV1SetBarringPassword003
 * @tc.desc   : Call the function V1 SetBarringPassword with slotId and a value of -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetBarringPassword003, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SetBarringInfo setBarringInfo = {};
    setBarringInfo.fac = "AB";
    setBarringInfo.oldPassword = "1234";
    setBarringInfo.newPassword = "2345";
    int32_t ret = g_rilInterface->SetBarringPassword(-1, GetSerialId(), setBarringInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_SET_BARRING_PASSWORD));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SetBarringPassword_0600
 * @tc.name   : testV1SetBarringPassword004
 * @tc.desc   : Call the function V1 SetBarringPassword with serialId and a value of -11111
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetBarringPassword004, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SetBarringInfo setBarringInfo = {};
    setBarringInfo.fac = "AB";
    setBarringInfo.oldPassword = "1234";
    setBarringInfo.newPassword = "2345";
    int32_t ret = g_rilInterface->SetBarringPassword(SLOTID_1, -11111, setBarringInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_SET_BARRING_PASSWORD));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SetBarringPassword_0700
 * @tc.name   : testV1SetBarringPassword005
 * @tc.desc   : Call the function V1 SetBarringPassword with serialId and a value of 0
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetBarringPassword005, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SetBarringInfo setBarringInfo = {};
    setBarringInfo.fac = "AB";
    setBarringInfo.oldPassword = "1234";
    setBarringInfo.newPassword = "2345";
    int32_t ret = g_rilInterface->SetBarringPassword(SLOTID_1, 0, setBarringInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_SET_BARRING_PASSWORD));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SetBarringPassword_0800
 * @tc.name   : testV1SetBarringPassword006
 * @tc.desc   : Call the function V1 SetBarringPassword with serialId and a value of 11111
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetBarringPassword006, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SetBarringInfo setBarringInfo = {};
    setBarringInfo.fac = "AB";
    setBarringInfo.oldPassword = "1234";
    setBarringInfo.newPassword = "2345";
    int32_t ret = g_rilInterface->SetBarringPassword(SLOTID_1, 11111, setBarringInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_SET_BARRING_PASSWORD));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SetBarringPassword_0900
 * @tc.name   : testV1SetBarringPassword007
 * @tc.desc   : Call the function V1 SetBarringPassword with serialId and a value of 32768
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetBarringPassword007, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SetBarringInfo setBarringInfo = {};
    setBarringInfo.fac = "AB";
    setBarringInfo.oldPassword = "1234";
    setBarringInfo.newPassword = "2345";
    int32_t ret = g_rilInterface->SetBarringPassword(SLOTID_1, 32768, setBarringInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_SET_BARRING_PASSWORD));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SetBarringPassword_1000
 * @tc.name   : testV1SetBarringPassword008
 * @tc.desc   : Call the function V1 SetBarringPassword with serialId and a value of -32768
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetBarringPassword008, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SetBarringInfo setBarringInfo = {};
    setBarringInfo.fac = "AB";
    setBarringInfo.oldPassword = "1234";
    setBarringInfo.newPassword = "2345";
    int32_t ret = g_rilInterface->SetBarringPassword(SLOTID_1, -32768, setBarringInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_SET_BARRING_PASSWORD));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SetBarringPassword_1100
 * @tc.name   : testV1SetBarringPassword009
 * @tc.desc   : Call the function V1 SetBarringPassword with fac and a value of 0
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetBarringPassword009, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SetBarringInfo setBarringInfo = {};
    setBarringInfo.fac = "0";
    setBarringInfo.oldPassword = "1234";
    setBarringInfo.newPassword = "2345";
    int32_t ret = g_rilInterface->SetBarringPassword(SLOTID_1, GetSerialId(), setBarringInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_SET_BARRING_PASSWORD));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SetBarringPassword_1200
 * @tc.name   : testV1SetBarringPassword010
 * @tc.desc   : Call the function V1 SetBarringPassword with fac and a value of -AB
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetBarringPassword010, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SetBarringInfo setBarringInfo = {};
    setBarringInfo.fac = "-AB";
    setBarringInfo.oldPassword = "1234";
    setBarringInfo.newPassword = "2345";
    int32_t ret = g_rilInterface->SetBarringPassword(SLOTID_1, GetSerialId(), setBarringInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_SET_BARRING_PASSWORD));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SetBarringPassword_1300
 * @tc.name   : testV1SetBarringPassword011
 * @tc.desc   : Call the function V1 SetBarringPassword with oldPassword and a value of 0
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetBarringPassword011, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SetBarringInfo setBarringInfo = {};
    setBarringInfo.fac = "AB";
    setBarringInfo.oldPassword = "0";
    setBarringInfo.newPassword = "2345";
    int32_t ret = g_rilInterface->SetBarringPassword(SLOTID_1, GetSerialId(), setBarringInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_SET_BARRING_PASSWORD));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SetBarringPassword_1400
 * @tc.name   : testV1SetBarringPassword012
 * @tc.desc   : Call the function V1 SetBarringPassword with oldPassword and a value of 1qaz!QAZ
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetBarringPassword012, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SetBarringInfo setBarringInfo = {};
    setBarringInfo.fac = "AB";
    setBarringInfo.oldPassword = "1qaz!QAZ";
    setBarringInfo.newPassword = "2345";
    int32_t ret = g_rilInterface->SetBarringPassword(SLOTID_1, GetSerialId(), setBarringInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_SET_BARRING_PASSWORD));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SetBarringPassword_1500
 * @tc.name   : testV1SetBarringPassword013
 * @tc.desc   : Call the function V1 SetBarringPassword with oldPassword and a value of -1234
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetBarringPassword013, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SetBarringInfo setBarringInfo = {};
    setBarringInfo.fac = "AB";
    setBarringInfo.oldPassword = "-1234";
    setBarringInfo.newPassword = "2345";
    int32_t ret = g_rilInterface->SetBarringPassword(SLOTID_1, GetSerialId(), setBarringInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_SET_BARRING_PASSWORD));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SetBarringPassword_1600
 * @tc.name   : testV1SetBarringPassword014
 * @tc.desc   : Call the function V1 SetBarringPassword with newPassword and a value of 0
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetBarringPassword014, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SetBarringInfo setBarringInfo = {};
    setBarringInfo.fac = "AB";
    setBarringInfo.oldPassword = "1234";
    setBarringInfo.newPassword = "0";
    int32_t ret = g_rilInterface->SetBarringPassword(SLOTID_1, GetSerialId(), setBarringInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_SET_BARRING_PASSWORD));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SetBarringPassword_1700
 * @tc.name   : testV1SetBarringPassword015
 * @tc.desc   : Call the function V1 SetBarringPassword with newPassword and a value of 1qaz!QAZ
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetBarringPassword015, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SetBarringInfo setBarringInfo = {};
    setBarringInfo.fac = "AB";
    setBarringInfo.oldPassword = "1234";
    setBarringInfo.newPassword = "1qaz!QAZ";
    int32_t ret = g_rilInterface->SetBarringPassword(SLOTID_1, GetSerialId(), setBarringInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_SET_BARRING_PASSWORD));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SetBarringPassword_1800
 * @tc.name   : testV1SetBarringPassword016
 * @tc.desc   : Call the function V1 SetBarringPassword with newPassword and a value of -2345
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetBarringPassword016, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SetBarringInfo setBarringInfo = {};
    setBarringInfo.fac = "AB";
    setBarringInfo.oldPassword = "1234";
    setBarringInfo.newPassword = "-2345";
    int32_t ret = g_rilInterface->SetBarringPassword(SLOTID_1, GetSerialId(), setBarringInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_SET_BARRING_PASSWORD));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1GetEmergencyCallList_0300
 * @tc.name   : testV1GetEmergencyCallList001
 * @tc.desc   : Call the function V1 GetEmergencyCallList with slotId and a value of 2
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetEmergencyCallList001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->GetEmergencyCallList(2, GetSerialId());
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_GET_EMERGENCY_LIST));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1GetEmergencyCallList_0400
 * @tc.name   : testV1GetEmergencyCallList002
 * @tc.desc   : Call the function V1 GetEmergencyCallList with slotId and a value of 256
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetEmergencyCallList002, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->GetEmergencyCallList(256, GetSerialId());
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_GET_EMERGENCY_LIST));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1GetEmergencyCallList_0500
 * @tc.name   : testV1GetEmergencyCallList003
 * @tc.desc   : Call the function V1 GetEmergencyCallList with slotId and a value of -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetEmergencyCallList003, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->GetEmergencyCallList(-1, GetSerialId());
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_GET_EMERGENCY_LIST));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1GetEmergencyCallList_0600
 * @tc.name   : testV1GetEmergencyCallList004
 * @tc.desc   : Call the function V1 GetEmergencyCallList with serialId and a value of -11111
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetEmergencyCallList004, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->GetEmergencyCallList(SLOTID_1, -11111);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_GET_EMERGENCY_LIST));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1GetEmergencyCallList_0700
 * @tc.name   : testV1GetEmergencyCallList005
 * @tc.desc   : Call the function V1 GetEmergencyCallList with serialId and a value of 0
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetEmergencyCallList005, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->GetEmergencyCallList(SLOTID_1, 0);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_GET_EMERGENCY_LIST));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1GetEmergencyCallList_0800
 * @tc.name   : testV1GetEmergencyCallList006
 * @tc.desc   : Call the function V1 GetEmergencyCallList with serialId and a value of 11111
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetEmergencyCallList006, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->GetEmergencyCallList(SLOTID_1, 11111);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_GET_EMERGENCY_LIST));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1GetEmergencyCallList_0900
 * @tc.name   : testV1GetEmergencyCallList007
 * @tc.desc   : Call the function V1 GetEmergencyCallList with serialId and a value of 32768
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetEmergencyCallList007, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->GetEmergencyCallList(SLOTID_1, 32768);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_GET_EMERGENCY_LIST));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1GetEmergencyCallList_1000
 * @tc.name   : testV1GetEmergencyCallList008
 * @tc.desc   : Call the function V1 GetEmergencyCallList with serialId and a value of -32768
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetEmergencyCallList008, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->GetEmergencyCallList(SLOTID_1, -32768);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_GET_EMERGENCY_LIST));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1GetCallList_0300
 * @tc.name   : testV1GetCallList001
 * @tc.desc   : Call the function V1 GetCallList with slotId and a value of 2
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetCallList001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->GetCallList(2, GetSerialId());
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_GET_CALL_LIST));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1GetCallList_0400
 * @tc.name   : testV1GetCallList002
 * @tc.desc   : Call the function V1 GetCallList with slotId and a value of 256
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetCallList002, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->GetCallList(256, GetSerialId());
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_GET_CALL_LIST));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1GetCallList_0500
 * @tc.name   : testV1GetCallList003
 * @tc.desc   : Call the function V1 GetCallList with slotId and a value of -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetCallList003, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->GetCallList(-1, GetSerialId());
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_GET_CALL_LIST));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1GetCallList_0600
 * @tc.name   : testV1GetCallList004
 * @tc.desc   : Call the function V1 GetCallList with serialId and a value of -11111
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetCallList004, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->GetCallList(SLOTID_1, -11111);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_GET_CALL_LIST));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1GetCallList_0700
 * @tc.name   : testV1GetCallList005
 * @tc.desc   : Call the function V1 GetCallList with serialId and a value of 0
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetCallList005, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->GetCallList(SLOTID_1, 0);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_GET_CALL_LIST));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1GetCallList_0800
 * @tc.name   : testV1GetCallList006
 * @tc.desc   : Call the function V1 GetCallList with serialId and a value of 11111
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetCallList006, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->GetCallList(SLOTID_1, 11111);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_GET_CALL_LIST));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1GetCallList_0900
 * @tc.name   : testV1GetCallList007
 * @tc.desc   : Call the function V1 GetCallList with serialId and a value of 32768
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetCallList007, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->GetCallList(SLOTID_1, 32768);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_GET_CALL_LIST));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1GetCallList_1000
 * @tc.name   : testV1GetCallList008
 * @tc.desc   : Call the function V1 GetCallList with serialId and a value of -32768
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetCallList008, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->GetCallList(SLOTID_1, -32768);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1Dial_0300
 * @tc.name   : testV1Dial001
 * @tc.desc   : Call the function V1 Dial with slotId and a value of 2
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1Dial001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    DialInfo dialInfo = {};
    dialInfo.address = "10086";
    dialInfo.clir = 0;
    int32_t ret = g_rilInterface->Dial(2, GetSerialId(), dialInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_DIAL));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1Dial_0400
 * @tc.name   : testV1Dial002
 * @tc.desc   : Call the function V1 Dial with slotId and a value of 256
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1Dial002, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    DialInfo dialInfo = {};
    dialInfo.address = "10086";
    dialInfo.clir = 0;
    int32_t ret = g_rilInterface->Dial(256, GetSerialId(), dialInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_DIAL));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1Dial_0500
 * @tc.name   : testV1Dial003
 * @tc.desc   : Call the function V1 Dial with slotId and a value of -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1Dial003, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    DialInfo dialInfo = {};
    dialInfo.address = "10086";
    dialInfo.clir = 0;
    int32_t ret = g_rilInterface->Dial(-1, GetSerialId(), dialInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_DIAL));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1Dial_0600
 * @tc.name   : testV1Dial004
 * @tc.desc   : Call the function V1 Dial with serialId and a value of -11111
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1Dial004, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    DialInfo dialInfo = {};
    dialInfo.address = "10086";
    dialInfo.clir = 0;
    int32_t ret = g_rilInterface->Dial(SLOTID_1, -11111, dialInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_DIAL));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1Dial_0700
 * @tc.name   : testV1Dial005
 * @tc.desc   : Call the function V1 Dial with serialId and a value of 0
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1Dial005, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    DialInfo dialInfo = {};
    dialInfo.address = "10086";
    dialInfo.clir = 0;
    int32_t ret = g_rilInterface->Dial(SLOTID_1, 0, dialInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_DIAL));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1Dial_0800
 * @tc.name   : testV1Dial006
 * @tc.desc   : Call the function V1 Dial with serialId and a value of 11111
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1Dial006, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    DialInfo dialInfo = {};
    dialInfo.address = "10086";
    dialInfo.clir = 0;
    int32_t ret = g_rilInterface->Dial(SLOTID_1, 11111, dialInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_DIAL));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1Dial_0900
 * @tc.name   : testV1Dial007
 * @tc.desc   : Call the function V1 Dial with serialId and a value of 32768
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1Dial007, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    DialInfo dialInfo = {};
    dialInfo.address = "10086";
    dialInfo.clir = 0;
    int32_t ret = g_rilInterface->Dial(SLOTID_1, 32768, dialInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_DIAL));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1Dial_1000
 * @tc.name   : testV1Dial008
 * @tc.desc   : Call the function V1 Dial with serialId and a value of -32768
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1Dial008, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    DialInfo dialInfo = {};
    dialInfo.address = "10086";
    dialInfo.clir = 0;
    int32_t ret = g_rilInterface->Dial(SLOTID_1, -32768, dialInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_DIAL));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1Dial_1100
 * @tc.name   : testV1Dial009
 * @tc.desc   : Call the function V1 Dial with dialInfo.clir and a value of 1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1Dial009, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    DialInfo dialInfo = {};
    dialInfo.address = "10086";
    dialInfo.clir = 1;
    int32_t ret = g_rilInterface->Dial(SLOTID_1, GetSerialId(), dialInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_DIAL));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1Dial_1200
 * @tc.name   : testV1Dial010
 * @tc.desc   : Call the function V1 Dial with dialInfo.clir and a value of 2
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1Dial010, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    DialInfo dialInfo = {};
    dialInfo.address = "10086";
    dialInfo.clir = 2;
    int32_t ret = g_rilInterface->Dial(SLOTID_1, GetSerialId(), dialInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_DIAL));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1Dial_1300
 * @tc.name   : testV1Dial011
 * @tc.desc   : Call the function V1 Dial with dialInfo.address and a value of -10086
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1Dial011, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    DialInfo dialInfo = {};
    dialInfo.address = "-10086";
    dialInfo.clir = 0;
    int32_t ret = g_rilInterface->Dial(SLOTID_1, GetSerialId(), dialInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1Dial_1400
 * @tc.name   : testV1Dial012
 * @tc.desc   : Call the function V1 Dial with dialInfo.address and a value of 0
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1Dial012, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    DialInfo dialInfo = {};
    dialInfo.address = "0";
    dialInfo.clir = 0;
    int32_t ret = g_rilInterface->Dial(SLOTID_1, GetSerialId(), dialInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_DIAL));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1Reject_0300
 * @tc.name   : testV1Reject001
 * @tc.desc   : Call the function V1 Reject with slotId and a value of 2
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1Reject001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->Reject(2, GetSerialId());
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_REJECT));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1Reject_0400
 * @tc.name   : testV1Reject002
 * @tc.desc   : Call the function V1 Reject with slotId and a value of 256
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1Reject002, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->Reject(256, GetSerialId());
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_REJECT));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1Reject_0500
 * @tc.name   : testV1Reject003
 * @tc.desc   : Call the function V1 Reject with slotId and a value of -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1Reject003, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->Reject(-1, GetSerialId());
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_REJECT));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1Reject_0600
 * @tc.name   : testV1Reject004
 * @tc.desc   : Call the function V1 Reject with serialId and a value of -11111
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1Reject004, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->Reject(SLOTID_1, -11111);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_REJECT));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1Reject_0700
 * @tc.name   : testV1Reject005
 * @tc.desc   : Call the function V1 Reject with serialId and a value of 0
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1Reject005, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->Reject(SLOTID_1, 0);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_REJECT));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1Reject_0800
 * @tc.name   : testV1Reject006
 * @tc.desc   : Call the function V1 Reject with serialId and a value of 11111
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1Reject006, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->Reject(SLOTID_1, 11111);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_REJECT));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1Reject_0900
 * @tc.name   : testV1Reject007
 * @tc.desc   : Call the function V1 Reject with serialId and a value of 32768
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1Reject007, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->Reject(SLOTID_1, 32768);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_REJECT));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1Reject_1000
 * @tc.name   : testV1Reject008
 * @tc.desc   : Call the function V1 Reject with serialId and a value of -32768
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1Reject008, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->Reject(SLOTID_1, -32768);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_REJECT));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1Hangup_0300
 * @tc.name   : testV1Hangup001
 * @tc.desc   : Call the function V1 Hangup with slotId and a value of 2
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1Hangup001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->Hangup(2, GetSerialId(), 0);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_HANGUP));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1Hangup_0400
 * @tc.name   : testV1Hangup002
 * @tc.desc   : Call the function V1 Hangup with slotId and a value of 256
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1Hangup002, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->Hangup(256, GetSerialId(), 0);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_HANGUP));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1Hangup_0500
 * @tc.name   : testV1Hangup003
 * @tc.desc   : Call the function V1 Hangup with slotId and a value of -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1Hangup003, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->Hangup(-1, GetSerialId(), 0);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_HANGUP));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1Hangup_0600
 * @tc.name   : testV1Hangup004
 * @tc.desc   : Call the function V1 Hangup with serialId and a value of -11111
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1Hangup004, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->Hangup(SLOTID_1, -11111, 0);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_HANGUP));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1Hangup_0700
 * @tc.name   : testV1Hangup005
 * @tc.desc   : Call the function V1 Hangup with serialId and a value of 0
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1Hangup005, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->Hangup(SLOTID_1, 0, 0);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_HANGUP));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1Hangup_0800
 * @tc.name   : testV1Hangup006
 * @tc.desc   : Call the function V1 Hangup with serialId and a value of 11111
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1Hangup006, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->Hangup(SLOTID_1, 11111, 0);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_HANGUP));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1Hangup_0900
 * @tc.name   : testV1Hangup007
 * @tc.desc   : Call the function V1 Hangup with serialId and a value of 32768
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1Hangup007, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->Hangup(SLOTID_1, 32768, 0);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_HANGUP));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1Hangup_1000
 * @tc.name   : testV1Hangup008
 * @tc.desc   : Call the function V1 Hangup with serialId and a value of -32768
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1Hangup008, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->Hangup(SLOTID_1, -32768, 0);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_HANGUP));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1Hangup_1100
 * @tc.name   : testV1Hangup009
 * @tc.desc   : Call the function V1 Hangup with callId and a value of 1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1Hangup009, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->Hangup(SLOTID_1, GetSerialId(), 1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_HANGUP));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1Hangup_1100
 * @tc.name   : testV1Hangup010
 * @tc.desc   : Call the function V1 Hangup with callId and a value of -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1Hangup010, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->Hangup(SLOTID_1, GetSerialId(), -1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1Hangup_1200
 * @tc.name   : testV1Hangup011
 * @tc.desc   : Call the function V1 Hangup with callId and a value of 255
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1Hangup011, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->Hangup(SLOTID_1, GetSerialId(), 255);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_HANGUP));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1Hangup_1400
 * @tc.name   : testV1Hangup012
 * @tc.desc   : Call the function V1 Hangup with callId and a value of -255
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1Hangup012, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->Hangup(SLOTID_1, GetSerialId(), -255);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_HANGUP));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1Answer_0300
 * @tc.name   : testV1Answer001
 * @tc.desc   : Call the function V1 Answer with slotId and a value of 2
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1Answer001, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->Answer(2, GetSerialId());
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1Answer_0400
 * @tc.name   : testV1Answer002
 * @tc.desc   : Call the function V1 Answer with slotId and a value of 256
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1Answer002, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->Answer(256, GetSerialId());
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_ANSWER));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1Answer_0500
 * @tc.name   : testV1Answer003
 * @tc.desc   : Call the function V1 Answer with slotId and a value of -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1Answer003, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->Answer(-1, GetSerialId());
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_ANSWER));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1Answer_0600
 * @tc.name   : testV1Answer004
 * @tc.desc   : Call the function V1 Answer with serialId and a value of -11111
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1Answer004, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->Answer(SLOTID_1, -11111);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_ANSWER));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1Answer_0700
 * @tc.name   : testV1Answer005
 * @tc.desc   : Call the function V1 Answer with serialId and a value of 0
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1Answer005, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->Answer(SLOTID_1, 0);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_ANSWER));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1Answer_0800
 * @tc.name   : testV1Answer006
 * @tc.desc   : Call the function V1 Answer with serialId and a value of 11111
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1Answer006, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->Answer(SLOTID_1, 11111);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_ANSWER));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1Answer_0900
 * @tc.name   : testV1Answer007
 * @tc.desc   : Call the function V1 Answer with serialId and a value of 32768
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1Answer007, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->Answer(SLOTID_1, 32768);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_ANSWER));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1Answer_1000
 * @tc.name   : testV1Answer008
 * @tc.desc   : Call the function V1 Answer with serialId and a value of -32768
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1Answer008, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->Answer(SLOTID_1, -32768);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_ANSWER));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1HoldCall_0300
 * @tc.name   : testV1HoldCall001
 * @tc.desc   : Call the function V1 HoldCall with slotId and a value of 2
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1HoldCall001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->HoldCall(2, GetSerialId());
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_HOLD_CALL));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1HoldCall_0400
 * @tc.name   : testV1HoldCall002
 * @tc.desc   : Call the function V1 HoldCall with slotId and a value of 256
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1HoldCall002, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->HoldCall(256, GetSerialId());
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_HOLD_CALL));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1HoldCall_0500
 * @tc.name   : testV1HoldCall003
 * @tc.desc   : Call the function V1 HoldCall with slotId and a value of -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1HoldCall003, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->HoldCall(-1, GetSerialId());
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_HOLD_CALL));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1HoldCall_0600
 * @tc.name   : testV1HoldCall004
 * @tc.desc   : Call the function V1 HoldCall with serialId and a value of -11111
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1HoldCall004, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->HoldCall(SLOTID_1, -11111);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_HOLD_CALL));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1HoldCall_0700
 * @tc.name   : testV1HoldCall005
 * @tc.desc   : Call the function V1 HoldCall with serialId and a value of 0
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1HoldCall005, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->HoldCall(SLOTID_1, 0);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_HOLD_CALL));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1HoldCall_0800
 * @tc.name   : testV1HoldCall006
 * @tc.desc   : Call the function V1 HoldCall with serialId and a value of 11111
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1HoldCall006, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->HoldCall(SLOTID_1, 11111);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_HOLD_CALL));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1HoldCall_0900
 * @tc.name   : testV1HoldCall007
 * @tc.desc   : Call the function V1 HoldCall with serialId and a value of 32768
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1HoldCall007, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->HoldCall(SLOTID_1, 32768);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_HOLD_CALL));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1HoldCall_1000
 * @tc.name   : testV1HoldCall008
 * @tc.desc   : Call the function V1 HoldCall with serialId and a value of -32768
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1HoldCall008, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->HoldCall(SLOTID_1, -32768);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_HOLD_CALL));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1UnHoldCall_0300
 * @tc.name   : testV1UnHoldCall001
 * @tc.desc   : Call the function V1 UnHoldCall with slotId and a value of 2
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1UnHoldCall001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->UnHoldCall(2, GetSerialId());
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_UNHOLD_CALL));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1UnHoldCall_0400
 * @tc.name   : testV1UnHoldCall002
 * @tc.desc   : Call the function V1 UnHoldCall with slotId and a value of 256
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1UnHoldCall002, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->UnHoldCall(256, GetSerialId());
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_UNHOLD_CALL));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1UnHoldCall_0500
 * @tc.name   : testV1UnHoldCall003
 * @tc.desc   : Call the function V1 UnHoldCall with slotId and a value of -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1UnHoldCall003, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->UnHoldCall(-1, GetSerialId());
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_UNHOLD_CALL));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1UnHoldCall_0600
 * @tc.name   : testV1UnHoldCall004
 * @tc.desc   : Call the function V1 UnHoldCall with serialId and a value of -11111
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1UnHoldCall004, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->UnHoldCall(SLOTID_1, -11111);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_UNHOLD_CALL));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1UnHoldCall_0700
 * @tc.name   : testV1UnHoldCall005
 * @tc.desc   : Call the function V1 UnHoldCall with serialId and a value of 0
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1UnHoldCall005, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->UnHoldCall(SLOTID_1, 0);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_UNHOLD_CALL));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1UnHoldCall_0800
 * @tc.name   : testV1UnHoldCall006
 * @tc.desc   : Call the function V1 UnHoldCall with serialId and a value of 11111
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1UnHoldCall006, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->UnHoldCall(SLOTID_1, 11111);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_UNHOLD_CALL));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1UnHoldCall_0900
 * @tc.name   : testV1UnHoldCall007
 * @tc.desc   : Call the function V1 UnHoldCall with serialId and a value of 32768
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1UnHoldCall007, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->UnHoldCall(SLOTID_1, 32768);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_UNHOLD_CALL));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1UnHoldCall_1000
 * @tc.name   : testV1UnHoldCall008
 * @tc.desc   : Call the function V1 UnHoldCall with serialId and a value of -32768
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1UnHoldCall008, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->UnHoldCall(SLOTID_1, -32768);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_UNHOLD_CALL));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SwitchCall_0300
 * @tc.name   : testV1SwitchCall001
 * @tc.desc   : Call the function V1 SwitchCall with slotId and a value of 2
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SwitchCall001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SwitchCall(2, GetSerialId());
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_SWITCH_CALL));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SwitchCall_0400
 * @tc.name   : testV1SwitchCall002
 * @tc.desc   : Call the function V1 SwitchCall with slotId and a value of 256
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SwitchCall002, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SwitchCall(256, GetSerialId());
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_SWITCH_CALL));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SwitchCall_0500
 * @tc.name   : testV1SwitchCall003
 * @tc.desc   : Call the function V1 SwitchCall with slotId and a value of -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SwitchCall003, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SwitchCall(-1, GetSerialId());
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_SWITCH_CALL));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SwitchCall_0600
 * @tc.name   : testV1SwitchCall004
 * @tc.desc   : Call the function V1 SwitchCall with serialId and a value of -11111
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SwitchCall004, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SwitchCall(SLOTID_1, -11111);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_SWITCH_CALL));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SwitchCall_0700
 * @tc.name   : testV1SwitchCall005
 * @tc.desc   : Call the function V1 SwitchCall with serialId and a value of 0
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SwitchCall005, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SwitchCall(SLOTID_1, 0);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_SWITCH_CALL));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SwitchCall_0800
 * @tc.name   : testV1SwitchCall006
 * @tc.desc   : Call the function V1 SwitchCall with serialId and a value of 11111
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SwitchCall006, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SwitchCall(SLOTID_1, 11111);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_SWITCH_CALL));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SwitchCall_0900
 * @tc.name   : testV1SwitchCall007
 * @tc.desc   : Call the function V1 SwitchCall with serialId and a value of 32768
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SwitchCall007, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SwitchCall(SLOTID_1, 32768);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_SWITCH_CALL));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SwitchCall_1000
 * @tc.name   : testV1SwitchCall008
 * @tc.desc   : Call the function V1 SwitchCall with serialId and a value of -32768
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SwitchCall008, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SwitchCall(SLOTID_1, -32768);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_SWITCH_CALL));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1CombineConference_0300
 * @tc.name   : testV1CombineConference001
 * @tc.desc   : Call the function V1 CombineConference with slotId and a value of 2
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1CombineConference001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->CombineConference(2, GetSerialId(), 0);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_COMBINE_CONFERENCE));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1CombineConference_0400
 * @tc.name   : testV1CombineConference002
 * @tc.desc   : Call the function V1 CombineConference with slotId and a value of 256
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1CombineConference002, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->CombineConference(256, GetSerialId(), 0);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_COMBINE_CONFERENCE));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1CombineConference_0500
 * @tc.name   : testV1CombineConference003
 * @tc.desc   : Call the function V1 CombineConference with slotId and a value of -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1CombineConference003, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->CombineConference(-1, GetSerialId(), 0);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_COMBINE_CONFERENCE));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1CombineConference_0600
 * @tc.name   : testV1CombineConference004
 * @tc.desc   : Call the function V1 CombineConference with serialId and a value of -11111
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1CombineConference004, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->CombineConference(SLOTID_1, -11111, 0);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_COMBINE_CONFERENCE));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1CombineConference_0700
 * @tc.name   : testV1CombineConference005
 * @tc.desc   : Call the function V1 CombineConference with serialId and a value of 0
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1CombineConference005, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->CombineConference(SLOTID_1, 0, 0);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_COMBINE_CONFERENCE));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1CombineConference_0800
 * @tc.name   : testV1CombineConference006
 * @tc.desc   : Call the function V1 CombineConference with serialId and a value of 11111
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1CombineConference006, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->CombineConference(SLOTID_1, 11111, 0);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_COMBINE_CONFERENCE));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1CombineConference_0900
 * @tc.name   : testV1CombineConference007
 * @tc.desc   : Call the function V1 CombineConference with serialId and a value of 32768
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1CombineConference007, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->CombineConference(SLOTID_1, 32768, 0);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_COMBINE_CONFERENCE));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1CombineConference_1000
 * @tc.name   : testV1CombineConference008
 * @tc.desc   : Call the function V1 CombineConference with serialId and a value of -32768
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1CombineConference008, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->CombineConference(SLOTID_1, -32768, 0);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_COMBINE_CONFERENCE));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1CombineConference_1100
 * @tc.name   : testV1CombineConference009
 * @tc.desc   : Call the function V1 CombineConference with serialId and a value of -32768
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1CombineConference009, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->CombineConference(SLOTID_1, GetSerialId(), -1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SeparateConference_0300
 * @tc.name   : testV1SeparateConference001
 * @tc.desc   : Call the function V1 SeparateConference with slotId and a value of 2
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SeparateConference001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SeparateConference(2, GetSerialId(), 1, 0);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_SEPARATE_CONFERENCE));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SeparateConference_0400
 * @tc.name   : testV1SeparateConference002
 * @tc.desc   : Call the function V1 SeparateConference with slotId and a value of 256
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SeparateConference002, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SeparateConference(256, GetSerialId(), 1, 0);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_SEPARATE_CONFERENCE));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SeparateConference_0500
 * @tc.name   : testV1SeparateConference003
 * @tc.desc   : Call the function V1 SeparateConference with slotId and a value of -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SeparateConference003, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SeparateConference(-1, GetSerialId(), 1, 0);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_SEPARATE_CONFERENCE));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SeparateConference_0600
 * @tc.name   : testV1SeparateConference004
 * @tc.desc   : Call the function V1 SeparateConference with serialId and a value of -11111
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SeparateConference004, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SeparateConference(SLOTID_1, -11111, 1, 0);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_SEPARATE_CONFERENCE));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SeparateConference_0600
 * @tc.name   : testV1SeparateConference005
 * @tc.desc   : Call the function V1 SeparateConference with serialId and a value of 0
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SeparateConference005, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SeparateConference(SLOTID_1, 0, 1, 0);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_SEPARATE_CONFERENCE));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SeparateConference_0800
 * @tc.name   : testV1SeparateConference006
 * @tc.desc   : Call the function V1 SeparateConference with serialId and a value of 11111
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SeparateConference006, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SeparateConference(SLOTID_1, 11111, 1, 0);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_SEPARATE_CONFERENCE));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SeparateConference_0900
 * @tc.name   : testV1SeparateConference007
 * @tc.desc   : Call the function V1 SeparateConference with serialId and a value of 32768
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SeparateConference007, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SeparateConference(SLOTID_1, 32768, 1, 0);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_SEPARATE_CONFERENCE));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SeparateConference_1000
 * @tc.name   : testV1SeparateConference008
 * @tc.desc   : Call the function V1 SeparateConference with serialId and a value of -32768
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SeparateConference008, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SeparateConference(SLOTID_1, -32768, 1, 0);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_SEPARATE_CONFERENCE));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SeparateConference_1100
 * @tc.name   : testV1SeparateConference009
 * @tc.desc   : Call the function V1 SeparateConference with callId and a value of 0
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SeparateConference009, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SeparateConference(SLOTID_1, GetSerialId(), 0, 0);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_SEPARATE_CONFERENCE));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SeparateConference_1200
 * @tc.name   : testV1SeparateConference010
 * @tc.desc   : Call the function V1 SeparateConference with callId and a value of -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SeparateConference010, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SeparateConference(SLOTID_1, GetSerialId(), -1, 0);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SeparateConference_1300
 * @tc.name   : testV1SeparateConference011
 * @tc.desc   : Call the function V1 SeparateConference with callId and a value of 255
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SeparateConference011, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SeparateConference(SLOTID_1, GetSerialId(), 255, 0);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_SEPARATE_CONFERENCE));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SeparateConference_1400
 * @tc.name   : testV1SeparateConference012
 * @tc.desc   : Call the function V1 SeparateConference with callId and a value of -255
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SeparateConference012, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SeparateConference(SLOTID_1, GetSerialId(), -255, 0);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SeparateConference_1500
 * @tc.name   : testV1SeparateConference013
 * @tc.desc   : Call the function V1 SeparateConference with callType and a value of -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SeparateConference013, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SeparateConference(SLOTID_1, GetSerialId(), 1, -1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1GetCallWaiting_0300
 * @tc.name   : testV1GetCallWaiting001
 * @tc.desc   : Call the function V1 GetCallWaiting with slotId and a value of 2
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetCallWaiting001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->GetCallWaiting(2, GetSerialId());
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_GET_CALL_WAITING));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1GetCallWaiting_0400
 * @tc.name   : testV1GetCallWaiting002
 * @tc.desc   : Call the function V1 GetCallWaiting with slotId and a value of 256
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetCallWaiting002, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->GetCallWaiting(256, GetSerialId());
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_GET_CALL_WAITING));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1GetCallWaiting_0500
 * @tc.name   : testV1GetCallWaiting003
 * @tc.desc   : Call the function V1 GetCallWaiting with slotId and a value of -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetCallWaiting003, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->GetCallWaiting(-1, GetSerialId());
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_GET_CALL_WAITING));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1GetCallWaiting_0600
 * @tc.name   : testV1GetCallWaiting004
 * @tc.desc   : Call the function V1 GetCallWaiting with serialId and a value of -11111
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetCallWaiting004, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->GetCallWaiting(SLOTID_1, -11111);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_GET_CALL_WAITING));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1GetCallWaiting_0700
 * @tc.name   : testV1GetCallWaiting005
 * @tc.desc   : Call the function V1 GetCallWaiting with serialId and a value of 0
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetCallWaiting005, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->GetCallWaiting(SLOTID_1, 0);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_GET_CALL_WAITING));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1GetCallWaiting_0800
 * @tc.name   : testV1GetCallWaiting006
 * @tc.desc   : Call the function V1 GetCallWaiting with serialId and a value of 11111
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetCallWaiting006, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->GetCallWaiting(SLOTID_1, 11111);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_GET_CALL_WAITING));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1GetCallWaiting_0900
 * @tc.name   : testV1GetCallWaiting007
 * @tc.desc   : Call the function V1 GetCallWaiting with serialId and a value of 32768
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetCallWaiting007, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->GetCallWaiting(SLOTID_1, 32768);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_GET_CALL_WAITING));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1GetCallWaiting_1000
 * @tc.name   : testV1GetCallWaiting008
 * @tc.desc   : Call the function V1 GetCallWaiting with serialId and a value of -32768
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetCallWaiting008, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->GetCallWaiting(SLOTID_1, -32768);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_GET_CALL_WAITING));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SetCallWaiting_0300
 * @tc.name   : testV1SetCallWaiting001
 * @tc.desc   : Call the function V1 SetCallWaiting with slotId and a value of 2
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetCallWaiting001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SetCallWaiting(2, GetSerialId(), 0);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_SET_CALL_WAITING));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SetCallWaiting_0400
 * @tc.name   : testV1SetCallWaiting002
 * @tc.desc   : Call the function V1 SetCallWaiting with slotId and a value of 256
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetCallWaiting002, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SetCallWaiting(256, GetSerialId(), 0);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_SET_CALL_WAITING));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SetCallWaiting_0500
 * @tc.name   : testV1SetCallWaiting003
 * @tc.desc   : Call the function V1 SetCallWaiting with slotId and a value of -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetCallWaiting003, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SetCallWaiting(-1, GetSerialId(), 0);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_SET_CALL_WAITING));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SetCallWaiting_0600
 * @tc.name   : testV1SetCallWaiting004
 * @tc.desc   : Call the function V1 SetCallWaiting with serialId and a value of -11111
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetCallWaiting004, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SetCallWaiting(SLOTID_1, -11111, 0);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_SET_CALL_WAITING));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SetCallWaiting_0700
 * @tc.name   : testV1SetCallWaiting005
 * @tc.desc   : Call the function V1 SetCallWaiting with serialId and a value of 0
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetCallWaiting005, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SetCallWaiting(SLOTID_1, 0, 0);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_SET_CALL_WAITING));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SetCallWaiting_0800
 * @tc.name   : testV1SetCallWaiting006
 * @tc.desc   : Call the function V1 SetCallWaiting with serialId and a value of 11111
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetCallWaiting006, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SetCallWaiting(SLOTID_1, 11111, 0);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_SET_CALL_WAITING));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SetCallWaiting_0900
 * @tc.name   : testV1SetCallWaiting007
 * @tc.desc   : Call the function V1 SetCallWaiting with serialId and a value of 32768
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetCallWaiting007, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SetCallWaiting(SLOTID_1, 32768, 0);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_SET_CALL_WAITING));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SetCallWaiting_1000
 * @tc.name   : testV1SetCallWaiting008
 * @tc.desc   : Call the function V1 SetCallWaiting with serialId and a value of -32768
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetCallWaiting008, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SetCallWaiting(SLOTID_1, -32768, 0);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_SET_CALL_WAITING));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SetCallWaiting_1100
 * @tc.name   : testV1SetCallWaiting009
 * @tc.desc   : Call the function V1 SetCallWaiting with activate  and a value of 1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetCallWaiting009, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SetCallWaiting(SLOTID_1, GetSerialId(), 1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_SET_CALL_WAITING));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SetCallWaiting_1200
 * @tc.name   : testV1SetCallWaiting010
 * @tc.desc   : Call the function V1 SetCallWaiting with activate  and a value of -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetCallWaiting010, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SetCallWaiting(SLOTID_1, GetSerialId(), -1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SetCallWaiting_1300
 * @tc.name   : testV1SetCallWaiting011
 * @tc.desc   : Call the function V1 SetCallWaiting with activate  and a value of 255
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetCallWaiting011, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SetCallWaiting(SLOTID_1, GetSerialId(), 255);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_SET_CALL_WAITING));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SetCallWaiting_1400
 * @tc.name   : testV1SetCallWaiting012
 * @tc.desc   : Call the function V1 SetCallWaiting with activate  and a value of -255
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetCallWaiting012, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SetCallWaiting(SLOTID_1, GetSerialId(), -255);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1GetCallTransferInfo_0300
 * @tc.name   : testV1GetCallTransferInfo001
 * @tc.desc   : Call the function V1 GetCallTransferInfo with slotId  and a value of 2
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetCallTransferInfo001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->GetCallTransferInfo(2, GetSerialId(), 1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_GET_CALL_TRANSFER_INFO));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1GetCallTransferInfo_0400
 * @tc.name   : testV1GetCallTransferInfo002
 * @tc.desc   : Call the function V1 GetCallTransferInfo with slotId  and a value of 256
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetCallTransferInfo002, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->GetCallTransferInfo(256, GetSerialId(), 1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_GET_CALL_TRANSFER_INFO));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1GetCallTransferInfo_0500
 * @tc.name   : testV1GetCallTransferInfo003
 * @tc.desc   : Call the function V1 GetCallTransferInfo with slotId  and a value of -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetCallTransferInfo003, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->GetCallTransferInfo(-1, GetSerialId(), 1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_GET_CALL_TRANSFER_INFO));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1GetCallTransferInfo_0600
 * @tc.name   : testV1GetCallTransferInfo004
 * @tc.desc   : Call the function V1 GetCallTransferInfo with serialId  and a value of -11111
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetCallTransferInfo004, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->GetCallTransferInfo(SLOTID_1, -11111, 1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_GET_CALL_TRANSFER_INFO));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1GetCallTransferInfo_0700
 * @tc.name   : testV1GetCallTransferInfo005
 * @tc.desc   : Call the function V1 GetCallTransferInfo with serialId  and a value of 0
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetCallTransferInfo005, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->GetCallTransferInfo(SLOTID_1, 0, 1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_GET_CALL_TRANSFER_INFO));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1GetCallTransferInfo_0800
 * @tc.name   : testV1GetCallTransferInfo006
 * @tc.desc   : Call the function V1 GetCallTransferInfo with serialId  and a value of 11111
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetCallTransferInfo006, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->GetCallTransferInfo(SLOTID_1, 11111, 1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_GET_CALL_TRANSFER_INFO));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1GetCallTransferInfo_0900
 * @tc.name   : testV1GetCallTransferInfo007
 * @tc.desc   : Call the function V1 GetCallTransferInfo with serialId  and a value of 32768
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetCallTransferInfo007, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->GetCallTransferInfo(SLOTID_1, 32768, 1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_GET_CALL_TRANSFER_INFO));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1GetCallTransferInfo_1000
 * @tc.name   : testV1GetCallTransferInfo008
 * @tc.desc   : Call the function V1 GetCallTransferInfo with serialId  and a value of -32768
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetCallTransferInfo008, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->GetCallTransferInfo(SLOTID_1, -32768, 1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_GET_CALL_TRANSFER_INFO));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1GetCallTransferInfo_1100
 * @tc.name   : testV1GetCallTransferInfo009
 * @tc.desc   : Call the function V1 GetCallTransferInfo with reason  and a value of 0
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetCallTransferInfo009, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->GetCallTransferInfo(SLOTID_1, GetSerialId(), 0);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_GET_CALL_TRANSFER_INFO));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1GetCallTransferInfo_1200
 * @tc.name   : testV1GetCallTransferInfo010
 * @tc.desc   : Call the function V1 GetCallTransferInfo with reason  and a value of 2
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetCallTransferInfo010, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->GetCallTransferInfo(SLOTID_1, GetSerialId(), 2);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_GET_CALL_TRANSFER_INFO));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1GetCallTransferInfo_1300
 * @tc.name   : testV1GetCallTransferInfo011
 * @tc.desc   : Call the function V1 GetCallTransferInfo with reason  and a value of 3
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetCallTransferInfo011, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->GetCallTransferInfo(SLOTID_1, GetSerialId(), 3);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_GET_CALL_TRANSFER_INFO));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1GetCallTransferInfo_1400
 * @tc.name   : testV1GetCallTransferInfo012
 * @tc.desc   : Call the function V1 GetCallTransferInfo with reason  and a value of 4
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetCallTransferInfo012, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->GetCallTransferInfo(SLOTID_1, GetSerialId(), 4);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1GetCallTransferInfo_1500
 * @tc.name   : testV1GetCallTransferInfo013
 * @tc.desc   : Call the function V1 GetCallTransferInfo with reason  and a value of -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetCallTransferInfo013, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->GetCallTransferInfo(SLOTID_1, GetSerialId(), -1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SetCallTransferInfo_0300
 * @tc.name   : testV1SetCallTransferInfo001
 * @tc.desc   : Call the function V1 SetCallTransferInfo with slotId  and a value of 2
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetCallTransferInfo001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    CallForwardSetInfo callForwardSetInfo = {};
    callForwardSetInfo.reason = 1;
    callForwardSetInfo.mode = 1;
    callForwardSetInfo.classx = 1;
    callForwardSetInfo.number = "10086";
    int32_t ret = g_rilInterface->SetCallTransferInfo(2, GetSerialId(), callForwardSetInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_SET_CALL_TRANSFER_INFO));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SetCallTransferInfo_0400
 * @tc.name   : testV1SetCallTransferInfo002
 * @tc.desc   : Call the function V1 SetCallTransferInfo with slotId  and a value of 256
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetCallTransferInfo002, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    CallForwardSetInfo callForwardSetInfo = {};
    callForwardSetInfo.reason = 1;
    callForwardSetInfo.mode = 1;
    callForwardSetInfo.classx = 1;
    callForwardSetInfo.number = "10086";
    int32_t ret = g_rilInterface->SetCallTransferInfo(256, GetSerialId(), callForwardSetInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_SET_CALL_TRANSFER_INFO));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SetCallTransferInfo_0500
 * @tc.name   : testV1SetCallTransferInfo003
 * @tc.desc   : Call the function V1 SetCallTransferInfo with slotId  and a value of -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetCallTransferInfo003, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    CallForwardSetInfo callForwardSetInfo = {};
    callForwardSetInfo.reason = 1;
    callForwardSetInfo.mode = 1;
    callForwardSetInfo.classx = 1;
    callForwardSetInfo.number = "10086";
    int32_t ret = g_rilInterface->SetCallTransferInfo(-1, GetSerialId(), callForwardSetInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_SET_CALL_TRANSFER_INFO));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SetCallTransferInfo_0600
 * @tc.name   : testV1SetCallTransferInfo004
 * @tc.desc   : Call the function V1 SetCallTransferInfo with serialId  and a value of -11111
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetCallTransferInfo004, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    CallForwardSetInfo callForwardSetInfo = {};
    callForwardSetInfo.reason = 1;
    callForwardSetInfo.mode = 1;
    callForwardSetInfo.classx = 1;
    callForwardSetInfo.number = "10086";
    int32_t ret = g_rilInterface->SetCallTransferInfo(SLOTID_1, -11111, callForwardSetInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_SET_CALL_TRANSFER_INFO));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SetCallTransferInfo_0700
 * @tc.name   : testV1SetCallTransferInfo005
 * @tc.desc   : Call the function V1 SetCallTransferInfo with serialId  and a value of 0
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetCallTransferInfo005, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    CallForwardSetInfo callForwardSetInfo = {};
    callForwardSetInfo.reason = 1;
    callForwardSetInfo.mode = 1;
    callForwardSetInfo.classx = 1;
    callForwardSetInfo.number = "10086";
    int32_t ret = g_rilInterface->SetCallTransferInfo(SLOTID_1, 0, callForwardSetInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_SET_CALL_TRANSFER_INFO));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SetCallTransferInfo_0800
 * @tc.name   : testV1SetCallTransferInfo006
 * @tc.desc   : Call the function V1 SetCallTransferInfo with serialId  and a value of 11111
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetCallTransferInfo006, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    CallForwardSetInfo callForwardSetInfo = {};
    callForwardSetInfo.reason = 1;
    callForwardSetInfo.mode = 1;
    callForwardSetInfo.classx = 1;
    callForwardSetInfo.number = "10086";
    int32_t ret = g_rilInterface->SetCallTransferInfo(SLOTID_1, 11111, callForwardSetInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_SET_CALL_TRANSFER_INFO));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SetCallTransferInfo_0900
 * @tc.name   : testV1SetCallTransferInfo007
 * @tc.desc   : Call the function V1 SetCallTransferInfo with serialId  and a value of 32768
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetCallTransferInfo007, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    CallForwardSetInfo callForwardSetInfo = {};
    callForwardSetInfo.reason = 1;
    callForwardSetInfo.mode = 1;
    callForwardSetInfo.classx = 1;
    callForwardSetInfo.number = "10086";
    int32_t ret = g_rilInterface->SetCallTransferInfo(SLOTID_1, 32768, callForwardSetInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_SET_CALL_TRANSFER_INFO));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SetCallTransferInfo_1000
 * @tc.name   : testV1SetCallTransferInfo008
 * @tc.desc   : Call the function V1 SetCallTransferInfo with serialId  and a value of -32768
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetCallTransferInfo008, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    CallForwardSetInfo callForwardSetInfo = {};
    callForwardSetInfo.reason = 1;
    callForwardSetInfo.mode = 1;
    callForwardSetInfo.classx = 1;
    callForwardSetInfo.number = "10086";
    int32_t ret = g_rilInterface->SetCallTransferInfo(SLOTID_1, -32768, callForwardSetInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_SET_CALL_TRANSFER_INFO));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SetCallTransferInfo_1100
 * @tc.name   : testV1SetCallTransferInfo009
 * @tc.desc   : Call the function V1 SetCallTransferInfo with callForwardSetInfo.reason  and a value of 0
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetCallTransferInfo009, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    CallForwardSetInfo callForwardSetInfo = {};
    callForwardSetInfo.reason = 0;
    callForwardSetInfo.mode = 1;
    callForwardSetInfo.classx = 1;
    callForwardSetInfo.number = "10086";
    int32_t ret = g_rilInterface->SetCallTransferInfo(SLOTID_1, GetSerialId(), callForwardSetInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_SET_CALL_TRANSFER_INFO));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SetCallTransferInfo_1200
 * @tc.name   : testV1SetCallTransferInfo010
 * @tc.desc   : Call the function V1 SetCallTransferInfo with callForwardSetInfo.reason  and a value of 2
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetCallTransferInfo010, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    CallForwardSetInfo callForwardSetInfo = {};
    callForwardSetInfo.reason = 2;
    callForwardSetInfo.mode = 1;
    callForwardSetInfo.classx = 1;
    callForwardSetInfo.number = "10086";
    int32_t ret = g_rilInterface->SetCallTransferInfo(SLOTID_1, GetSerialId(), callForwardSetInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_SET_CALL_TRANSFER_INFO));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SetCallTransferInfo_1300
 * @tc.name   : testV1SetCallTransferInfo011
 * @tc.desc   : Call the function V1 SetCallTransferInfo with callForwardSetInfo.reason  and a value of 3
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetCallTransferInfo011, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    CallForwardSetInfo callForwardSetInfo = {};
    callForwardSetInfo.reason = 3;
    callForwardSetInfo.mode = 1;
    callForwardSetInfo.classx = 1;
    callForwardSetInfo.number = "10086";
    int32_t ret = g_rilInterface->SetCallTransferInfo(SLOTID_1, GetSerialId(), callForwardSetInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_SET_CALL_TRANSFER_INFO));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SetCallTransferInfo_1400
 * @tc.name   : testV1SetCallTransferInfo012
 * @tc.desc   : Call the function V1 SetCallTransferInfo with callForwardSetInfo.reason  and a value of 4
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetCallTransferInfo012, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    CallForwardSetInfo callForwardSetInfo = {};
    callForwardSetInfo.reason = 4;
    callForwardSetInfo.mode = 1;
    callForwardSetInfo.classx = 1;
    callForwardSetInfo.number = "10086";
    int32_t ret = g_rilInterface->SetCallTransferInfo(SLOTID_1, GetSerialId(), callForwardSetInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_SET_CALL_TRANSFER_INFO));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SetCallTransferInfo_1500
 * @tc.name   : testV1SetCallTransferInfo013
 * @tc.desc   : Call the function V1 SetCallTransferInfo with callForwardSetInfo.reason  and a value of 5
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetCallTransferInfo013, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    CallForwardSetInfo callForwardSetInfo = {};
    callForwardSetInfo.reason = 5;
    callForwardSetInfo.mode = 1;
    callForwardSetInfo.classx = 1;
    callForwardSetInfo.number = "10086";
    int32_t ret = g_rilInterface->SetCallTransferInfo(SLOTID_1, GetSerialId(), callForwardSetInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_SET_CALL_TRANSFER_INFO));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SetCallTransferInfo_1600
 * @tc.name   : testV1SetCallTransferInfo014
 * @tc.desc   : Call the function V1 SetCallTransferInfo with callForwardSetInfo.reason  and a value of 6
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetCallTransferInfo014, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    CallForwardSetInfo callForwardSetInfo = {};
    callForwardSetInfo.reason = 6;
    callForwardSetInfo.mode = 1;
    callForwardSetInfo.classx = 1;
    callForwardSetInfo.number = "10086";
    int32_t ret = g_rilInterface->SetCallTransferInfo(SLOTID_1, GetSerialId(), callForwardSetInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SetCallTransferInfo_1700
 * @tc.name   : testV1SetCallTransferInfo015
 * @tc.desc   : Call the function V1 SetCallTransferInfo with callForwardSetInfo.reason  and a value of -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetCallTransferInfo015, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    CallForwardSetInfo callForwardSetInfo = {};
    callForwardSetInfo.reason = -1;
    callForwardSetInfo.mode = 1;
    callForwardSetInfo.classx = 1;
    callForwardSetInfo.number = "10086";
    int32_t ret = g_rilInterface->SetCallTransferInfo(SLOTID_1, GetSerialId(), callForwardSetInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SetCallTransferInfo_1800
 * @tc.name   : testV1SetCallTransferInfo016
 * @tc.desc   : Call the function V1 SetCallTransferInfo with callForwardSetInfo.mode  and a value of 0
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetCallTransferInfo016, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    CallForwardSetInfo callForwardSetInfo = {};
    callForwardSetInfo.reason = 1;
    callForwardSetInfo.mode = 0;
    callForwardSetInfo.classx = 1;
    callForwardSetInfo.number = "10086";
    int32_t ret = g_rilInterface->SetCallTransferInfo(SLOTID_1, GetSerialId(), callForwardSetInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_SET_CALL_TRANSFER_INFO));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SetCallTransferInfo_1900
 * @tc.name   : testV1SetCallTransferInfo017
 * @tc.desc   : Call the function V1 SetCallTransferInfo with callForwardSetInfo.mode  and a value of 2
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetCallTransferInfo017, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    CallForwardSetInfo callForwardSetInfo = {};
    callForwardSetInfo.reason = 1;
    callForwardSetInfo.mode = 2;
    callForwardSetInfo.classx = 1;
    callForwardSetInfo.number = "10086";
    int32_t ret = g_rilInterface->SetCallTransferInfo(SLOTID_1, GetSerialId(), callForwardSetInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_SET_CALL_TRANSFER_INFO));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SetCallTransferInfo_2000
 * @tc.name   : testV1SetCallTransferInfo018
 * @tc.desc   : Call the function V1 SetCallTransferInfo with callForwardSetInfo.mode  and a value of 3
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetCallTransferInfo018, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    CallForwardSetInfo callForwardSetInfo = {};
    callForwardSetInfo.reason = 1;
    callForwardSetInfo.mode = 3;
    callForwardSetInfo.classx = 1;
    callForwardSetInfo.number = "10086";
    int32_t ret = g_rilInterface->SetCallTransferInfo(SLOTID_1, GetSerialId(), callForwardSetInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_SET_CALL_TRANSFER_INFO));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SetCallTransferInfo_2100
 * @tc.name   : testV1SetCallTransferInfo019
 * @tc.desc   : Call the function V1 SetCallTransferInfo with callForwardSetInfo.mode  and a value of 4
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetCallTransferInfo019, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    CallForwardSetInfo callForwardSetInfo = {};
    callForwardSetInfo.reason = 1;
    callForwardSetInfo.mode = 4;
    callForwardSetInfo.classx = 1;
    callForwardSetInfo.number = "10086";
    int32_t ret = g_rilInterface->SetCallTransferInfo(SLOTID_1, GetSerialId(), callForwardSetInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_SET_CALL_TRANSFER_INFO));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SetCallTransferInfo_2200
 * @tc.name   : testV1SetCallTransferInfo020
 * @tc.desc   : Call the function V1 SetCallTransferInfo with callForwardSetInfo.mode  and a value of 5
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetCallTransferInfo020, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    CallForwardSetInfo callForwardSetInfo = {};
    callForwardSetInfo.reason = 1;
    callForwardSetInfo.mode = 5;
    callForwardSetInfo.classx = 1;
    callForwardSetInfo.number = "10086";
    int32_t ret = g_rilInterface->SetCallTransferInfo(SLOTID_1, GetSerialId(), callForwardSetInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SetCallTransferInfo_2300
 * @tc.name   : testV1SetCallTransferInfo021
 * @tc.desc   : Call the function V1 SetCallTransferInfo with callForwardSetInfo.mode  and a value of -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetCallTransferInfo021, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    CallForwardSetInfo callForwardSetInfo = {};
    callForwardSetInfo.reason = 1;
    callForwardSetInfo.mode = -1;
    callForwardSetInfo.classx = 1;
    callForwardSetInfo.number = "10086";
    int32_t ret = g_rilInterface->SetCallTransferInfo(SLOTID_1, GetSerialId(), callForwardSetInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SetCallTransferInfo_2400
 * @tc.name   : testV1SetCallTransferInfo022
 * @tc.desc   : Call the function V1 SetCallTransferInfo with callForwardSetInfo.number  and a value of 0
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetCallTransferInfo022, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    CallForwardSetInfo callForwardSetInfo = {};
    callForwardSetInfo.reason = 1;
    callForwardSetInfo.mode = 1;
    callForwardSetInfo.classx = 1;
    callForwardSetInfo.number = "0";
    int32_t ret = g_rilInterface->SetCallTransferInfo(SLOTID_1, GetSerialId(), callForwardSetInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_SET_CALL_TRANSFER_INFO));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SetCallTransferInfo_2500
 * @tc.name   : testV1SetCallTransferInfo023
 * @tc.desc   : Call the function V1 SetCallTransferInfo with callForwardSetInfo.number  and a value of -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetCallTransferInfo023, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    CallForwardSetInfo callForwardSetInfo = {};
    callForwardSetInfo.reason = 1;
    callForwardSetInfo.mode = 1;
    callForwardSetInfo.classx = 1;
    callForwardSetInfo.number = "-1";
    int32_t ret = g_rilInterface->SetCallTransferInfo(SLOTID_1, GetSerialId(), callForwardSetInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SetCallTransferInfo_2600
 * @tc.name   : testV1SetCallTransferInfo024
 * @tc.desc   : Call the function V1 SetCallTransferInfo with callForwardSetInfo.number  and a value of 12306
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetCallTransferInfo024, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    CallForwardSetInfo callForwardSetInfo = {};
    callForwardSetInfo.reason = 1;
    callForwardSetInfo.mode = 1;
    callForwardSetInfo.classx = 1;
    callForwardSetInfo.number = "12306";
    int32_t ret = g_rilInterface->SetCallTransferInfo(SLOTID_1, GetSerialId(), callForwardSetInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_SET_CALL_TRANSFER_INFO));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1GetCallRestriction_0300
 * @tc.name   : testV1GetCallRestriction001
 * @tc.desc   : Call the function V1 GetCallRestriction with slotId  and a value of 2
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetCallRestriction001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    std::string fac = "AO";
    int32_t ret = g_rilInterface->GetCallRestriction(2, GetSerialId(), fac);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_GET_CALL_RESTRICTION));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1GetCallRestriction_0400
 * @tc.name   : testV1GetCallRestriction002
 * @tc.desc   : Call the function V1 GetCallRestriction with slotId  and a value of 256
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetCallRestriction002, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    std::string fac = "AO";
    int32_t ret = g_rilInterface->GetCallRestriction(256, GetSerialId(), fac);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_GET_CALL_RESTRICTION));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1GetCallRestriction_0500
 * @tc.name   : testV1GetCallRestriction003
 * @tc.desc   : Call the function V1 GetCallRestriction with slotId  and a value of -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetCallRestriction003, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    std::string fac = "AO";
    int32_t ret = g_rilInterface->GetCallRestriction(-1, GetSerialId(), fac);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_GET_CALL_RESTRICTION));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1GetCallRestriction_0600
 * @tc.name   : testV1GetCallRestriction004
 * @tc.desc   : Call the function V1 GetCallRestriction with serialId  and a value of -11111
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetCallRestriction004, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    std::string fac = "AO";
    int32_t ret = g_rilInterface->GetCallRestriction(SLOTID_1, -11111, fac);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_GET_CALL_RESTRICTION));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1GetCallRestriction_0700
 * @tc.name   : testV1GetCallRestriction005
 * @tc.desc   : Call the function V1 GetCallRestriction with serialId  and a value of 0
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetCallRestriction005, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    std::string fac = "AO";
    int32_t ret = g_rilInterface->GetCallRestriction(SLOTID_1, 0, fac);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_GET_CALL_RESTRICTION));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1GetCallRestriction_0800
 * @tc.name   : testV1GetCallRestriction006
 * @tc.desc   : Call the function V1 GetCallRestriction with serialId  and a value of 11111
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetCallRestriction006, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    std::string fac = "AO";
    int32_t ret = g_rilInterface->GetCallRestriction(SLOTID_1, 11111, fac);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_GET_CALL_RESTRICTION));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1GetCallRestriction_0900
 * @tc.name   : testV1GetCallRestriction007
 * @tc.desc   : Call the function V1 GetCallRestriction with serialId  and a value of 32768
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetCallRestriction007, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    std::string fac = "AO";
    int32_t ret = g_rilInterface->GetCallRestriction(SLOTID_1, 32768, fac);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_GET_CALL_RESTRICTION));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1GetCallRestriction_1000
 * @tc.name   : testV1GetCallRestriction008
 * @tc.desc   : Call the function V1 GetCallRestriction with serialId  and a value of -32768
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetCallRestriction008, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    std::string fac = "AO";
    int32_t ret = g_rilInterface->GetCallRestriction(SLOTID_1, -32768, fac);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_GET_CALL_RESTRICTION));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SetCallRestriction_0300
 * @tc.name   : testV1SetCallRestriction001
 * @tc.desc   : Call the function V1 SetCallRestriction with slotId  and a value of 2
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetCallRestriction001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    CallRestrictionInfo callRestrictionInfo = {};
    callRestrictionInfo.fac = "AO";
    callRestrictionInfo.mode = 1;
    callRestrictionInfo.password = "123456";
    int32_t ret = g_rilInterface->SetCallRestriction(2, GetSerialId(), callRestrictionInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_SET_CALL_RESTRICTION));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SetCallRestriction_0400
 * @tc.name   : testV1SetCallRestriction002
 * @tc.desc   : Call the function V1 SetCallRestriction with slotId  and a value of 256
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetCallRestriction002, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    CallRestrictionInfo callRestrictionInfo = {};
    callRestrictionInfo.fac = "AO";
    callRestrictionInfo.mode = 1;
    callRestrictionInfo.password = "123456";
    int32_t ret = g_rilInterface->SetCallRestriction(256, GetSerialId(), callRestrictionInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_SET_CALL_RESTRICTION));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SetCallRestriction_0500
 * @tc.name   : testV1SetCallRestriction003
 * @tc.desc   : Call the function V1 SetCallRestriction with slotId  and a value of -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetCallRestriction003, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    CallRestrictionInfo callRestrictionInfo = {};
    callRestrictionInfo.fac = "AO";
    callRestrictionInfo.mode = 1;
    callRestrictionInfo.password = "123456";
    int32_t ret = g_rilInterface->SetCallRestriction(-1, GetSerialId(), callRestrictionInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_SET_CALL_RESTRICTION));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SetCallRestriction_0600
 * @tc.name   : testV1SetCallRestriction004
 * @tc.desc   : Call the function V1 SetCallRestriction with serialId  and a value of -11111
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetCallRestriction004, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    CallRestrictionInfo callRestrictionInfo = {};
    callRestrictionInfo.fac = "AO";
    callRestrictionInfo.mode = 1;
    callRestrictionInfo.password = "123456";
    int32_t ret = g_rilInterface->SetCallRestriction(SLOTID_1, -11111, callRestrictionInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_SET_CALL_RESTRICTION));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SetCallRestriction_0700
 * @tc.name   : testV1SetCallRestriction005
 * @tc.desc   : Call the function V1 SetCallRestriction with serialId  and a value of 0
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetCallRestriction005, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    CallRestrictionInfo callRestrictionInfo = {};
    callRestrictionInfo.fac = "AO";
    callRestrictionInfo.mode = 1;
    callRestrictionInfo.password = "123456";
    int32_t ret = g_rilInterface->SetCallRestriction(SLOTID_1, 0, callRestrictionInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_SET_CALL_RESTRICTION));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SetCallRestriction_0800
 * @tc.name   : testV1SetCallRestriction006
 * @tc.desc   : Call the function V1 SetCallRestriction with serialId  and a value of 11111
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetCallRestriction006, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    CallRestrictionInfo callRestrictionInfo = {};
    callRestrictionInfo.fac = "AO";
    callRestrictionInfo.mode = 1;
    callRestrictionInfo.password = "123456";
    int32_t ret = g_rilInterface->SetCallRestriction(SLOTID_1, 11111, callRestrictionInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_SET_CALL_RESTRICTION));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SetCallRestriction_0900
 * @tc.name   : testV1SetCallRestriction007
 * @tc.desc   : Call the function V1 SetCallRestriction with serialId  and a value of 32768
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetCallRestriction007, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    CallRestrictionInfo callRestrictionInfo = {};
    callRestrictionInfo.fac = "AO";
    callRestrictionInfo.mode = 1;
    callRestrictionInfo.password = "123456";
    int32_t ret = g_rilInterface->SetCallRestriction(SLOTID_1, 32768, callRestrictionInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_SET_CALL_RESTRICTION));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SetCallRestriction_1000
 * @tc.name   : testV1SetCallRestriction008
 * @tc.desc   : Call the function V1 SetCallRestriction with serialId  and a value of -32768
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetCallRestriction008, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    CallRestrictionInfo callRestrictionInfo = {};
    callRestrictionInfo.fac = "AO";
    callRestrictionInfo.mode = 1;
    callRestrictionInfo.password = "123456";
    int32_t ret = g_rilInterface->SetCallRestriction(SLOTID_1, -32768, callRestrictionInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_SET_CALL_RESTRICTION));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SetCallRestriction_1100
 * @tc.name   : testV1SetCallRestriction009
 * @tc.desc   : Call the function V1 SetCallRestriction with callRestrictionInfo.mode  and a value of 0
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetCallRestriction009, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    CallRestrictionInfo callRestrictionInfo = {};
    callRestrictionInfo.fac = "AO";
    callRestrictionInfo.mode = 0;
    callRestrictionInfo.password = "123456";
    int32_t ret = g_rilInterface->SetCallRestriction(SLOTID_1, GetSerialId(), callRestrictionInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_SET_CALL_RESTRICTION));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SetCallRestriction_1200
 * @tc.name   : testV1SetCallRestriction010
 * @tc.desc   : Call the function V1 SetCallRestriction with callRestrictionInfo.mode  and a value of -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetCallRestriction010, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    CallRestrictionInfo callRestrictionInfo = {};
    callRestrictionInfo.fac = "AO";
    callRestrictionInfo.mode = -1;
    callRestrictionInfo.password = "123456";
    int32_t ret = g_rilInterface->SetCallRestriction(SLOTID_1, GetSerialId(), callRestrictionInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SetCallRestriction_1300
 * @tc.name   : testV1SetCallRestriction011
 * @tc.desc   : Call the function V1 SetCallRestriction with callRestrictionInfo.mode  and a value of 255
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetCallRestriction011, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    CallRestrictionInfo callRestrictionInfo = {};
    callRestrictionInfo.fac = "AO";
    callRestrictionInfo.mode = 255;
    callRestrictionInfo.password = "123456";
    int32_t ret = g_rilInterface->SetCallRestriction(SLOTID_1, GetSerialId(), callRestrictionInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SetCallRestriction_1400
 * @tc.name   : testV1SetCallRestriction012
 * @tc.desc   : Call the function V1 SetCallRestriction with callRestrictionInfo.password  and a value of 0
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetCallRestriction012, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    CallRestrictionInfo callRestrictionInfo = {};
    callRestrictionInfo.fac = "AO";
    callRestrictionInfo.mode = 1;
    callRestrictionInfo.password = "0";
    int32_t ret = g_rilInterface->SetCallRestriction(SLOTID_1, GetSerialId(), callRestrictionInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_SET_CALL_RESTRICTION));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SetCallRestriction_1500
 * @tc.name   : testV1SetCallRestriction013
 * @tc.desc   : Call the function V1 SetCallRestriction with callRestrictionInfo.password  and a value of -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetCallRestriction013, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    CallRestrictionInfo callRestrictionInfo = {};
    callRestrictionInfo.fac = "AO";
    callRestrictionInfo.mode = 255;
    callRestrictionInfo.password = "-1";
    int32_t ret = g_rilInterface->SetCallRestriction(SLOTID_1, GetSerialId(), callRestrictionInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_SET_CALL_RESTRICTION));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SetCallRestriction_1600
 * @tc.name   : testV1SetCallRestriction014
 * @tc.desc   : Call the function V1 SetCallRestriction with callRestrictionInfo.password  and a value of abcd1234
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetCallRestriction014, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    CallRestrictionInfo callRestrictionInfo = {};
    callRestrictionInfo.fac = "AO";
    callRestrictionInfo.mode = 255;
    callRestrictionInfo.password = "abcd1234";
    int32_t ret = g_rilInterface->SetCallRestriction(SLOTID_1, GetSerialId(), callRestrictionInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_SET_CALL_RESTRICTION));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SetCallRestriction_1700
 * @tc.name   : testV1SetCallRestriction015
 * @tc.desc   : Verifying whether a value of 1qaz!QAZ for the password is feasible
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetCallRestriction015, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    CallRestrictionInfo callRestrictionInfo = {};
    callRestrictionInfo.fac = "AO";
    callRestrictionInfo.mode = 255;
    callRestrictionInfo.password = "1qaz!QAZ";
    int32_t ret = g_rilInterface->SetCallRestriction(SLOTID_1, GetSerialId(), callRestrictionInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_SET_CALL_RESTRICTION));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1GetClip_0300
 * @tc.name   : testV1GetClip001
 * @tc.desc   : Call the function V1 GetClip with slotId  and a value of 2
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetClip001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->GetClip(2, GetSerialId());
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_GET_CLIP));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1GetClip_0400
 * @tc.name   : testV1GetClip002
 * @tc.desc   : Call the function V1 GetClip with slotId  and a value of 256
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetClip002, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->GetClip(256, GetSerialId());
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_GET_CLIP));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1GetClip_0500
 * @tc.name   : testV1GetClip003
 * @tc.desc   : Call the function V1 GetClip with slotId  and a value of -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetClip003, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->GetClip(-1, GetSerialId());
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_GET_CLIP));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1GetClip_0600
 * @tc.name   : testV1GetClip004
 * @tc.desc   : Call the function V1 GetClip with serialId  and a value of -11111
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetClip004, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->GetClip(SLOTID_1, -11111);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_GET_CLIP));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1GetClip_0700
 * @tc.name   : testV1GetClip005
 * @tc.desc   : Call the function V1 GetClip with serialId  and a value of 0
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetClip005, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->GetClip(SLOTID_1, 0);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_GET_CLIP));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1GetClip_0800
 * @tc.name   : testV1GetClip006
 * @tc.desc   : Call the function V1 GetClip with serialId  and a value of 11111
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetClip006, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->GetClip(SLOTID_1, 11111);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_GET_CLIP));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1GetClip_0900
 * @tc.name   : testV1GetClip007
 * @tc.desc   : Call the function V1 GetClip with serialId  and a value of 32768
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetClip007, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->GetClip(SLOTID_1, 32768);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_GET_CLIP));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1GetClip_1000
 * @tc.name   : testV1GetClip008
 * @tc.desc   : Call the function V1 GetClip with serialId  and a value of -32768
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetClip008, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->GetClip(SLOTID_1, -32768);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_GET_CLIP));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SetClip_0300
 * @tc.name   : testV1SetClip001
 * @tc.desc   : Call the function V1 SetClip with slotId  and a value of 2
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetClip001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SetClip(2, GetSerialId(), 1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_SET_CLIP));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SetClip_0400
 * @tc.name   : testV1SetClip002
 * @tc.desc   : Call the function V1 SetClip with slotId  and a value of 256
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetClip002, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SetClip(256, GetSerialId(), 1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_SET_CLIP));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SetClip_0500
 * @tc.name   : testV1SetClip003
 * @tc.desc   : Call the function V1 SetClip with slotId  and a value of -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetClip003, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SetClip(-1, GetSerialId(), 1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_SET_CLIP));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SetClip_0600
 * @tc.name   : testV1SetClip004
 * @tc.desc   : Call the function V1 SetClip with serialId  and a value of -11111
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetClip004, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SetClip(SLOTID_1, -11111, 1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_SET_CLIP));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SetClip_0700
 * @tc.name   : testV1SetClip005
 * @tc.desc   : Call the function V1 SetClip with serialId  and a value of 0
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetClip005, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SetClip(SLOTID_1, 0, 1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_SET_CLIP));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SetClip_0800
 * @tc.name   : testV1SetClip006
 * @tc.desc   : Call the function V1 SetClip with serialId  and a value of 11111
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetClip006, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SetClip(SLOTID_1, 11111, 1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_SET_CLIP));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SetClip_0900
 * @tc.name   : testV1SetClip007
 * @tc.desc   : Call the function V1 SetClip with serialId  and a value of 32768
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetClip007, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SetClip(SLOTID_1, 32768, 1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_SET_CLIP));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SetClip_1000
 * @tc.name   : testV1SetClip008
 * @tc.desc   : Call the function V1 SetClip with serialId  and a value of -32768
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetClip008, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SetClip(SLOTID_1, -32768, 1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_SET_CLIP));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SetClip_1100
 * @tc.name   : testV1SetClip009
 * @tc.desc   : Call the function V1 SetClip with action  and a value of 0
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetClip009, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SetClip(SLOTID_1, GetSerialId(), 0);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_SET_CLIP));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SetClip_1200
 * @tc.name   : testV1SetClip010
 * @tc.desc   : Call the function V1 SetClip with action  and a value of -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetClip010, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SetClip(SLOTID_1, GetSerialId(), -1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1GetClir_0300
 * @tc.name   : testV1GetClir001
 * @tc.desc   : Call the function V1 GetClir with slotId  and a value of 2
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetClir001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->GetClir(2, GetSerialId());
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_GET_CLIR));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1GetClir_0400
 * @tc.name   : testV1GetClir002
 * @tc.desc   : Call the function V1 GetClir with slotId  and a value of 256
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetClir002, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->GetClir(256, GetSerialId());
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_GET_CLIR));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1GetClir_0500
 * @tc.name   : testV1GetClir003
 * @tc.desc   : Call the function V1 GetClir with slotId  and a value of -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetClir003, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->GetClir(-1, GetSerialId());
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_GET_CLIR));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1GetClir_0600
 * @tc.name   : testV1GetClir004
 * @tc.desc   : Call the function V1 GetClir with serialId  and a value of -11111
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetClir004, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->GetClir(SLOTID_1, -11111);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_GET_CLIR));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1GetClir_0700
 * @tc.name   : testV1GetClir005
 * @tc.desc   : Call the function V1 GetClir with serialId  and a value of 0
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetClir005, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->GetClir(SLOTID_1, 0);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_GET_CLIR));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1GetClir_0800
 * @tc.name   : testV1GetClir006
 * @tc.desc   : Call the function V1 GetClir with serialId  and a value of 11111
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetClir006, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->GetClir(SLOTID_1, 11111);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_GET_CLIR));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1GetClir_0900
 * @tc.name   : testV1GetClir007
 * @tc.desc   : Call the function V1 GetClir with serialId  and a value of 32768
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetClir007, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->GetClir(SLOTID_1, 32768);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_GET_CLIR));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1GetClir_1000
 * @tc.name   : testV1GetClir008
 * @tc.desc   : Call the function V1 GetClir with serialId  and a value of -32768
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetClir008, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->GetClir(SLOTID_1, -32768);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_GET_CLIR));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SetClir_0300
 * @tc.name   : testV1SetClir001
 * @tc.desc   : Call the function V1 SetClir with slotId  and a value of 2
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetClir001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SetClir(2, GetSerialId(), 1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_SET_CLIR));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SetClir_0400
 * @tc.name   : testV1SetClir002
 * @tc.desc   : Call the function V1 SetClir with slotId  and a value of 256
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetClir002, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SetClir(256, GetSerialId(), 1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_SET_CLIR));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SetClir_0500
 * @tc.name   : testV1SetClir003
 * @tc.desc   : Call the function V1 SetClir with slotId  and a value of -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetClir003, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SetClir(-1, GetSerialId(), 1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_SET_CLIR));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SetClir_0600
 * @tc.name   : testV1SetClir004
 * @tc.desc   : Call the function V1 SetClir with serialId  and a value of -11111
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetClir004, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SetClir(SLOTID_1, -11111, 1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_SET_CLIR));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SetClir_0700
 * @tc.name   : testV1SetClir005
 * @tc.desc   : Call the function V1 SetClir with serialId  and a value of 0
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetClir005, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SetClir(SLOTID_1, 0, 1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_SET_CLIR));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SetClir_0800
 * @tc.name   : testV1SetClir006
 * @tc.desc   : Call the function V1 SetClir with serialId  and a value of 11111
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetClir006, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SetClir(SLOTID_1, 11111, 1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_SET_CLIR));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SetClir_0900
 * @tc.name   : testV1SetClir007
 * @tc.desc   : Call the function V1 SetClir with serialId  and a value of 32768
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetClir007, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SetClir(SLOTID_1, 32768, 1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_SET_CLIR));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SetClir_1000
 * @tc.name   : testV1SetClir008
 * @tc.desc   : Call the function V1 SetClir with serialId  and a value of -32768
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetClir008, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SetClir(SLOTID_1, -32768, 1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_SET_CLIR));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SetClir_1100
 * @tc.name   : testV1SetClir009
 * @tc.desc   : Call the function V1 SetClir with action  and a value of 0
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetClir009, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SetClir(SLOTID_1, GetSerialId(), 0);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_SET_CLIR));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SetClir_1200
 * @tc.name   : testV1SetClir010
 * @tc.desc   : Call the function V1 SetClir with action  and a value of -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetClir010, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SetClir(SLOTID_1, GetSerialId(), -1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SetCallPreferenceMode_0300
 * @tc.name   : testV1SetCallPreferenceMode001
 * @tc.desc   : Call the function V1 SetCallPreferenceMode with slotId  and a value of 2
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetCallPreferenceMode001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SetCallPreferenceMode(2, GetSerialId(), 1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_SET_CALL_PREFERENCE));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SetCallPreferenceMode_0400
 * @tc.name   : testV1SetCallPreferenceMode002
 * @tc.desc   : Call the function V1 SetCallPreferenceMode with slotId  and a value of 256
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetCallPreferenceMode002, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SetCallPreferenceMode(256, GetSerialId(), 1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_SET_CALL_PREFERENCE));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SetCallPreferenceMode_0500
 * @tc.name   : testV1SetCallPreferenceMode003
 * @tc.desc   : Call the function V1 SetCallPreferenceMode with slotId  and a value of -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetCallPreferenceMode003, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SetCallPreferenceMode(-1, GetSerialId(), 1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_SET_CALL_PREFERENCE));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SetCallPreferenceMode_0600
 * @tc.name   : testV1SetCallPreferenceMode004
 * @tc.desc   : Call the function V1 SetCallPreferenceMode with serialId  and a value of -11111
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetCallPreferenceMode004, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SetCallPreferenceMode(SLOTID_1, -11111, 1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_SET_CALL_PREFERENCE));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SetCallPreferenceMode_0700
 * @tc.name   : testV1SetCallPreferenceMode005
 * @tc.desc   : Call the function V1 SetCallPreferenceMode with serialId  and a value of 0
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetCallPreferenceMode005, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SetCallPreferenceMode(SLOTID_1, 0, 1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_SET_CALL_PREFERENCE));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SetCallPreferenceMode_0800
 * @tc.name   : testV1SetCallPreferenceMode006
 * @tc.desc   : Call the function V1 SetCallPreferenceMode with serialId  and a value of 11111
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetCallPreferenceMode006, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SetCallPreferenceMode(SLOTID_1, 11111, 1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_SET_CALL_PREFERENCE));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SetCallPreferenceMode_0900
 * @tc.name   : testV1SetCallPreferenceMode007
 * @tc.desc   : Call the function V1 SetCallPreferenceMode with serialId  and a value of 32768
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetCallPreferenceMode007, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SetCallPreferenceMode(SLOTID_1, 32768, 1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_SET_CALL_PREFERENCE));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SetCallPreferenceMode_1000
 * @tc.name   : testV1SetCallPreferenceMode008
 * @tc.desc   : Call the function V1 SetCallPreferenceMode with serialId  and a value of -32768
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetCallPreferenceMode008, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SetCallPreferenceMode(SLOTID_1, -32768, 1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_SET_CALL_PREFERENCE));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SetCallPreferenceMode_1100
 * @tc.name   : testV1SetCallPreferenceMode009
 * @tc.desc   : Call the function V1 SetCallPreferenceMode with mode  and a value of 2
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetCallPreferenceMode009, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SetCallPreferenceMode(SLOTID_1, GetSerialId(), 2);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_SET_CALL_PREFERENCE));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SetCallPreferenceMode_1200
 * @tc.name   : testV1SetCallPreferenceMode010
 * @tc.desc   : Call the function V1 SetCallPreferenceMode with mode  and a value of 3
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetCallPreferenceMode010, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SetCallPreferenceMode(SLOTID_1, GetSerialId(), 3);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_SET_CALL_PREFERENCE));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SetCallPreferenceMode_1300
 * @tc.name   : testV1SetCallPreferenceMode011
 * @tc.desc   : Call the function V1 SetCallPreferenceMode with mode  and a value of 4
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetCallPreferenceMode011, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SetCallPreferenceMode(SLOTID_1, GetSerialId(), 4);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_SET_CALL_PREFERENCE));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SetCallPreferenceMode_1400
 * @tc.name   : testV1SetCallPreferenceMode012
 * @tc.desc   : Call the function V1 SetCallPreferenceMode with mode  and a value of 5
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetCallPreferenceMode012, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SetCallPreferenceMode(SLOTID_1, GetSerialId(), 5);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SetCallPreferenceMode_1500
 * @tc.name   : testV1SetCallPreferenceMode013
 * @tc.desc   : Call the function V1 SetCallPreferenceMode with mode  and a value of -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetCallPreferenceMode013, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SetCallPreferenceMode(SLOTID_1, GetSerialId(), -1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1GetCallPreferenceMode_0300
 * @tc.name   : testV1GetCallPreferenceMode001
 * @tc.desc   : Call the function V1 GetCallPreferenceMode with slotId  and a value of 2
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetCallPreferenceMode001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->GetCallPreferenceMode(2, GetSerialId());
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_GET_CALL_PREFERENCE));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1GetCallPreferenceMode_0400
 * @tc.name   : testV1GetCallPreferenceMode002
 * @tc.desc   : Call the function V1 GetCallPreferenceMode with slotId  and a value of 256
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetCallPreferenceMode002, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->GetCallPreferenceMode(256, GetSerialId());
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_GET_CALL_PREFERENCE));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1GetCallPreferenceMode_0500
 * @tc.name   : testV1GetCallPreferenceMode003
 * @tc.desc   : Call the function V1 GetCallPreferenceMode with slotId  and a value of -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetCallPreferenceMode003, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->GetCallPreferenceMode(-1, GetSerialId());
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_GET_CALL_PREFERENCE));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1GetCallPreferenceMode_0600
 * @tc.name   : testV1GetCallPreferenceMode004
 * @tc.desc   : Call the function V1 GetCallPreferenceMode with serialId  and a value of -11111
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetCallPreferenceMode004, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->GetCallPreferenceMode(SLOTID_1, -11111);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_GET_CALL_PREFERENCE));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1GetCallPreferenceMode_0700
 * @tc.name   : testV1GetCallPreferenceMode005
 * @tc.desc   : Call the function V1 GetCallPreferenceMode with serialId  and a value of 0
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetCallPreferenceMode005, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->GetCallPreferenceMode(SLOTID_1, 0);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_GET_CALL_PREFERENCE));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1GetCallPreferenceMode_0800
 * @tc.name   : testV1GetCallPreferenceMode006
 * @tc.desc   : Call the function V1 GetCallPreferenceMode with serialId  and a value of 11111
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetCallPreferenceMode006, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->GetCallPreferenceMode(SLOTID_1, 11111);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_GET_CALL_PREFERENCE));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1GetCallPreferenceMode_0900
 * @tc.name   : testV1GetCallPreferenceMode007
 * @tc.desc   : Call the function V1 GetCallPreferenceMode with serialId  and a value of 32768
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetCallPreferenceMode007, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->GetCallPreferenceMode(SLOTID_1, 32768);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_GET_CALL_PREFERENCE));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1GetCallPreferenceMode_1000
 * @tc.name   : testV1GetCallPreferenceMode008
 * @tc.desc   : Call the function V1 GetCallPreferenceMode with serialId  and a value of -32768
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetCallPreferenceMode008, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->GetCallPreferenceMode(SLOTID_1, -32768);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_GET_CALL_PREFERENCE));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetCBConfig_0300
 * @tc.name  : testV1SetCBConfig001
 * @tc.desc  : Call function SetCBConfig with an entry of 255.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetCBConfig001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t gsmType = 1;
    CBConfigInfo info;
    info.mode = gsmType;
    info.mids = TEST_ID_LIST;
    info.dcss = TEST_DCS_LIST;
    int32_t ret = g_rilInterface->SetCBConfig(255, GetSerialId(), info);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetCBConfig_0400
 * @tc.name  : testV1SetCBConfig002
 * @tc.desc  : Call function SetCBConfig with an entry of 1.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetCBConfig002, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t gsmType = 1;
    CBConfigInfo info;
    info.mode = gsmType;
    info.mids = TEST_ID_LIST;
    info.dcss = TEST_DCS_LIST;
    int32_t ret = g_rilInterface->SetCBConfig(1, GetSerialId(), info);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetCBConfig_0500
 * @tc.name  : testV1SetCBConfig003
 * @tc.desc  : Call function SetCBConfig with an entry of 1000000001.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetCBConfig003, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t gsmType = 1;
    CBConfigInfo info;
    info.mode = gsmType;
    info.mids = TEST_ID_LIST;
    info.dcss = TEST_DCS_LIST;
    int32_t ret = g_rilInterface->SetCBConfig(1000000001, GetSerialId(), info);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetCBConfig_0600
 * @tc.name  : testV1SetCBConfig004
 * @tc.desc  : Call function SetCBConfig with an entry of -1.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetCBConfig004, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t gsmType = 1;
    CBConfigInfo info;
    info.mode = gsmType;
    info.mids = TEST_ID_LIST;
    info.dcss = TEST_DCS_LIST;
    int32_t ret = g_rilInterface->SetCBConfig(-1, GetSerialId(), info);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetCBConfig_0700
 * @tc.name  : testV1SetCBConfig005
 * @tc.desc  : Call function SetCBConfig with the second argument as 255.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetCBConfig005, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t gsmType = 1;
    CBConfigInfo info;
    info.mode = gsmType;
    info.mids = TEST_ID_LIST;
    info.dcss = TEST_DCS_LIST;
    int32_t ret = g_rilInterface->SetCBConfig(SLOTID_1, 255, info);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetCBConfig_0800
 * @tc.name  : testV1SetCBConfig006
 * @tc.desc  : Call function SetCBConfig with the second argument as 1.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetCBConfig006, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t gsmType = 1;
    CBConfigInfo info;
    info.mode = gsmType;
    info.mids = TEST_ID_LIST;
    info.dcss = TEST_DCS_LIST;
    int32_t ret = g_rilInterface->SetCBConfig(SLOTID_1, 1, info);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetCBConfig_0900
 * @tc.name  : testV1SetCBConfig007
 * @tc.desc  : Call function SetCBConfig with the second argument as 1000000001.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetCBConfig007, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t gsmType = 1;
    CBConfigInfo info;
    info.mode = gsmType;
    info.mids = TEST_ID_LIST;
    info.dcss = TEST_DCS_LIST;
    int32_t ret = g_rilInterface->SetCBConfig(SLOTID_1, 1000000001, info);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetCBConfig_1000
 * @tc.name  : testV1SetCBConfig008
 * @tc.desc  : Call function SetCBConfig with the second argument as -1.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetCBConfig008, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t gsmType = 1;
    CBConfigInfo info;
    info.mode = gsmType;
    info.mids = TEST_ID_LIST;
    info.dcss = TEST_DCS_LIST;
    int32_t ret = g_rilInterface->SetCBConfig(SLOTID_1, -1, info);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetCBConfig_1100
 * @tc.name  : testV1SetCBConfig009
 * @tc.desc  : Call function SetCBConfig with the third argument as info.mode = 255.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetCBConfig009, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    CBConfigInfo info;
    info.mode = 255;
    info.mids = TEST_ID_LIST;
    info.dcss = TEST_DCS_LIST;
    int32_t ret = g_rilInterface->SetCBConfig(SLOTID_1, GetSerialId(), info);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetCBConfig_1200
 * @tc.name  : testV1SetCBConfig010
 * @tc.desc  : Call function SetCBConfig with the third argument as info.mode = 1.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetCBConfig010, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    CBConfigInfo info;
    info.mode = 1;
    info.mids = TEST_ID_LIST;
    info.dcss = TEST_DCS_LIST;
    int32_t ret = g_rilInterface->SetCBConfig(SLOTID_1, GetSerialId(), info);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetCBConfig_1300
 * @tc.name  : testV1SetCBConfig011
 * @tc.desc  : Call function SetCBConfig with the third argument as info.mode = 1000000001.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetCBConfig011, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    CBConfigInfo info;
    info.mode = 1000000001;
    info.mids = TEST_ID_LIST;
    info.dcss = TEST_DCS_LIST;
    int32_t ret = g_rilInterface->SetCBConfig(SLOTID_1, GetSerialId(), info);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetCBConfig_1400
 * @tc.name  : testV1SetCBConfig012
 * @tc.desc  : Call function SetCBConfig with the third argument as info.mode = -1.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetCBConfig012, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    CBConfigInfo info;
    info.mode = -1;
    info.mids = TEST_ID_LIST;
    info.dcss = TEST_DCS_LIST;
    int32_t ret = g_rilInterface->SetCBConfig(SLOTID_1, GetSerialId(), info);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetCBConfig_1500
 * @tc.name  : testV1SetCBConfig013
 * @tc.desc  : Call function SetCBConfig with the third argument as info.mids = TEST_STORAGE_PDU.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetCBConfig013, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t gsmType = 1;
    CBConfigInfo info;
    info.mode = gsmType;
    info.mids = TEST_STORAGE_PDU;
    info.dcss = TEST_DCS_LIST;
    int32_t ret = g_rilInterface->SetCBConfig(SLOTID_1, GetSerialId(), info);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetCBConfig_1600
 * @tc.name  : testV1SetCBConfig014
 * @tc.desc  : Call function SetCBConfig with the third argument as info.mids = TEST_SEND_PDU.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetCBConfig014, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t gsmType = 1;
    CBConfigInfo info;
    info.mode = gsmType;
    info.mids = TEST_SEND_PDU;
    info.dcss = TEST_DCS_LIST;
    int32_t ret = g_rilInterface->SetCBConfig(SLOTID_1, GetSerialId(), info);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetCBConfig_1700
 * @tc.name  : testV1SetCBConfig015
 * @tc.desc  : Call function SetCBConfig with the third argument as info.mids = TEST_SMSC_PDU.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetCBConfig015, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t gsmType = 1;
    CBConfigInfo info;
    info.mode = gsmType;
    info.mids = TEST_SMSC_PDU;
    info.dcss = TEST_DCS_LIST;
    int32_t ret = g_rilInterface->SetCBConfig(SLOTID_1, GetSerialId(), info);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetCBConfig_1800
 * @tc.name  : testV1SetCBConfig016
 * @tc.desc  : Call function SetCBConfig with the third argument as info.mids = TEST_CDMA_PDU.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetCBConfig016, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t gsmType = 1;
    CBConfigInfo info;
    info.mode = gsmType;
    info.mids = TEST_CDMA_PDU;
    info.dcss = TEST_DCS_LIST;
    int32_t ret = g_rilInterface->SetCBConfig(SLOTID_1, GetSerialId(), info);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetCBConfig_1900
 * @tc.name  : testV1SetCBConfig017
 * @tc.desc  : Call function SetCBConfig with the third argument as info.dcss = TEST_ID_LIST.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetCBConfig017, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t gsmType = 1;
    CBConfigInfo info;
    info.mode = gsmType;
    info.mids = TEST_ID_LIST;
    info.dcss = TEST_ID_LIST;
    int32_t ret = g_rilInterface->SetCBConfig(SLOTID_1, GetSerialId(), info);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetCBConfig_2000
 * @tc.name  : testV1SetCBConfig018
 * @tc.desc  : Call function SetCBConfig with the third argument as info.dcss = TEST_STORAGE_PDU.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetCBConfig018, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t gsmType = 1;
    CBConfigInfo info;
    info.mode = gsmType;
    info.mids = TEST_ID_LIST;
    info.dcss = TEST_STORAGE_PDU;
    int32_t ret = g_rilInterface->SetCBConfig(SLOTID_1, GetSerialId(), info);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetCBConfig_2100
 * @tc.name  : testV1SetCBConfig019
 * @tc.desc  : Call function SetCBConfig with the third argument as info.dcss = TEST_SEND_PDU.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetCBConfig019, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t gsmType = 1;
    CBConfigInfo info;
    info.mode = gsmType;
    info.mids = TEST_ID_LIST;
    info.dcss = TEST_SEND_PDU;
    int32_t ret = g_rilInterface->SetCBConfig(SLOTID_1, GetSerialId(), info);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetCBConfig_2200
 * @tc.name  : testV1SetCBConfig020
 * @tc.desc  : Call function SetCBConfig with the third argument as info.dcss = TEST_SMSC_PDU.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetCBConfig020, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t gsmType = 1;
    CBConfigInfo info;
    info.mode = gsmType;
    info.mids = TEST_ID_LIST;
    info.dcss = TEST_SMSC_PDU;
    int32_t ret = g_rilInterface->SetCBConfig(SLOTID_1, GetSerialId(), info);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetCBConfig_2300
 * @tc.name  : testV1SetCBConfig021
 * @tc.desc  : Call function SetCBConfig with the third argument as info.dcss = TEST_CDMA_PDU.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetCBConfig021, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t gsmType = 1;
    CBConfigInfo info;
    info.mode = gsmType;
    info.mids = TEST_ID_LIST;
    info.dcss = TEST_CDMA_PDU;
    int32_t ret = g_rilInterface->SetCBConfig(SLOTID_1, GetSerialId(), info);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetCBConfig_2400
 * @tc.name  : testV1SetCBConfig022
 * @tc.desc  : Call function SetCBConfig 100 times.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetCBConfig022, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t gsmType = 1;
    int32_t ret = 0;
    CBConfigInfo info;
    info.mode = gsmType;
    info.mids = TEST_ID_LIST;
    info.dcss = TEST_DCS_LIST;
    for (int i = 0; i < 100; i++) {
        ret = g_rilInterface->SetCBConfig(SLOTID_1, GetSerialId(), info);
        EXPECT_EQ(SUCCESS, ret);
    }
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetCBConfig_0300
 * @tc.name  : testV1GetCBConfig001
 * @tc.desc  : Call function GetCBConfig with an entry of 1000000001.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetCBConfig001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->GetCBConfig(1000000001, GetSerialId());
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetCBConfig_0400
 * @tc.name  : testV1GetCBConfig002
 * @tc.desc  : Call function GetCBConfig with an entry of -1.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetCBConfig002, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->GetCBConfig(-1, GetSerialId());
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetCBConfig_0500
 * @tc.name  : testV1GetCBConfig003
 * @tc.desc  : Call function GetCBConfig with an entry of 255.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetCBConfig003, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->GetCBConfig(255, GetSerialId());
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetCBConfig_0700
 * @tc.name  : testV1GetCBConfig005
 * @tc.desc  : Call function GetCBConfig 100 times.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetCBConfig005, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = 0;
    for (int i = 0; i < 100; i++) {
        ret = g_rilInterface->GetCBConfig(SLOTID_1, GetSerialId());
        EXPECT_EQ(SUCCESS, ret);
    }
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetCBConfig_0800
 * @tc.name  : testV1GetCBConfig006
 * @tc.desc  : Call function GetCBConfig with the second argument as 255.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetCBConfig006, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->GetCBConfig(SLOTID_1, 255);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetCBConfig_0900
 * @tc.name  : testV1GetCBConfig007
 * @tc.desc  : Call function GetCBConfig with the second argument as 1.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetCBConfig007, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->GetCBConfig(SLOTID_1, 1);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetCBConfig_1000
 * @tc.name  : testV1GetCBConfig008
 * @tc.desc  : Call function GetCBConfig with the second argument as 1000000001.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetCBConfig008, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->GetCBConfig(SLOTID_1, 1000000001);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetCBConfig_1100
 * @tc.name  : testV1GetCBConfig009
 * @tc.desc  : Call function GetCBConfig with the second argument as -1.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetCBConfig009, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->GetCBConfig(SLOTID_1, -1);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetCdmaCBConfig_0300
 * @tc.name  : testV1SetCdmaCBConfig001
 * @tc.desc  : Call function SetCdmaCBConfig with an entry of 255.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetCdmaCBConfig001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    CdmaCBConfigInfoList broadcastInfoList = {};
    int32_t ret = g_rilInterface->SetCdmaCBConfig(255, GetSerialId(), broadcastInfoList);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetCdmaCBConfig_0500
 * @tc.name  : testV1SetCdmaCBConfig003
 * @tc.desc  : Call function SetCdmaCBConfig with an entry of 1000000001.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetCdmaCBConfig003, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    CdmaCBConfigInfoList broadcastInfoList = {};
    int32_t ret = g_rilInterface->SetCdmaCBConfig(1000000001, GetSerialId(), broadcastInfoList);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetCdmaCBConfig_0600
 * @tc.name  : testV1SetCdmaCBConfig004
 * @tc.desc  : Call function SetCdmaCBConfig with an entry of -1.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetCdmaCBConfig004, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    CdmaCBConfigInfoList broadcastInfoList = {};
    int32_t ret = g_rilInterface->SetCdmaCBConfig(-1, GetSerialId(), broadcastInfoList);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetCdmaCBConfig_0700
 * @tc.name  : testV1SetCdmaCBConfig005
 * @tc.desc  : Call function SetCdmaCBConfig with the second argument as 255.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetCdmaCBConfig005, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    CdmaCBConfigInfoList broadcastInfoList = {};
    int32_t ret = g_rilInterface->SetCdmaCBConfig(SLOTID_1, 255, broadcastInfoList);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetCdmaCBConfig_0800
 * @tc.name  : testV1SetCdmaCBConfig006
 * @tc.desc  : Call function SetCdmaCBConfig with the second argument as 1.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetCdmaCBConfig006, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    CdmaCBConfigInfoList broadcastInfoList = {};
    int32_t ret = g_rilInterface->SetCdmaCBConfig(SLOTID_1, 1, broadcastInfoList);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetCdmaCBConfig_0900
 * @tc.name  : testV1SetCdmaCBConfig007
 * @tc.desc  : Call function SetCdmaCBConfig with the second argument as 1000000001.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetCdmaCBConfig007, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    CdmaCBConfigInfoList broadcastInfoList = {};
    int32_t ret = g_rilInterface->SetCdmaCBConfig(SLOTID_1, 1000000001, broadcastInfoList);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetCdmaCBConfig_1000
 * @tc.name  : testV1SetCdmaCBConfig008
 * @tc.desc  : Call function SetCdmaCBConfig with the second argument as -1.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetCdmaCBConfig008, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    CdmaCBConfigInfoList broadcastInfoList = {};
    int32_t ret = g_rilInterface->SetCdmaCBConfig(SLOTID_1, -1, broadcastInfoList);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetCdmaCBConfig_1100
 * @tc.name  : testV1SetCdmaCBConfig009
 * @tc.desc  : Call function SetCdmaCBConfig with the broadcastInfoList.serial as SLOTID_1.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetCdmaCBConfig009, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    CdmaCBConfigInfoList broadcastInfoList = {};
    broadcastInfoList.serial = SLOTID_1;
    int32_t ret = g_rilInterface->SetCdmaCBConfig(SLOTID_1, GetSerialId(), broadcastInfoList);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetCdmaCBConfig_1200
 * @tc.name  : testV1SetCdmaCBConfig010
 * @tc.desc  : Call function SetCdmaCBConfig with the broadcastInfoList.serial as 1000000001.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetCdmaCBConfig010, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    CdmaCBConfigInfoList broadcastInfoList = {};
    broadcastInfoList.serial = 1000000001;
    int32_t ret = g_rilInterface->SetCdmaCBConfig(SLOTID_1, GetSerialId(), broadcastInfoList);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetCdmaCBConfig_1300
 * @tc.name  : testV1SetCdmaCBConfig011
 * @tc.desc  : Call function SetCdmaCBConfig with the broadcastInfoList.serial as -1.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetCdmaCBConfig011, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    CdmaCBConfigInfoList broadcastInfoList = {};
    broadcastInfoList.serial = -1;
    int32_t ret = g_rilInterface->SetCdmaCBConfig(SLOTID_1, GetSerialId(), broadcastInfoList);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetCdmaCBConfig_1400
 * @tc.name  : testV1SetCdmaCBConfig012
 * @tc.desc  : Call function SetCdmaCBConfig with the broadcastInfoList.serial as 255.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetCdmaCBConfig012, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    CdmaCBConfigInfoList broadcastInfoList = {};
    broadcastInfoList.serial = 255;
    int32_t ret = g_rilInterface->SetCdmaCBConfig(SLOTID_1, GetSerialId(), broadcastInfoList);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetCdmaCBConfig_1500
 * @tc.name  : testV1SetCdmaCBConfig013
 * @tc.desc  : Call function SetCdmaCBConfig with the broadcastInfoList.serial as 255.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetCdmaCBConfig013, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    CdmaCBConfigInfoList broadcastInfoList = {};
    broadcastInfoList.serial = 1;
    int32_t ret = g_rilInterface->SetCdmaCBConfig(SLOTID_1, GetSerialId(), broadcastInfoList);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetCdmaCBConfig_1600
 * @tc.name  : testV1SetCdmaCBConfig014
 * @tc.desc  : Call function SetCdmaCBConfig with the broadcastInfoList.size as SLOTID_1.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetCdmaCBConfig014, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    CdmaCBConfigInfoList broadcastInfoList = {};
    broadcastInfoList.size = SLOTID_1;
    int32_t ret = g_rilInterface->SetCdmaCBConfig(SLOTID_1, GetSerialId(), broadcastInfoList);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetCdmaCBConfig_1700
 * @tc.name  : testV1SetCdmaCBConfig015
 * @tc.desc  : Call function SetCdmaCBConfig with the broadcastInfoList.size as 1000000001.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetCdmaCBConfig015, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    CdmaCBConfigInfoList broadcastInfoList = {};
    broadcastInfoList.size = 1000000001;
    int32_t ret = g_rilInterface->SetCdmaCBConfig(SLOTID_1, GetSerialId(), broadcastInfoList);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetCdmaCBConfig_1800
 * @tc.name  : testV1SetCdmaCBConfig016
 * @tc.desc  : Call function SetCdmaCBConfig with the broadcastInfoList.size as -1.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetCdmaCBConfig016, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    CdmaCBConfigInfoList broadcastInfoList = {};
    broadcastInfoList.size = -1;
    int32_t ret = g_rilInterface->SetCdmaCBConfig(SLOTID_1, GetSerialId(), broadcastInfoList);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetCdmaCBConfig_1900
 * @tc.name  : testV1SetCdmaCBConfig017
 * @tc.desc  : Call function SetCdmaCBConfig with the broadcastInfoList.size as 255.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetCdmaCBConfig017, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    CdmaCBConfigInfoList broadcastInfoList = {};
    broadcastInfoList.size = 255;
    int32_t ret = g_rilInterface->SetCdmaCBConfig(SLOTID_1, GetSerialId(), broadcastInfoList);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetCdmaCBConfig_2000
 * @tc.name  : testV1SetCdmaCBConfig018
 * @tc.desc  : Call function SetCdmaCBConfig with the broadcastInfoList.size as 255.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetCdmaCBConfig018, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    CdmaCBConfigInfoList broadcastInfoList = {};
    broadcastInfoList.size = 1;
    int32_t ret = g_rilInterface->SetCdmaCBConfig(SLOTID_1, GetSerialId(), broadcastInfoList);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetCdmaCBConfig_0300
 * @tc.name  : testV1GetCdmaCBConfig001
 * @tc.desc  : Call function GetCdmaCBConfig with the SLOTID_1.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetCdmaCBConfig001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->GetCdmaCBConfig(SLOTID_1, GetSerialId());
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetCdmaCBConfig_0400
 * @tc.name  : testV1GetCdmaCBConfig002
 * @tc.desc  : Call function GetCdmaCBConfig with the 1.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetCdmaCBConfig002, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->GetCdmaCBConfig(1, GetSerialId());
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetCdmaCBConfig_0500
 * @tc.name  : testV1GetCdmaCBConfig003
 * @tc.desc  : Call function GetCdmaCBConfig with the 255.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetCdmaCBConfig003, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->GetCdmaCBConfig(255, GetSerialId());
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetCdmaCBConfig_0600
 * @tc.name  : testV1GetCdmaCBConfig004
 * @tc.desc  : Call function GetCdmaCBConfig with the 1000000001.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetCdmaCBConfig004, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->GetCdmaCBConfig(1000000001, GetSerialId());
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetCdmaCBConfig_0700
 * @tc.name  : testV1GetCdmaCBConfig005
 * @tc.desc  : Call function GetCdmaCBConfig with the -1.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetCdmaCBConfig005, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->GetCdmaCBConfig(-1, GetSerialId());
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetCdmaCBConfig_0800
 * @tc.name  : testV1GetCdmaCBConfig006
 * @tc.desc  : Call function GetCdmaCBConfig with the 255 100Times.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetCdmaCBConfig006, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = 0;

    for (int i = 0; i < 100; i++) {
        ret = g_rilInterface->GetCdmaCBConfig(255, GetSerialId());
        EXPECT_EQ(SUCCESS, ret);
    }
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetCdmaCBConfig_0900
 * @tc.name  : testV1GetCdmaCBConfig007
 * @tc.desc  : Call function GetCdmaCBConfig with the SLOTID_1.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetCdmaCBConfig007, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->GetCdmaCBConfig(SLOTID_1, SLOTID_1);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetCdmaCBConfig_1000
 * @tc.name  : testV1GetCdmaCBConfig008
 * @tc.desc  : Call function GetCdmaCBConfig with the 1.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetCdmaCBConfig008, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->GetCdmaCBConfig(SLOTID_1, 1);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetCdmaCBConfig_1100
 * @tc.name  : testV1GetCdmaCBConfig009
 * @tc.desc  : Call function GetCdmaCBConfig with the 255.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetCdmaCBConfig009, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->GetCdmaCBConfig(SLOTID_1, 255);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetCdmaCBConfig_1200
 * @tc.name  : testV1GetCdmaCBConfig010
 * @tc.desc  : Call function GetCdmaCBConfig with the 1000000001.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetCdmaCBConfig010, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->GetCdmaCBConfig(SLOTID_1, 1000000001);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetCdmaCBConfig_1300
 * @tc.name  : testV1GetCdmaCBConfig011
 * @tc.desc  : Call function GetCdmaCBConfig with the -1.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetCdmaCBConfig011, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->GetCdmaCBConfig(SLOTID_1, -1);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetCdmaCBConfig_1400
 * @tc.name  : testV1GetCdmaCBConfig012
 * @tc.desc  : Call function GetCdmaCBConfig with the 255 100Times.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetCdmaCBConfig012, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = 0;

    for (int i = 0; i < 100; i++) {
        ret = g_rilInterface->GetCdmaCBConfig(SLOTID_1, 255);
        EXPECT_EQ(SUCCESS, ret);
    }
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SendSmsMoreMode_0400
 * @tc.name  : testV1SendSmsMoreMode002
 * @tc.desc  : Call function SendSmsMoreMode with the SLOTID_1 100Times.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendSmsMoreMode002, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = 0;
    GsmSmsMessageInfo msg;
    for (int i = 0; i < 100; i++) {
        ret = g_rilInterface->SendSmsMoreMode(SLOTID_1, GetSerialId(), msg);
        EXPECT_EQ(SUCCESS, ret);
    }
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SendSmsMoreMode_0500
 * @tc.name  : testV1SendSmsMoreMode003
 * @tc.desc  : Call function SendSmsMoreMode with the 255.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendSmsMoreMode003, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    GsmSmsMessageInfo msg;
    int32_t ret = g_rilInterface->SendSmsMoreMode(255, GetSerialId(), msg);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SendSmsMoreMode_0700
 * @tc.name  : testV1SendSmsMoreMode005
 * @tc.desc  : Call function SendSmsMoreMode with the -1.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendSmsMoreMode005, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    GsmSmsMessageInfo msg;
    int32_t ret = g_rilInterface->SendSmsMoreMode(-1, GetSerialId(), msg);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SendSmsMoreMode_0800
 * @tc.name  : testV1SendSmsMoreMode006
 * @tc.desc  : Call function SendSmsMoreMode with the 1000000001.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendSmsMoreMode006, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    GsmSmsMessageInfo msg;
    int32_t ret = g_rilInterface->SendSmsMoreMode(1000000001, GetSerialId(), msg);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SendSmsMoreMode_0900
 * @tc.name  : testV1SendSmsMoreMode007
 * @tc.desc  : Call function SendSmsMoreMode with the second SLOTID_1.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendSmsMoreMode007, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    GsmSmsMessageInfo msg;
    int32_t ret = g_rilInterface->SendSmsMoreMode(SLOTID_1, SLOTID_1, msg);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SendSmsMoreMode_1000
 * @tc.name  : testV1SendSmsMoreMode008
 * @tc.desc  : Call function SendSmsMoreMode with the second SLOTID_1 100Times.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendSmsMoreMode008, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = 0;
    GsmSmsMessageInfo msg;
    for (int i = 0; i < 100; i++) {
        ret = g_rilInterface->SendSmsMoreMode(SLOTID_1, SLOTID_1, msg);
        EXPECT_EQ(SUCCESS, ret);
    }
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SendSmsMoreMode_1100
 * @tc.name  : testV1SendSmsMoreMode009
 * @tc.desc  : Call function SendSmsMoreMode with the second 255.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendSmsMoreMode009, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    GsmSmsMessageInfo msg;
    int32_t ret = g_rilInterface->SendSmsMoreMode(SLOTID_1, 255, msg);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SendSmsMoreMode_1200
 * @tc.name  : testV1SendSmsMoreMode010
 * @tc.desc  : Call function SendSmsMoreMode with the second 1.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendSmsMoreMode010, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    GsmSmsMessageInfo msg;
    int32_t ret = g_rilInterface->SendSmsMoreMode(SLOTID_1, 1, msg);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SendSmsMoreMode_1300
 * @tc.name  : testV1SendSmsMoreMode011
 * @tc.desc  : Call function SendSmsMoreMode with the second -1.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendSmsMoreMode011, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    GsmSmsMessageInfo msg;
    int32_t ret = g_rilInterface->SendSmsMoreMode(SLOTID_1, -1, msg);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SendSmsMoreMode_1400
 * @tc.name  : testV1SendSmsMoreMode012
 * @tc.desc  : Call function SendSmsMoreMode with the second 1000000001.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendSmsMoreMode012, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    GsmSmsMessageInfo msg;
    int32_t ret = g_rilInterface->SendSmsMoreMode(SLOTID_1, 1000000001, msg);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SendSmsMoreMode_1500
 * @tc.name  : testV1SendSmsMoreMode013
 * @tc.desc  : Call function SendSmsMoreMode with the third argument as msg.serial = SLOTID_1.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendSmsMoreMode013, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    GsmSmsMessageInfo msg;
    msg.serial = SLOTID_1;
    int32_t ret = g_rilInterface->SendSmsMoreMode(SLOTID_1, GetSerialId(), msg);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SendSmsMoreMode_1600
 * @tc.name  : testV1SendSmsMoreMode014
 * @tc.desc  : Call function SendSmsMoreMode with the third argument as msg.serial = SLOTID_1 100Times.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendSmsMoreMode014, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = 0;
    GsmSmsMessageInfo msg;
    msg.serial = SLOTID_1;
    for (int i = 0; i < 100; i++) {
        ret = g_rilInterface->SendSmsMoreMode(SLOTID_1, GetSerialId(), msg);
        EXPECT_EQ(SUCCESS, ret);
    }
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SendSmsMoreMode_1700
 * @tc.name  : testV1SendSmsMoreMode015
 * @tc.desc  : Call function SendSmsMoreMode with the third argument as msg.serial = 255.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendSmsMoreMode015, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    GsmSmsMessageInfo msg;
    msg.serial = 255;
    int32_t ret = g_rilInterface->SendSmsMoreMode(SLOTID_1, GetSerialId(), msg);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SendSmsMoreMode_1800
 * @tc.name  : testV1SendSmsMoreMode016
 * @tc.desc  : Call function SendSmsMoreMode with the third argument as msg.serial = 1.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendSmsMoreMode016, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    GsmSmsMessageInfo msg;
    msg.serial = 1;
    int32_t ret = g_rilInterface->SendSmsMoreMode(SLOTID_1, GetSerialId(), msg);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SendSmsMoreMode_1900
 * @tc.name  : testV1SendSmsMoreMode017
 * @tc.desc  : Call function SendSmsMoreMode with the third argument as msg.serial = -1.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendSmsMoreMode017, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    GsmSmsMessageInfo msg;
    msg.serial = -1;
    int32_t ret = g_rilInterface->SendSmsMoreMode(SLOTID_1, GetSerialId(), msg);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SendSmsMoreMode_2000
 * @tc.name  : testV1SendSmsMoreMode018
 * @tc.desc  : Call function SendSmsMoreMode with the third argument as msg.serial = 1000000001.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendSmsMoreMode018, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    GsmSmsMessageInfo msg;
    msg.serial = 1000000001;
    int32_t ret = g_rilInterface->SendSmsMoreMode(SLOTID_1, GetSerialId(), msg);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SendSmsMoreMode_2100
 * @tc.name  : testV1SendSmsMoreMode019
 * @tc.desc  : Call function SendSmsMoreMode with the third argument as msg.state = SLOTID_1.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendSmsMoreMode019, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    GsmSmsMessageInfo msg;
    msg.state = SLOTID_1;
    int32_t ret = g_rilInterface->SendSmsMoreMode(SLOTID_1, GetSerialId(), msg);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SendSmsMoreMode_2200
 * @tc.name  : testV1SendSmsMoreMode020
 * @tc.desc  : Call function SendSmsMoreMode with the third argument as msg.state = SLOTID_1 100Times.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendSmsMoreMode020, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = 0;
    GsmSmsMessageInfo msg;
    msg.state = SLOTID_1;
    for (int i = 0; i < 100; i++) {
        ret = g_rilInterface->SendSmsMoreMode(SLOTID_1, GetSerialId(), msg);
        EXPECT_EQ(SUCCESS, ret);
    }
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SendSmsMoreMode_2300
 * @tc.name  : testV1SendSmsMoreMode021
 * @tc.desc  : Call function SendSmsMoreMode with the third argument as msg.state = 255.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendSmsMoreMode021, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    GsmSmsMessageInfo msg;
    msg.state = 255;
    int32_t ret = g_rilInterface->SendSmsMoreMode(SLOTID_1, GetSerialId(), msg);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SendSmsMoreMode_2400
 * @tc.name  : testV1SendSmsMoreMode022
 * @tc.desc  : Call function SendSmsMoreMode with the third argument as msg.state = 1.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendSmsMoreMode022, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    GsmSmsMessageInfo msg;
    msg.state = 1;
    int32_t ret = g_rilInterface->SendSmsMoreMode(SLOTID_1, GetSerialId(), msg);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SendSmsMoreMode_2500
 * @tc.name  : testV1SendSmsMoreMode023
 * @tc.desc  : Call function SendSmsMoreMode with the third argument as msg.state = -1.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendSmsMoreMode023, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    GsmSmsMessageInfo msg;
    msg.state = -1;
    int32_t ret = g_rilInterface->SendSmsMoreMode(SLOTID_1, GetSerialId(), msg);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SendSmsMoreMode_2600
 * @tc.name  : testV1SendSmsMoreMode024
 * @tc.desc  : Call function SendSmsMoreMode with the third argument as msg.state = 1000000001.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendSmsMoreMode024, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    GsmSmsMessageInfo msg;
    msg.state = 1000000001;
    int32_t ret = g_rilInterface->SendSmsMoreMode(SLOTID_1, GetSerialId(), msg);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SendSmsMoreMode_2700
 * @tc.name  : testV1SendSmsMoreMode025
 * @tc.desc  : Call function SendSmsMoreMode with the third argument as msg.smscPdu = TEST_STORAGE_PDU.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendSmsMoreMode025, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    GsmSmsMessageInfo msg;
    msg.smscPdu = TEST_STORAGE_PDU;
    int32_t ret = g_rilInterface->SendSmsMoreMode(SLOTID_1, GetSerialId(), msg);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SendSmsMoreMode_2800
 * @tc.name  : testV1SendSmsMoreMode026
 * @tc.desc  : Call function SendSmsMoreMode with the third argument as msg.smscPdu = TEST_STORAGE_PDU 100Times.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendSmsMoreMode026, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = 0;
    GsmSmsMessageInfo msg;
    msg.smscPdu = TEST_STORAGE_PDU;
    for (int i = 0; i < 100; i++) {
        ret = g_rilInterface->SendSmsMoreMode(SLOTID_1, GetSerialId(), msg);
        EXPECT_EQ(SUCCESS, ret);
    }
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SendSmsMoreMode_2900
 * @tc.name  : testV1SendSmsMoreMode027
 * @tc.desc  : Call function SendSmsMoreMode with the third argument as msg.smscPdu = TEST_SEND_PDU.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendSmsMoreMode027, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    GsmSmsMessageInfo msg;
    msg.smscPdu = TEST_SEND_PDU;
    int32_t ret = g_rilInterface->SendSmsMoreMode(SLOTID_1, GetSerialId(), msg);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SendSmsMoreMode_3000
 * @tc.name  : testV1SendSmsMoreMode028
 * @tc.desc  : Call function SendSmsMoreMode with the third argument as msg.smscPdu = TEST_SMSC_PDU.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendSmsMoreMode028, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    GsmSmsMessageInfo msg;
    msg.smscPdu = TEST_SMSC_PDU;
    int32_t ret = g_rilInterface->SendSmsMoreMode(SLOTID_1, GetSerialId(), msg);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SendSmsMoreMode_3100
 * @tc.name  : testV1SendSmsMoreMode029
 * @tc.desc  : Call function SendSmsMoreMode with the third argument as msg.smscPdu = TEST_STORAGE_PDU.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendSmsMoreMode029, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    GsmSmsMessageInfo msg;
    msg.smscPdu = TEST_STORAGE_PDU;
    int32_t ret = g_rilInterface->SendSmsMoreMode(SLOTID_1, GetSerialId(), msg);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SendSmsMoreMode_3200
 * @tc.name  : testV1SendSmsMoreMode030
 * @tc.desc  : Call function SendSmsMoreMode with the third argument as msg.smscPdu = TEST_CDMA_PDU.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendSmsMoreMode030, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    GsmSmsMessageInfo msg;
    msg.smscPdu = TEST_CDMA_PDU;
    int32_t ret = g_rilInterface->SendSmsMoreMode(SLOTID_1, GetSerialId(), msg);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SendSmsMoreMode_3300
 * @tc.name  : testV1SendSmsMoreMode031
 * @tc.desc  : Call function SendSmsMoreMode with the third argument as msg.smscPdu = TEST_ID_LIST.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendSmsMoreMode031, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    GsmSmsMessageInfo msg;
    msg.smscPdu = TEST_ID_LIST;
    int32_t ret = g_rilInterface->SendSmsMoreMode(SLOTID_1, GetSerialId(), msg);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SendSmsMoreMode_3400
 * @tc.name  : testV1SendSmsMoreMode032
 * @tc.desc  : Call function SendSmsMoreMode with the third argument as msg.smscPdu = TEST_DCS_LIST.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendSmsMoreMode032, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    GsmSmsMessageInfo msg;
    msg.smscPdu = TEST_DCS_LIST;
    int32_t ret = g_rilInterface->SendSmsMoreMode(SLOTID_1, GetSerialId(), msg);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SendSmsMoreMode_3500
 * @tc.name  : testV1SendSmsMoreMode033
 * @tc.desc  : Call function SendSmsMoreMode with the third argument as msg.pdu = TEST_STORAGE_PDU.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendSmsMoreMode033, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    GsmSmsMessageInfo msg;
    msg.pdu = TEST_STORAGE_PDU;
    int32_t ret = g_rilInterface->SendSmsMoreMode(SLOTID_1, GetSerialId(), msg);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SendSmsMoreMode_3600
 * @tc.name  : testV1SendSmsMoreMode034
 * @tc.desc  : Call function SendSmsMoreMode with the third argument as msg.pdu = TEST_STORAGE_PDU 100Times.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendSmsMoreMode034, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = 0;
    GsmSmsMessageInfo msg;
    msg.pdu = TEST_STORAGE_PDU;
    for (int i = 0; i < 100; i++) {
        ret = g_rilInterface->SendSmsMoreMode(SLOTID_1, GetSerialId(), msg);
        EXPECT_EQ(SUCCESS, ret);
    }
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SendSmsMoreMode_3700
 * @tc.name  : testV1SendSmsMoreMode035
 * @tc.desc  : Call function SendSmsMoreMode with the third argument as msg.pdu = TEST_SEND_PDU.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendSmsMoreMode035, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    GsmSmsMessageInfo msg;
    msg.pdu = TEST_SEND_PDU;
    int32_t ret = g_rilInterface->SendSmsMoreMode(SLOTID_1, GetSerialId(), msg);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SendSmsMoreMode_3800
 * @tc.name  : testV1SendSmsMoreMode036
 * @tc.desc  : Call function SendSmsMoreMode with the third argument as msg.pdu = TEST_SMSC_PDU.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendSmsMoreMode036, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    GsmSmsMessageInfo msg;
    msg.pdu = TEST_SMSC_PDU;
    int32_t ret = g_rilInterface->SendSmsMoreMode(SLOTID_1, GetSerialId(), msg);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SendSmsMoreMode_3900
 * @tc.name  : testV1SendSmsMoreMode037
 * @tc.desc  : Call function SendSmsMoreMode with the third argument as msg.pdu = TEST_STORAGE_PDU.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendSmsMoreMode037, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    GsmSmsMessageInfo msg;
    msg.pdu = TEST_STORAGE_PDU;
    int32_t ret = g_rilInterface->SendSmsMoreMode(SLOTID_1, GetSerialId(), msg);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SendSmsMoreMode_4000
 * @tc.name  : testV1SendSmsMoreMode038
 * @tc.desc  : Call function SendSmsMoreMode with the third argument as msg.pdu = TEST_CDMA_PDU.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendSmsMoreMode038, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    GsmSmsMessageInfo msg;
    msg.pdu = TEST_CDMA_PDU;
    int32_t ret = g_rilInterface->SendSmsMoreMode(SLOTID_1, GetSerialId(), msg);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SendSmsMoreMode_4100
 * @tc.name  : testV1SendSmsMoreMode039
 * @tc.desc  : Call function SendSmsMoreMode with the third argument as msg.pdu = TEST_ID_LIST.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendSmsMoreMode039, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    GsmSmsMessageInfo msg;
    msg.pdu = TEST_ID_LIST;
    int32_t ret = g_rilInterface->SendSmsMoreMode(SLOTID_1, GetSerialId(), msg);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SendSmsMoreMode_4200
 * @tc.name  : testV1SendSmsMoreMode040
 * @tc.desc  : Call function SendSmsMoreMode with the third argument as msg.pdu = TEST_DCS_LIST.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendSmsMoreMode040, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    GsmSmsMessageInfo msg;
    msg.pdu = TEST_DCS_LIST;
    int32_t ret = g_rilInterface->SendSmsMoreMode(SLOTID_1, GetSerialId(), msg);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SendRilAck_0200
 * @tc.name  : testV1SendRilAck001
 * @tc.desc  : Call function SendRilAck 100 Times.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendRilAck001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = 0;
    for (int i = 0; i < 100; i++) {
        ret = g_rilInterface->SendRilAck();
        EXPECT_EQ(SUCCESS, ret);
    }
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetRrcConnectionState_0300
 * @tc.name  : testV1GetRrcConnectionState001
 * @tc.desc  : Call function GetRrcConnectionState 100 Times.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetRrcConnectionState001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = 0;
    for (int i = 0; i < 100; i++) {
        ret = g_rilInterface->GetRrcConnectionState(SLOTID_1, GetSerialId());

        EXPECT_EQ(SUCCESS, ret);
    }
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetRrcConnectionState_0400
 * @tc.name  : testV1GetRrcConnectionState002
 * @tc.desc  : Call function GetRrcConnectionState with 255.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetRrcConnectionState002, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->GetRrcConnectionState(255, GetSerialId());
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetRrcConnectionState_0500
 * @tc.name  : testV1GetRrcConnectionState003
 * @tc.desc  : Call function GetRrcConnectionState with 1.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetRrcConnectionState003, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->GetRrcConnectionState(1, GetSerialId());
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetRrcConnectionState_0600
 * @tc.name  : testV1GetRrcConnectionState004
 * @tc.desc  : Call function GetRrcConnectionState with -1.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetRrcConnectionState004, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->GetRrcConnectionState(-1, GetSerialId());
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetRrcConnectionState_0700
 * @tc.name  : testV1GetRrcConnectionState005
 * @tc.desc  : Call function GetRrcConnectionState with 1000000001.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetRrcConnectionState005, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->GetRrcConnectionState(1000000001, GetSerialId());
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetRrcConnectionState_0800
 * @tc.name  : testV1GetRrcConnectionState006
 * @tc.desc  : Call function GetRrcConnectionState with Second SLOTID_1.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetRrcConnectionState006, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->GetRrcConnectionState(SLOTID_1, SLOTID_1);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetRrcConnectionState_0900
 * @tc.name  : testV1GetRrcConnectionState007
 * @tc.desc  : Call function GetRrcConnectionState with Second 255.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetRrcConnectionState007, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->GetRrcConnectionState(SLOTID_1, 255);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetRrcConnectionState_1000
 * @tc.name  : testV1GetRrcConnectionState008
 * @tc.desc  : Call function GetRrcConnectionState with Second 1.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetRrcConnectionState008, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->GetRrcConnectionState(SLOTID_1, 1);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetRrcConnectionState_1100
 * @tc.name  : testV1GetRrcConnectionState009
 * @tc.desc  : Call function GetRrcConnectionState with Second -1.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetRrcConnectionState009, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->GetRrcConnectionState(SLOTID_1, -1);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetRrcConnectionState_1200
 * @tc.name  : testV1GetRrcConnectionState010
 * @tc.desc  : Call function GetRrcConnectionState with Second 1000000001.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetRrcConnectionState010, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->GetRrcConnectionState(SLOTID_1, 1000000001);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SendSmsAck_0300
 * @tc.name  : testV1SendSmsAck001
 * @tc.desc  : Call function SendSmsAck with 255.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendSmsAck001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    ModeData data;
    int32_t ret = g_rilInterface->SendSmsAck(255, GetSerialId(), data);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SendSmsAck_0500
 * @tc.name  : testV1SendSmsAck003
 * @tc.desc  : Call function SendSmsAck with -1.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendSmsAck003, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    ModeData data;
    int32_t ret = g_rilInterface->SendSmsAck(-1, GetSerialId(), data);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SendSmsAck_0600
 * @tc.name  : testV1SendSmsAck004
 * @tc.desc  : Call function SendSmsAck with 1000000001.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendSmsAck004, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    ModeData data;
    int32_t ret = g_rilInterface->SendSmsAck(1000000001, GetSerialId(), data);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SendSmsAck_0700
 * @tc.name  : testV1SendSmsAck005
 * @tc.desc  : Call function SendSmsAck with Second 255.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendSmsAck005, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    ModeData data;
    int32_t ret = g_rilInterface->SendSmsAck(1, 255, data);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SendSmsAck_0800
 * @tc.name  : testV1SendSmsAck006
 * @tc.desc  : Call function SendSmsAck with Second 1.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendSmsAck006, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    ModeData data;
    int32_t ret = g_rilInterface->SendSmsAck(1, 1, data);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SendSmsAck_0900
 * @tc.name  : testV1SendSmsAck007
 * @tc.desc  : Call function SendSmsAck with Second -1.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendSmsAck007, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    ModeData data;
    int32_t ret = g_rilInterface->SendSmsAck(1, -1, data);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SendSmsAck_1000
 * @tc.name  : testV1SendSmsAck008
 * @tc.desc  : Call function SendSmsAck with Second 1000000001.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendSmsAck008, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    ModeData data;
    int32_t ret = g_rilInterface->SendSmsAck(1, 1000000001, data);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SendSmsAck_1100
 * @tc.name  : testV1SendSmsAck009
 * @tc.desc  : Call function SendSmsAck with data.serial as 255.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendSmsAck009, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    ModeData data;
    data.serial = 255;
    int32_t ret = g_rilInterface->SendSmsAck(1, 255, data);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SendSmsAck_1200
 * @tc.name  : testV1SendSmsAck010
 * @tc.desc  : Call function SendSmsAck with data.serial as 1.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendSmsAck010, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    ModeData data;
    data.serial = 1;
    int32_t ret = g_rilInterface->SendSmsAck(1, 255, data);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SendSmsAck_1300
 * @tc.name  : testV1SendSmsAck011
 * @tc.desc  : Call function SendSmsAck with data.serial as -1.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendSmsAck011, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    ModeData data;
    data.serial = -1;
    int32_t ret = g_rilInterface->SendSmsAck(1, 255, data);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SendSmsAck_1400
 * @tc.name  : testV1SendSmsAck012
 * @tc.desc  : Call function SendSmsAck with data.serial as 1000000001.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendSmsAck012, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    ModeData data;
    data.serial = 1000000001;
    int32_t ret = g_rilInterface->SendSmsAck(1, 255, data);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SendSmsAck_1500
 * @tc.name  : testV1SendSmsAck013
 * @tc.desc  : Call function SendSmsAck with data.pdu as TEST_STORAGE_PDU.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendSmsAck013, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    ModeData data;
    data.pdu = TEST_STORAGE_PDU;
    int32_t ret = g_rilInterface->SendSmsAck(1, 255, data);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SendSmsAck_1600
 * @tc.name  : testV1SendSmsAck014
 * @tc.desc  : Call function SendSmsAck with data.pdu as TEST_SEND_PDU.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendSmsAck014, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    ModeData data;
    data.pdu = TEST_SEND_PDU;
    int32_t ret = g_rilInterface->SendSmsAck(1, 255, data);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SendSmsAck_1700
 * @tc.name  : testV1SendSmsAck015
 * @tc.desc  : Call function SendSmsAck with data.pdu as TEST_SMSC_PDU.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendSmsAck015, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    ModeData data;
    data.pdu = TEST_SMSC_PDU;
    int32_t ret = g_rilInterface->SendSmsAck(1, 255, data);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SendSmsAck_1800
 * @tc.name  : testV1SendSmsAck016
 * @tc.desc  : Call function SendSmsAck with data.pdu as TEST_CDMA_PDU.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendSmsAck016, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    ModeData data;
    data.pdu = TEST_CDMA_PDU;
    int32_t ret = g_rilInterface->SendSmsAck(1, 255, data);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SendSmsAck_1900
 * @tc.name  : testV1SendSmsAck017
 * @tc.desc  : Call function SendSmsAck with data.pdu as TEST_ID_LIST.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendSmsAck017, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    ModeData data;
    data.pdu = TEST_ID_LIST;
    int32_t ret = g_rilInterface->SendSmsAck(1, 255, data);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SendSmsAck_2000
 * @tc.name  : testV1SendSmsAck018
 * @tc.desc  : Call function SendSmsAck with data.pdu as TEST_DCS_LIST.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendSmsAck018, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    ModeData data;
    data.pdu = TEST_DCS_LIST;
    int32_t ret = g_rilInterface->SendSmsAck(1, 255, data);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SendSmsAck_2100
 * @tc.name  : testV1SendSmsAck019
 * @tc.desc  : Call function SendSmsAck with data.result as 1;
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendSmsAck019, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    ModeData data;
    data.result = 1;
    int32_t ret = g_rilInterface->SendSmsAck(1, 255, data);

    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SendSmsAck_2200
 * @tc.name  : testV1SendSmsAck020
 * @tc.desc  : Call function SendSmsAck with data.result as 0;
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendSmsAck020, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    ModeData data;
    data.result = 0;
    int32_t ret = g_rilInterface->SendSmsAck(1, 255, data);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SendSmsAck_2300
 * @tc.name  : testV1SendSmsAck021
 * @tc.desc  : Call function SendSmsAck with data.mode as 255;
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendSmsAck021, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    ModeData data;
    data.mode = 255;
    int32_t ret = g_rilInterface->SendSmsAck(1, 255, data);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SendSmsAck_2400
 * @tc.name  : testV1SendSmsAck022
 * @tc.desc  : Call function SendSmsAck with data.mode as 1;
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendSmsAck022, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    ModeData data;
    data.mode = 1;
    int32_t ret = g_rilInterface->SendSmsAck(1, 255, data);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SendSmsAck_2500
 * @tc.name  : testV1SendSmsAck023
 * @tc.desc  : Call function SendSmsAck with data.mode as -1;
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendSmsAck023, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    ModeData data;
    data.mode = -1;
    int32_t ret = g_rilInterface->SendSmsAck(1, 255, data);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SendSmsAck_2600
 * @tc.name  : testV1SendSmsAck024
 * @tc.desc  : Call function SendSmsAck with data.mode as 1000000001;
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendSmsAck024, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    ModeData data;
    data.mode = 1000000001;
    int32_t ret = g_rilInterface->SendSmsAck(1, 255, data);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetRadioState_0300
 * @tc.name: testV1SetRadioState001
 * @tc.desc: SetRadioState, slotId is 0, serialId is GetSerialId(), fun is 0, rst is 0
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetRadioState001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SetRadioState(SLOTID_1, GetSerialId(), 0, 0);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_MODEM_SET_RADIO_STATUS));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetRadioState_0400
 * @tc.name: testV1SetRadioState002
 * @tc.desc: SetRadioState, slotId is 0, serialId is GetSerialId(), fun is 4, rst is 0
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetRadioState002, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SetRadioState(SLOTID_1, GetSerialId(), 4, 0);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_MODEM_SET_RADIO_STATUS));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetRadioState_0500
 * @tc.name: testV1SetRadioState003
 * @tc.desc: SetRadioState, slotId is 0, serialId is GetSerialId(), fun is 0, rst is 1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetRadioState003, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SetRadioState(SLOTID_1, GetSerialId(), 0, 1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_MODEM_SET_RADIO_STATUS));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetRadioState_0600
 * @tc.name: testV1SetRadioState004
 * @tc.desc: SetRadioState, slotId is 0, serialId is GetSerialId(), fun is 1, rst is 1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetRadioState004, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SetRadioState(SLOTID_1, GetSerialId(), 1, 1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_MODEM_SET_RADIO_STATUS));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetRadioState_0700
 * @tc.name: testV1SetRadioState005
 * @tc.desc: SetRadioState, slotId is 0, fun is 4, rst is 1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetRadioState005, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SetRadioState(SLOTID_1, GetSerialId(), 4, 1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_MODEM_SET_RADIO_STATUS));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetRadioState_0800
 * @tc.name: testV1SetRadioState006
 * @tc.desc: SetRadioState, slotId is 0, serialId is GetSerialId(), fun is 0, rst is 2
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetRadioState006, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SetRadioState(SLOTID_1, GetSerialId(), 0, 2);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetRadioState_0900
 * @tc.name: testV1SetRadioState007
 * @tc.desc: SetRadioState, slotId is 0, serialId is GetSerialId(), fun is 3, rst is 0
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetRadioState007, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SetRadioState(SLOTID_1, GetSerialId(), 3, 0);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetRadioState_1000
 * @tc.name: testV1SetRadioState008
 * @tc.desc: SetRadioState, slotId is 0, serialId is -1, fun is 1, rst is 0
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetRadioState008, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SetRadioState(SLOTID_1, -1, 1, 0);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetRadioState_1100
 * @tc.name: testV1SetRadioState009
 * @tc.desc: SetRadioState, slotId is 0, serialId is 2147483647, fun is 4, rst is 1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetRadioState009, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SetRadioState(SLOTID_1, 2147483647, 1, 0);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_MODEM_SET_RADIO_STATUS));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetRadioState_1200
 * @tc.name: testV1SetRadioState010
 * @tc.desc: SetRadioState, slotId is 1, serialId is GetSerialId(), fun is 0, rst is 0
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetRadioState010, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t ret = g_rilInterface->SetRadioState(SLOTID_2, GetSerialId(), 0, 0);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_MODEM_SET_RADIO_STATUS));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetRadioState_1300
 * @tc.name: testV1SetRadioState011
 * @tc.desc: SetRadioState, slotId is 1, serialId is GetSerialId(), fun is 4, rst is 0
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetRadioState011, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t ret = g_rilInterface->SetRadioState(SLOTID_2, GetSerialId(), 4, 0);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_MODEM_SET_RADIO_STATUS));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetRadioState_1400
 * @tc.name: testV1SetRadioState012
 * @tc.desc: SetRadioState, slotId is 1, serialId is GetSerialId(), fun is 0, rst is 1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetRadioState012, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t ret = g_rilInterface->SetRadioState(SLOTID_2, GetSerialId(), 0, 1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_MODEM_SET_RADIO_STATUS));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetRadioState_1500
 * @tc.name: testV1SetRadioState013
 * @tc.desc: SetRadioState, slotId is 1, serialId is GetSerialId(), fun is 1, rst is 1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetRadioState013, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t ret = g_rilInterface->SetRadioState(SLOTID_2, GetSerialId(), 1, 1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_MODEM_SET_RADIO_STATUS));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetRadioState_1600
 * @tc.name: testV1SetRadioState014
 * @tc.desc: SetRadioState, slotId is 1, fun is 4, rst is 1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetRadioState014, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t ret = g_rilInterface->SetRadioState(SLOTID_2, GetSerialId(), 4, 1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_MODEM_SET_RADIO_STATUS));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetRadioState_1700
 * @tc.name: testV1SetRadioState015
 * @tc.desc: SetRadioState, slotId is 0, serialId is GetSerialId(), fun is 0, rst is 2
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetRadioState015, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t ret = g_rilInterface->SetRadioState(SLOTID_2, GetSerialId(), 0, 2);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetRadioState_1800
 * @tc.name: testV1SetRadioState016
 * @tc.desc: SetRadioState, slotId is 1, serialId is GetSerialId(), fun is 3, rst is 0
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetRadioState016, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t ret = g_rilInterface->SetRadioState(SLOTID_2, GetSerialId(), 3, 0);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetRadioState_1900
 * @tc.name: testV1SetRadioState017
 * @tc.desc: SetRadioState, slotId is 1, serialId is -1, fun is 1, rst is 0
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetRadioState017, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t ret = g_rilInterface->SetRadioState(SLOTID_2, -1, 1, 0);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetRadioState_2000
 * @tc.name: testV1SetRadioState018
 * @tc.desc: SetRadioState, slotId is 1, serialId is 2147483647, fun is 4, rst is 1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetRadioState018, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t ret = g_rilInterface->SetRadioState(SLOTID_2, 2147483647, 1, 0);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_MODEM_SET_RADIO_STATUS));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetRadioState_2100
 * @tc.name: testV1SetRadioState019
 * @tc.desc: SetRadioState, stability test
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetRadioState019, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = 0;
    for (int i = 0; i < 1000; i++) {
        ret = g_rilInterface->SetRadioState(SLOTID_1, GetSerialId(), 1, 0);
        EXPECT_EQ(SUCCESS, ret);
    }
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetRadioState_0300
 * @tc.name: testV1GetRadioState001
 * @tc.desc: GetRadioState, slotId is 0, serialId is -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetRadioState001, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->GetRadioState(SLOTID_1, -1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetRadioState_0400
 * @tc.name: testV1GetRadioState002
 * @tc.desc: GetRadioState, slotId is 1, serialId is -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetRadioState002, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t ret = g_rilInterface->GetRadioState(SLOTID_2, -1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetRadioState_0500
 * @tc.name: testV1GetRadioState003
 * @tc.desc: GetRadioState, slotId is 0, serialId is 2147483647
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetRadioState003, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->GetRadioState(SLOTID_1, 2147483647);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_MODEM_GET_RADIO_STATUS));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetRadioState_0600
 * @tc.name: testV1GetRadioState004
 * @tc.desc: GetRadioState, slotId is 1, serialId is 2147483647
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetRadioState004, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t ret = g_rilInterface->GetRadioState(SLOTID_2, 2147483647);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_MODEM_GET_RADIO_STATUS));
}
/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetRadioState_0700
 * @tc.name: testV1GetRadioState005
 * @tc.desc: GetRadioState, stability test
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetRadioState005, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = 0;
    for (int i = 0; i < 1000; i++) {
        ret = g_rilInterface->GetRadioState(SLOTID_1, GetSerialId());
        EXPECT_EQ(SUCCESS, ret);
    }
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetImei_0300
 * @tc.name: testV1GetImei001
 * @tc.desc: GetImei, slotId is 0, serialId is -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetImei001, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->GetImei(SLOTID_1, -1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetImei_0400
 * @tc.name: testV1GetImei002
 * @tc.desc: GetImei, slotId is 1, serialId is -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetImei002, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t ret = g_rilInterface->GetImei(SLOTID_2, -1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetImei_0500
 * @tc.name: testV1GetImei003
 * @tc.desc: GetImei, slotId is 0, serialId is 2147483647
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetImei003, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->GetImei(SLOTID_1, 2147483647);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_MODEM_GET_IMEI));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetImei_0600
 * @tc.name: testV1GetImei004
 * @tc.desc: GetImei, slotId is 1, serialId is 2147483647
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetImei004, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t ret = g_rilInterface->GetImei(SLOTID_2, 2147483647);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_MODEM_GET_IMEI));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetImei_0700
 * @tc.name: testV1GetImei005
 * @tc.desc: GetImei, stability test
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetImei005, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = 0;
    for (int i = 0; i < 1000; i++) {
        ret = g_rilInterface->GetImei(SLOTID_1, GetSerialId());
        EXPECT_EQ(SUCCESS, ret);
    }
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetMeid_0300
 * @tc.name: testV1GetMeid001
 * @tc.desc: GetMeid, slotId is 0, serialId is 2147483647
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetMeid001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->GetMeid(SLOTID_1, 2147483647);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_MODEM_GET_MEID));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetMeid_0400
 * @tc.name: testV1GetMeid002
 * @tc.desc: GetMeid, slotId is 1, serialId is 2147483647
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetMeid002, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t ret = g_rilInterface->GetMeid(SLOTID_2, 2147483647);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_MODEM_GET_MEID));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetMeid_0500
 * @tc.name: testV1GetMeid003
 * @tc.desc: GetMeid, slotId is 0, serialId is -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetMeid003, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->GetMeid(SLOTID_1, -1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetMeid_0600
 * @tc.name: testV1GetMeid004
 * @tc.desc: GetMeid, slotId is 1, serialId is -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetMeid004, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t ret = g_rilInterface->GetMeid(SLOTID_2, -1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetMeid_0700
 * @tc.name: testV1GetMeid005
 * @tc.desc: GetMeid, stability test
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetMeid005, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = 0;
    for (int i = 0; i < 1000; i++) {
        ret = g_rilInterface->GetMeid(SLOTID_1, GetSerialId());
        EXPECT_EQ(SUCCESS, ret);
    }
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetVoiceRadioTechnology_0300
 * @tc.name: testV1GetVoiceRadioTechnology001
 * @tc.desc: GetVoiceRadioTechnology, slotId is 0, serialId is -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetVoiceRadioTechnology001, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->GetVoiceRadioTechnology(SLOTID_1, -1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetVoiceRadioTechnology_0400
 * @tc.name: testV1GetVoiceRadioTechnology002
 * @tc.desc: GetVoiceRadioTechnology, slotId is 1, serialId is -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetVoiceRadioTechnology002, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t ret = g_rilInterface->GetVoiceRadioTechnology(SLOTID_2, -1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetVoiceRadioTechnology_0500
 * @tc.name: testV1GetVoiceRadioTechnology003
 * @tc.desc: GetVoiceRadioTechnology, slotId is 0, serialId is 2147483647
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetVoiceRadioTechnology003, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->GetVoiceRadioTechnology(SLOTID_1, 2147483647);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_MODEM_GET_VOICE_RADIO));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetVoiceRadioTechnology_0600
 * @tc.name: testV1GetVoiceRadioTechnology004
 * @tc.desc: GetVoiceRadioTechnology, slotId is 1, serialId is 2147483647
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetVoiceRadioTechnology004, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t ret = g_rilInterface->GetVoiceRadioTechnology(SLOTID_2, 2147483647);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_MODEM_GET_VOICE_RADIO));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetVoiceRadioTechnology_0700
 * @tc.name: testV1GetVoiceRadioTechnology005
 * @tc.desc: GetVoiceRadioTechnology, stability test
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetVoiceRadioTechnology005, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = 0;
    for (int i = 0; i < 1000; i++) {
        ret = g_rilInterface->GetVoiceRadioTechnology(SLOTID_1, GetSerialId());
        EXPECT_EQ(SUCCESS, ret);
    }
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetBasebandVersion_0300
 * @tc.name: testV1GetBasebandVersion001
 * @tc.desc: GetBasebandVersion, slotId is 0, serialId is -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetBasebandVersion001, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->GetBasebandVersion(SLOTID_1, -1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetBasebandVersion_0400
 * @tc.name: testV1GetBasebandVersion002
 * @tc.desc: GetBasebandVersion, slotId is 1, serialId is -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetBasebandVersion002, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t ret = g_rilInterface->GetBasebandVersion(SLOTID_2, -1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetBasebandVersion_0500
 * @tc.name: testV1GetBasebandVersion003
 * @tc.desc: GetBasebandVersion, slotId is 0, serialId is 2147483647
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetBasebandVersion003, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->GetBasebandVersion(SLOTID_1, 2147483647);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_MODEM_GET_BASEBAND_VERSION));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetBasebandVersion_0600
 * @tc.name: testV1GetBasebandVersion004
 * @tc.desc: GetBasebandVersion, slotId is 1, serialId is 2147483647
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetBasebandVersion004, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t ret = g_rilInterface->GetBasebandVersion(SLOTID_2, 2147483647);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_MODEM_GET_BASEBAND_VERSION));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetBasebandVersion_0700
 * @tc.name: testV1GetBasebandVersion005
 * @tc.desc: GetBasebandVersion, stability test
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetBasebandVersion005, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = 0;
    for (int i = 0; i < 1000; i++) {
        ret = g_rilInterface->GetBasebandVersion(SLOTID_1, GetSerialId());
        EXPECT_EQ(SUCCESS, ret);
    }
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1ShutDown_0300
 * @tc.name: testV1ShutDown001
 * @tc.desc: ShutDown, slotId is 0, serialId is -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1ShutDown001, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->ShutDown(SLOTID_1, -1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1ShutDown_0400
 * @tc.name: testV1ShutDown002
 * @tc.desc: ShutDown, slotId is 1, serialId is -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1ShutDown002, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t ret = g_rilInterface->ShutDown(SLOTID_2, -1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1ShutDown_0500
 * @tc.name: testV1ShutDown003
 * @tc.desc: ShutDown, slotId is 0, serialId is 2147483647
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1ShutDown003, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->ShutDown(SLOTID_1, 2147483647);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_MODEM_SHUT_DOWN));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1ShutDown_0600
 * @tc.name: testV1ShutDown004
 * @tc.desc: ShutDown, slotId is 1, serialId is 2147483647
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1ShutDown004, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t ret = g_rilInterface->ShutDown(SLOTID_2, 2147483647);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_MODEM_SHUT_DOWN));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1ShutDown_0700
 * @tc.name: testV1ShutDown005
 * @tc.desc: ShutDown, stability test
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1ShutDown005, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = 0;
    for (int i = 0; i < 1000; i++) {
        ret = g_rilInterface->ShutDown(SLOTID_1, GetSerialId());
        EXPECT_EQ(SUCCESS, ret);
    }
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetSimIO_0300
 * @tc.name: testV1GetSimIO001
 * @tc.desc: GetSimIO, slotId is 0, serialId is 2147483647
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetSimIO001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SimIoRequestInfo msg;
    msg.command = 0xc0;
    msg.fileId = 0x2FE2;
    msg.p1 = 0;
    msg.p2 = 0;
    msg.p3 = 15;
    msg.data = "";
    msg.path = "3F00";
    msg.pin2 = "";
    int32_t ret = g_rilInterface->GetSimIO(SLOTID_1, 2147483647, msg);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_GET_SIM_IO));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetSimIO_0400
 * @tc.name: testV1GetSimIO002
 * @tc.desc: GetSimIO, slotId is 1, serialId is 2147483647
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetSimIO002, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    SimIoRequestInfo msg;
    msg.command = 0xc0;
    msg.fileId = 0x2FE2;
    msg.p1 = 0;
    msg.p2 = 0;
    msg.p3 = 15;
    msg.data = "";
    msg.path = "3F00";
    msg.pin2 = "";
    int32_t ret = g_rilInterface->GetSimIO(SLOTID_2, 2147483647, msg);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_GET_SIM_IO));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetSimIO_0500
 * @tc.name: testV1GetSimIO003
 * @tc.desc: GetSimIO, slotId is 0, serialId is -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetSimIO003, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SimIoRequestInfo msg;
    msg.command = 0xc0;
    msg.fileId = 0x2FE2;
    msg.p1 = 0;
    msg.p2 = 0;
    msg.p3 = 15;
    msg.data = "";
    msg.path = "3F00";
    msg.pin2 = "";
    int32_t ret = g_rilInterface->GetSimIO(SLOTID_1, -1, msg);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetSimIO_0600
 * @tc.name: testV1GetSimIO004
 * @tc.desc: GetSimIO, slotId is 1, serialId is -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetSimIO004, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    SimIoRequestInfo msg;
    msg.command = 0xc0;
    msg.fileId = 0x2FE2;
    msg.p1 = 0;
    msg.p2 = 0;
    msg.p3 = 15;
    msg.data = "";
    msg.path = "3F00";
    msg.pin2 = "";
    int32_t ret = g_rilInterface->GetSimIO(SLOTID_2, -1, msg);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetSimIO_0700
 * @tc.name: testV1GetSimIO005
 * @tc.desc: GetSimIO, slotId is 0, msg.p1 = 15, msg.p2 = 15
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetSimIO005, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SimIoRequestInfo msg;
    msg.command = 0xc0;
    msg.fileId = 0x2FE2;
    msg.p1 = 15;
    msg.p2 = 15;
    msg.p3 = 15;
    msg.data = "";
    msg.path = "3F00";
    msg.pin2 = "";
    int32_t ret = g_rilInterface->GetSimIO(SLOTID_1, GetSerialId(), msg);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_GET_SIM_IO));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetSimIO_0800
 * @tc.name: testV1GetSimIO006
 * @tc.desc: GetSimIO, slotId is 0, msg.data = "1qaz"
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetSimIO006, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SimIoRequestInfo msg;
    msg.command = 0xc0;
    msg.fileId = 0x2FE2;
    msg.p1 = 0;
    msg.p2 = 0;
    msg.p3 = 15;
    msg.data = "1qaz";
    msg.path = "3F00";
    msg.pin2 = "";
    int32_t ret = g_rilInterface->GetSimIO(SLOTID_1, GetSerialId(), msg);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_GET_SIM_IO));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetSimIO_0900
 * @tc.name: testV1GetSimIO007
 * @tc.desc: GetSimIO, slotId is 0, msg.pin2 = "1qaz"
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetSimIO007, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SimIoRequestInfo msg;
    msg.command = 0xc0;
    msg.fileId = 0x2FE2;
    msg.p1 = 15;
    msg.p2 = 15;
    msg.p3 = 15;
    msg.data = "";
    msg.path = "3F00";
    msg.pin2 = "1qaz";
    int32_t ret = g_rilInterface->GetSimIO(SLOTID_1, GetSerialId(), msg);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_GET_SIM_IO));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetSimIO_1000
 * @tc.name: testV1GetSimIO008
 * @tc.desc: GetSimIO, slotId is 1, msg.p1 = 15, msg.p2 = 15
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetSimIO008, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    SimIoRequestInfo msg;
    msg.command = 0xc0;
    msg.fileId = 0x2FE2;
    msg.p1 = 15;
    msg.p2 = 15;
    msg.p3 = 15;
    msg.data = "";
    msg.path = "3F00";
    msg.pin2 = "";
    int32_t ret = g_rilInterface->GetSimIO(SLOTID_2, GetSerialId(), msg);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_GET_SIM_IO));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetSimIO_1100
 * @tc.name: testV1GetSimIO009
 * @tc.desc: GetSimIO, slotId is 1, msg.data = "1qaz"
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetSimIO009, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    SimIoRequestInfo msg;
    msg.command = 0xc0;
    msg.fileId = 0x2FE2;
    msg.p1 = 0;
    msg.p2 = 0;
    msg.p3 = 15;
    msg.data = "1qaz";
    msg.path = "3F00";
    msg.pin2 = "";
    int32_t ret = g_rilInterface->GetSimIO(SLOTID_2, GetSerialId(), msg);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_GET_SIM_IO));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetSimIO_1200
 * @tc.name: testV1GetSimIO010
 * @tc.desc: GetSimIO, slotId is 1, msg.pin2 = "1qaz"
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetSimIO010, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    SimIoRequestInfo msg;
    msg.command = 0xc0;
    msg.fileId = 0x2FE2;
    msg.p1 = 15;
    msg.p2 = 15;
    msg.p3 = 15;
    msg.data = "";
    msg.path = "3F00";
    msg.pin2 = "1qaz";
    int32_t ret = g_rilInterface->GetSimIO(SLOTID_2, GetSerialId(), msg);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_GET_SIM_IO));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetSimIO_1300
 * @tc.name: testV1GetSimIO011
 * @tc.desc: GetSimIO, slotId is 0, msg.serial = -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetSimIO011, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SimIoRequestInfo msg;
    msg.command = 0xc0;
    msg.fileId = 0x2FE2;
    msg.p1 = 0;
    msg.p2 = 0;
    msg.p3 = 15;
    msg.serial = -1;
    msg.data = "";
    msg.path = "3F00";
    msg.pin2 = "";
    int32_t ret = g_rilInterface->GetSimIO(SLOTID_1, GetSerialId(), msg);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetSimIO_1400
 * @tc.name: testV1GetSimIO012
 * @tc.desc: GetSimIO, slotId is 1, msg.serial = -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetSimIO012, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    SimIoRequestInfo msg;
    msg.command = 0xc0;
    msg.fileId = 0x2FE2;
    msg.p1 = 0;
    msg.p2 = 0;
    msg.p3 = 15;
    msg.serial = -1;
    msg.data = "";
    msg.path = "3F00";
    msg.pin2 = "";
    int32_t ret = g_rilInterface->GetSimIO(SLOTID_2, GetSerialId(), msg);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetSimIO_1500
 * @tc.name: testV1GetSimIO013
 * @tc.desc: GetSimIO, slotId is 0, msg.serial = 1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetSimIO013, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SimIoRequestInfo msg;
    msg.command = 0xc0;
    msg.fileId = 0x2FE2;
    msg.p1 = 0;
    msg.p2 = 0;
    msg.p3 = 15;
    msg.serial = 1;
    msg.data = "";
    msg.path = "3F00";
    msg.pin2 = "";
    int32_t ret = g_rilInterface->GetSimIO(SLOTID_1, GetSerialId(), msg);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_GET_SIM_IO));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetSimIO_1600
 * @tc.name: testV1GetSimIO014
 * @tc.desc: GetSimIO, slotId is 1, msg.serial = 1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetSimIO014, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    SimIoRequestInfo msg;
    msg.command = 0xc0;
    msg.fileId = 0x2FE2;
    msg.p1 = 0;
    msg.p2 = 0;
    msg.p3 = 15;
    msg.serial = 1;
    msg.data = "";
    msg.path = "3F00";
    msg.pin2 = "";
    int32_t ret = g_rilInterface->GetSimIO(SLOTID_2, GetSerialId(), msg);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_GET_SIM_IO));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetSimIO_1700
 * @tc.name: testV1GetSimIO015
 * @tc.desc: GetSimIO, slotId is 0, msg.serial = 2147483647
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetSimIO015, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SimIoRequestInfo msg;
    msg.command = 0xc0;
    msg.fileId = 0x2FE2;
    msg.p1 = 0;
    msg.p2 = 0;
    msg.p3 = 15;
    msg.serial = 2147483647;
    msg.data = "";
    msg.path = "3F00";
    msg.pin2 = "";
    int32_t ret = g_rilInterface->GetSimIO(SLOTID_1, GetSerialId(), msg);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_GET_SIM_IO));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetSimIO_1800
 * @tc.name: testV1GetSimIO016
 * @tc.desc: GetSimIO, slotId is 1, msg.serial = 2147483647
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetSimIO016, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    SimIoRequestInfo msg;
    msg.command = 0xc0;
    msg.fileId = 0x2FE2;
    msg.p1 = 0;
    msg.p2 = 0;
    msg.p3 = 15;
    msg.serial = 2147483647;
    msg.data = "";
    msg.path = "3F00";
    msg.pin2 = "";
    int32_t ret = g_rilInterface->GetSimIO(SLOTID_2, GetSerialId(), msg);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_GET_SIM_IO));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetImsi_0300
 * @tc.name: testV1GetImsi001
 * @tc.desc: GetImsi, slotId is 0, serialId is -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetImsi001, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->GetImsi(SLOTID_1, -1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetImsi_0400
 * @tc.name: testV1GetImsi002
 * @tc.desc: GetImsi, slotId is 1, serialId is -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetImsi002, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t ret = g_rilInterface->GetImsi(SLOTID_2, -1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetImsi_0500
 * @tc.name: testV1GetImsi003
 * @tc.desc: GetImsi, slotId is 0, serialId is 2147483647
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetImsi003, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->GetImsi(SLOTID_1, 2147483647);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_MODEM_SHUT_DOWN));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetImsi_0600
 * @tc.name: testV1GetImsi004
 * @tc.desc: GetImsi, slotId is 1, serialId is 2147483647
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetImsi004, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t ret = g_rilInterface->GetImsi(SLOTID_2, 2147483647);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_MODEM_SHUT_DOWN));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetImsi_0700
 * @tc.name: testV1GetImsi005
 * @tc.desc: GetImsi, stability test
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetImsi005, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = 0;
    for (int i = 0; i < 1000; i++) {
        ret = g_rilInterface->GetImsi(SLOTID_1, GetSerialId());
        EXPECT_EQ(SUCCESS, ret);
    }
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetPhysicalChannelConfig_0300
 * @tc.name  : testV1GetPhysicalChannelConfig001
 * @tc.desc  : Call function GetPhysicalChannelConfig with serialId as 1000000001.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetPhysicalChannelConfig001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->GetPhysicalChannelConfig(SLOTID_1, 1000000001);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_NETWORK_GET_PHYSICAL_CHANNEL_CONFIG));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetPhysicalChannelConfig_0400
 * @tc.name  : testV1GetPhysicalChannelConfig002
 * @tc.desc  : Call function GetPhysicalChannelConfig with serialId as 0.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetPhysicalChannelConfig002, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->GetPhysicalChannelConfig(SLOTID_1, 0);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_NETWORK_GET_PHYSICAL_CHANNEL_CONFIG));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetPhysicalChannelConfig_0500
 * @tc.name  : testV1GetPhysicalChannelConfig003
 * @tc.desc  : Call function GetPhysicalChannelConfig with serialId as -1.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetPhysicalChannelConfig003, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->GetPhysicalChannelConfig(SLOTID_1, -1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetPhysicalChannelConfig_0600
 * @tc.name  : testV1GetPhysicalChannelConfig004
 * @tc.desc  : Call function GetPhysicalChannelConfig with serialId as 1000000001 100times.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetPhysicalChannelConfig004, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = 0;
    for (int i = 0; i < 100; i++) {
        ret = g_rilInterface->GetPhysicalChannelConfig(SLOTID_1, 1000000001);
        WaitFor(WAIT_TIME_SECOND);
        EXPECT_EQ(SUCCESS, ret);
        ASSERT_TRUE(GetBoolResult(HdiId::HREQ_NETWORK_GET_PHYSICAL_CHANNEL_CONFIG));
    }
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetPhysicalChannelConfig_0700
 * @tc.name  : testV1GetPhysicalChannelConfig005
 * @tc.desc  : Call function GetPhysicalChannelConfig with serialId as 1000000001.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetPhysicalChannelConfig005, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t ret = g_rilInterface->GetPhysicalChannelConfig(SLOTID_2, 1000000001);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_NETWORK_GET_PHYSICAL_CHANNEL_CONFIG));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetPhysicalChannelConfig_0800
 * @tc.name  : testV1GetPhysicalChannelConfig006
 * @tc.desc  : Call function GetPhysicalChannelConfig with serialId as 0.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetPhysicalChannelConfig006, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t ret = g_rilInterface->GetPhysicalChannelConfig(SLOTID_2, 0);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_NETWORK_GET_PHYSICAL_CHANNEL_CONFIG));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetPhysicalChannelConfig_0900
 * @tc.name  : testV1GetPhysicalChannelConfig007
 * @tc.desc  : Call function GetPhysicalChannelConfig with serialId as -1.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetPhysicalChannelConfig007, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t ret = g_rilInterface->GetPhysicalChannelConfig(SLOTID_2, -1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetPhysicalChannelConfig_1000
 * @tc.name  : testV1GetPhysicalChannelConfig008
 * @tc.desc  : Call function GetPhysicalChannelConfig with serialId as 1000000001 100times.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetPhysicalChannelConfig008, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t ret = 0;
    for (int i = 0; i < 100; i++) {
        ret = g_rilInterface->GetPhysicalChannelConfig(SLOTID_2, 1000000001);
        WaitFor(WAIT_TIME_SECOND);
        EXPECT_EQ(SUCCESS, ret);
        ASSERT_TRUE(GetBoolResult(HdiId::HREQ_NETWORK_GET_PHYSICAL_CHANNEL_CONFIG));
    }
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetOperatorInfo_0300
 * @tc.name  : testV1GetOperatorInfo001
 * @tc.desc  : Call function GetOperatorInfo with serialId as 1000000001.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetOperatorInfo001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->GetOperatorInfo(SLOTID_1, 1000000001);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_NETWORK_GET_OPERATOR_INFO));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetOperatorInfo_0400
 * @tc.name  : testV1GetOperatorInfo002
 * @tc.desc  : Call function GetOperatorInfo with serialId as 0.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetOperatorInfo002, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->GetOperatorInfo(SLOTID_1, 0);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_NETWORK_GET_OPERATOR_INFO));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetOperatorInfo_0500
 * @tc.name  : testV1GetOperatorInfo003
 * @tc.desc  : Call function GetOperatorInfo with serialId as -1.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetOperatorInfo003, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->GetOperatorInfo(SLOTID_1, -1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetOperatorInfo_0600
 * @tc.name  : testV1GetOperatorInfo004
 * @tc.desc  : Call function GetOperatorInfo with serialId as 1000000001 100times.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetOperatorInfo004, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = 0;
    for (int i = 0; i < 100; i++) {
        ret = g_rilInterface->GetOperatorInfo(SLOTID_1, 1000000001);
        WaitFor(WAIT_TIME_SECOND);
        EXPECT_EQ(SUCCESS, ret);
        ASSERT_TRUE(GetBoolResult(HdiId::HREQ_NETWORK_GET_OPERATOR_INFO));
    }
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetOperatorInfo_0700
 * @tc.name  : testV1GetOperatorInfo005
 * @tc.desc  : Call function GetOperatorInfo with serialId as 1000000001.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetOperatorInfo005, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t ret = g_rilInterface->GetOperatorInfo(SLOTID_2, 1000000001);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_NETWORK_GET_OPERATOR_INFO));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetOperatorInfo_0800
 * @tc.name  : testV1GetOperatorInfo006
 * @tc.desc  : Call function GetOperatorInfo with serialId as 0.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetOperatorInfo006, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t ret = g_rilInterface->GetOperatorInfo(SLOTID_2, 0);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_NETWORK_GET_OPERATOR_INFO));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetOperatorInfo_0900
 * @tc.name  : testV1GetOperatorInfo007
 * @tc.desc  : Call function GetOperatorInfo with serialId as -1.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetOperatorInfo007, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t ret = g_rilInterface->GetOperatorInfo(SLOTID_2, -1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetOperatorInfo_1000
 * @tc.name  : testV1GetOperatorInfo008
 * @tc.desc  : Call function GetOperatorInfo with serialId as 1000000001 100times.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetOperatorInfo008, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t ret = 0;
    for (int i = 0; i < 100; i++) {
        ret = g_rilInterface->GetOperatorInfo(SLOTID_2, 1000000001);
        WaitFor(WAIT_TIME_SECOND);
        EXPECT_EQ(SUCCESS, ret);
        ASSERT_TRUE(GetBoolResult(HdiId::HREQ_NETWORK_GET_OPERATOR_INFO));
    }
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetPsRegStatus_0300
 * @tc.name  : testV1GetPsRegStatus001
 * @tc.desc  : Call function GetPsRegStatus with serialId as 1000000001.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetPsRegStatus001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->GetPsRegStatus(SLOTID_1, 1000000001);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_NETWORK_GET_PS_REG_STATUS));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetPsRegStatus_0400
 * @tc.name  : testV1GetPsRegStatus002
 * @tc.desc  : Call function GetPsRegStatus with serialId as 0.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetPsRegStatus002, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->GetPsRegStatus(SLOTID_1, 0);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_NETWORK_GET_PS_REG_STATUS));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetPsRegStatus_0500
 * @tc.name  : testV1GetPsRegStatus003
 * @tc.desc  : Call function GetPsRegStatus with serialId as -1.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetPsRegStatus003, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->GetPsRegStatus(SLOTID_1, -1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetPsRegStatus_0600
 * @tc.name  : testV1GetPsRegStatus004
 * @tc.desc  : Call function GetPsRegStatus with serialId as 1000000001 100times.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetPsRegStatus004, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = 0;
    for (int i = 0; i < 100; i++) {
        ret = g_rilInterface->GetPsRegStatus(SLOTID_1, 1000000001);
        WaitFor(WAIT_TIME_SECOND);
        EXPECT_EQ(SUCCESS, ret);
        ASSERT_TRUE(GetBoolResult(HdiId::HREQ_NETWORK_GET_PS_REG_STATUS));
    }
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetPsRegStatus_0700
 * @tc.name  : testV1GetPsRegStatus005
 * @tc.desc  : Call function GetPsRegStatus with serialId as 1000000001.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetPsRegStatus005, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t ret = g_rilInterface->GetPsRegStatus(SLOTID_2, 1000000001);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_NETWORK_GET_PS_REG_STATUS));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetPsRegStatus_0800
 * @tc.name  : testV1GetPsRegStatus006
 * @tc.desc  : Call function GetPsRegStatus with serialId as 0.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetPsRegStatus006, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t ret = g_rilInterface->GetPsRegStatus(SLOTID_2, 0);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_NETWORK_GET_PS_REG_STATUS));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetPsRegStatus_0900
 * @tc.name  : testV1GetPsRegStatus007
 * @tc.desc  : Call function GetPsRegStatus with serialId as -1.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetPsRegStatus007, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t ret = g_rilInterface->GetPsRegStatus(SLOTID_2, -1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetPsRegStatus_1000
 * @tc.name  : testV1GetPsRegStatus008
 * @tc.desc  : Call function GetPsRegStatus with serialId as 1000000001 100times.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetPsRegStatus008, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t ret = 0;
    for (int i = 0; i < 100; i++) {
        ret = g_rilInterface->GetPsRegStatus(SLOTID_2, 1000000001);
        WaitFor(WAIT_TIME_SECOND);
        EXPECT_EQ(SUCCESS, ret);
        ASSERT_TRUE(GetBoolResult(HdiId::HREQ_NETWORK_GET_PS_REG_STATUS));
    }
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetCsRegStatus_0300
 * @tc.name  : testV1GetCsRegStatus001
 * @tc.desc  : Call function GetCsRegStatus with serialId as 1000000001.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetCsRegStatus001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->GetCsRegStatus(SLOTID_1, 1000000001);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_NETWORK_GET_CS_REG_STATUS));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetCsRegStatus_0400
 * @tc.name  : testV1GetCsRegStatus002
 * @tc.desc  : Call function GetCsRegStatus with serialId as 0.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetCsRegStatus002, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->GetCsRegStatus(SLOTID_1, 0);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_NETWORK_GET_CS_REG_STATUS));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetCsRegStatus_0500
 * @tc.name  : testV1GetCsRegStatus003
 * @tc.desc  : Call function GetCsRegStatus with serialId as -1.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetCsRegStatus003, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->GetCsRegStatus(SLOTID_1, -1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetCsRegStatus_0600
 * @tc.name  : testV1GetCsRegStatus004
 * @tc.desc  : Call function GetCsRegStatus with serialId as 1000000001 100times.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetCsRegStatus004, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = 0;
    for (int i = 0; i < 100; i++) {
        ret = g_rilInterface->GetCsRegStatus(SLOTID_1, 1000000001);
        WaitFor(WAIT_TIME_SECOND);
        EXPECT_EQ(SUCCESS, ret);
        ASSERT_TRUE(GetBoolResult(HdiId::HREQ_NETWORK_GET_CS_REG_STATUS));
    }
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetCsRegStatus_0700
 * @tc.name  : testV1GetCsRegStatus005
 * @tc.desc  : Call function GetCsRegStatus with serialId as 1000000001.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetCsRegStatus005, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t ret = g_rilInterface->GetCsRegStatus(SLOTID_2, 1000000001);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_NETWORK_GET_CS_REG_STATUS));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetCsRegStatus_0800
 * @tc.name  : testV1GetCsRegStatus006
 * @tc.desc  : Call function GetCsRegStatus with serialId as 0.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetCsRegStatus006, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t ret = g_rilInterface->GetCsRegStatus(SLOTID_2, 0);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_NETWORK_GET_CS_REG_STATUS));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetCsRegStatus_0900
 * @tc.name  : testV1GetCsRegStatus007
 * @tc.desc  : Call function GetCsRegStatus with serialId as -1.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetCsRegStatus007, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t ret = g_rilInterface->GetCsRegStatus(SLOTID_2, -1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetCsRegStatus_1000
 * @tc.name  : testV1GetCsRegStatus008
 * @tc.desc  : Call function GetCsRegStatus with serialId as 1000000001 100times.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetCsRegStatus008, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t ret = 0;
    for (int i = 0; i < 100; i++) {
        ret = g_rilInterface->GetCsRegStatus(SLOTID_2, 1000000001);
        WaitFor(WAIT_TIME_SECOND);
        EXPECT_EQ(SUCCESS, ret);
        ASSERT_TRUE(GetBoolResult(HdiId::HREQ_NETWORK_GET_CS_REG_STATUS));
    }
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetSignalStrength_0300
 * @tc.name  : testV1GetSignalStrength001
 * @tc.desc  : Call function GetSignalStrength with serialId as 1000000001.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetSignalStrength001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->GetSignalStrength(SLOTID_1, 1000000001);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_NETWORK_GET_SIGNAL_STRENGTH));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetSignalStrength_0400
 * @tc.name  : testV1GetSignalStrength002
 * @tc.desc  : Call function GetSignalStrength with serialId as 0.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetSignalStrength002, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->GetSignalStrength(SLOTID_1, 0);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_NETWORK_GET_SIGNAL_STRENGTH));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetSignalStrength_0500
 * @tc.name  : testV1GetSignalStrength003
 * @tc.desc  : Call function GetSignalStrength with serialId as -1.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetSignalStrength003, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->GetSignalStrength(SLOTID_1, -1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetSignalStrength_0600
 * @tc.name  : testV1GetSignalStrength004
 * @tc.desc  : Call function GetSignalStrength with serialId as 1000000001 100times.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetSignalStrength004, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = 0;
    for (int i = 0; i < 100; i++) {
        ret = g_rilInterface->GetSignalStrength(SLOTID_1, 1000000001);
        WaitFor(WAIT_TIME_SECOND);
        EXPECT_EQ(SUCCESS, ret);
        ASSERT_TRUE(GetBoolResult(HdiId::HREQ_NETWORK_GET_SIGNAL_STRENGTH));
    }
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetSignalStrength_0700
 * @tc.name  : testV1GetSignalStrength005
 * @tc.desc  : Call function GetSignalStrength with serialId as 1000000001.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetSignalStrength005, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t ret = g_rilInterface->GetSignalStrength(SLOTID_2, 1000000001);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_NETWORK_GET_SIGNAL_STRENGTH));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetSignalStrength_0800
 * @tc.name  : testV1GetSignalStrength006
 * @tc.desc  : Call function GetSignalStrength with serialId as 0.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetSignalStrength006, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t ret = g_rilInterface->GetSignalStrength(SLOTID_2, 0);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_NETWORK_GET_SIGNAL_STRENGTH));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetSignalStrength_0900
 * @tc.name  : testV1GetSignalStrength007
 * @tc.desc  : Call function GetSignalStrength with serialId as -1.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetSignalStrength007, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t ret = g_rilInterface->GetSignalStrength(SLOTID_2, -1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetSignalStrength_1000
 * @tc.name  : testV1GetSignalStrength008
 * @tc.desc  : Call function GetSignalStrength with serialId as 1000000001 100times.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetSignalStrength008, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t ret = 0;
    for (int i = 0; i < 100; i++) {
        ret = g_rilInterface->GetSignalStrength(SLOTID_2, 1000000001);
        WaitFor(WAIT_TIME_SECOND);
        EXPECT_EQ(SUCCESS, ret);
        ASSERT_TRUE(GetBoolResult(HdiId::HREQ_NETWORK_GET_SIGNAL_STRENGTH));
    }
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1UnlockSimLock_0300
 * @tc.name  : testV1UnlockSimLock001
 * @tc.desc  : Call function UnlockSimLock with serialId as 1000000001.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1UnlockSimLock001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->UnlockSimLock(SLOTID_1, 1000000001, 0, TEST_STORAGE_PDU);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_UNLOCK_SIM_LOCK));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1UnlockSimLock_0400
 * @tc.name  : testV1UnlockSimLock002
 * @tc.desc  : Call function UnlockSimLock with serialId as 0.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1UnlockSimLock002, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->UnlockSimLock(SLOTID_1, 0, 0, TEST_STORAGE_PDU);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_UNLOCK_SIM_LOCK));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1UnlockSimLock_0500
 * @tc.name  : testV1UnlockSimLock003
 * @tc.desc  : Call function UnlockSimLock with serialId as -1.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1UnlockSimLock003, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->UnlockSimLock(SLOTID_1, -1, 0, TEST_STORAGE_PDU);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1UnlockSimLock_0600
 * @tc.name  : testV1UnlockSimLock004
 * @tc.desc  : Call function UnlockSimLock with serialId as 1000000001 100times.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1UnlockSimLock004, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = 0;
    for (int i = 0; i < 100; i++) {
        ret = g_rilInterface->UnlockSimLock(SLOTID_1, 1000000001, 0, TEST_STORAGE_PDU);
        WaitFor(WAIT_TIME_SECOND);
        EXPECT_EQ(SUCCESS, ret);
        ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_UNLOCK_SIM_LOCK));
    }
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1UnlockSimLock_0700
 * @tc.name  : testV1UnlockSimLock005
 * @tc.desc  : Call function UnlockSimLock with serialId as 1000000001.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1UnlockSimLock005, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t ret = g_rilInterface->UnlockSimLock(SLOTID_2, 1000000001, 0, TEST_STORAGE_PDU);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_UNLOCK_SIM_LOCK));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1UnlockSimLock_0800
 * @tc.name  : testV1UnlockSimLock006
 * @tc.desc  : Call function UnlockSimLock with serialId as 0.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1UnlockSimLock006, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t ret = g_rilInterface->UnlockSimLock(SLOTID_2, 0, 0, TEST_STORAGE_PDU);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_UNLOCK_SIM_LOCK));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1UnlockSimLock_0900
 * @tc.name  : testV1UnlockSimLock007
 * @tc.desc  : Call function UnlockSimLock with serialId as -1.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1UnlockSimLock007, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t ret = g_rilInterface->UnlockSimLock(SLOTID_2, -1, 0, TEST_STORAGE_PDU);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1UnlockSimLock_1000
 * @tc.name  : testV1UnlockSimLock008
 * @tc.desc  : Call function UnlockSimLock with serialId as 1000000001 100times.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1UnlockSimLock008, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t ret = 0;
    for (int i = 0; i < 100; i++) {
        ret = g_rilInterface->UnlockSimLock(SLOTID_2, 1000000001, 0, TEST_STORAGE_PDU);
        WaitFor(WAIT_TIME_SECOND);
        EXPECT_EQ(SUCCESS, ret);
        ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_UNLOCK_SIM_LOCK));
    }
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1UnlockSimLock_1100
 * @tc.name  : testV1UnlockSimLock009
 * @tc.desc  : Call function UnlockSimLock with key as TEST_SEND_PDU.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1UnlockSimLock009, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t ret = g_rilInterface->UnlockSimLock(SLOTID_2, GetSerialId(), 0, TEST_SEND_PDU);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_UNLOCK_SIM_LOCK));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1UnlockSimLock_1200
 * @tc.name  : testV1UnlockSimLock010
 * @tc.desc  : Call function UnlockSimLock with key as TEST_SMSC_PDU.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1UnlockSimLock010, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t ret = g_rilInterface->UnlockSimLock(SLOTID_2, GetSerialId(), 0, TEST_SMSC_PDU);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_UNLOCK_SIM_LOCK));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1UnlockSimLock_1300
 * @tc.name  : testV1UnlockSimLock011
 * @tc.desc  : Call function UnlockSimLock with key as TEST_CDMA_PDU.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1UnlockSimLock011, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t ret = g_rilInterface->UnlockSimLock(SLOTID_2, GetSerialId(), 0, TEST_CDMA_PDU);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_UNLOCK_SIM_LOCK));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1UnlockSimLock_1400
 * @tc.name  : testV1UnlockSimLock012
 * @tc.desc  : Call function UnlockSimLock with key as TEST_SMSC_ADDR.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1UnlockSimLock012, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t ret = g_rilInterface->UnlockSimLock(SLOTID_2, GetSerialId(), 0, TEST_SMSC_ADDR);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_UNLOCK_SIM_LOCK));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1UnlockSimLock_1500
 * @tc.name  : testV1UnlockSimLock013
 * @tc.desc  : Call function UnlockSimLock with key as TEST_ID_LIST.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1UnlockSimLock013, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t ret = g_rilInterface->UnlockSimLock(SLOTID_2, GetSerialId(), 0, TEST_ID_LIST);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_UNLOCK_SIM_LOCK));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1UnlockSimLock_1600
 * @tc.name  : testV1UnlockSimLock014
 * @tc.desc  : Call function UnlockSimLock with key as TEST_DCS_LIST.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1UnlockSimLock014, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t ret = g_rilInterface->UnlockSimLock(SLOTID_2, GetSerialId(), 0, TEST_DCS_LIST);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_UNLOCK_SIM_LOCK));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1UnlockSimLock_1700
 * @tc.name  : testV1UnlockSimLock015
 * @tc.desc  : Call function UnlockSimLock with lockType as 1.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1UnlockSimLock015, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->UnlockSimLock(SLOTID_1, GetSerialId(), 1, TEST_STORAGE_PDU);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_UNLOCK_SIM_LOCK));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1UnlockSimLock_1800
 * @tc.name  : testV1UnlockSimLock016
 * @tc.desc  : Call function UnlockSimLock with lockType as -1.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1UnlockSimLock016, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->UnlockSimLock(SLOTID_1, GetSerialId(), -1, TEST_STORAGE_PDU);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SimAuthentication_0300
 * @tc.name  : testV1SimAuthentication001
 * @tc.desc  : Call function SimAuthentication with serialId as 1000000001.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SimAuthentication001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SimAuthenticationRequestInfo simAuthInfo;
    simAuthInfo.aid = TEST_STORAGE_PDU;
    simAuthInfo.authData = TEST_STORAGE_PDU;
    int32_t ret = g_rilInterface->SimAuthentication(SLOTID_1, 1000000001, simAuthInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_AUTHENTICATION));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SimAuthentication_0400
 * @tc.name  : testV1SimAuthentication002
 * @tc.desc  : Call function SimAuthentication with serialId as 0.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SimAuthentication002, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SimAuthenticationRequestInfo simAuthInfo;
    simAuthInfo.aid = TEST_STORAGE_PDU;
    simAuthInfo.authData = TEST_STORAGE_PDU;
    int32_t ret = g_rilInterface->SimAuthentication(SLOTID_1, 0, simAuthInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_AUTHENTICATION));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SimAuthentication_0500
 * @tc.name  : testV1SimAuthentication003
 * @tc.desc  : Call function SimAuthentication with serialId as -1.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SimAuthentication003, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SimAuthenticationRequestInfo simAuthInfo;
    simAuthInfo.aid = TEST_STORAGE_PDU;
    simAuthInfo.authData = TEST_STORAGE_PDU;
    int32_t ret = g_rilInterface->SimAuthentication(SLOTID_1, -1, simAuthInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SimAuthentication_0600
 * @tc.name  : testV1SimAuthentication004
 * @tc.desc  : Call function SimAuthentication with serialId as 1000000001 100times.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SimAuthentication004, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = 0;
    SimAuthenticationRequestInfo simAuthInfo;
    simAuthInfo.aid = TEST_STORAGE_PDU;
    simAuthInfo.authData = TEST_STORAGE_PDU;
    for (int i = 0; i < 100; i++) {
        ret = g_rilInterface->SimAuthentication(SLOTID_1, 1000000001, simAuthInfo);
        WaitFor(WAIT_TIME_SECOND);
        EXPECT_EQ(SUCCESS, ret);
        ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_AUTHENTICATION));
    }
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SimAuthentication_0700
 * @tc.name  : testV1SimAuthentication005
 * @tc.desc  : Call function SimAuthentication with serialId as 1000000001.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SimAuthentication005, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    SimAuthenticationRequestInfo simAuthInfo;
    simAuthInfo.aid = TEST_STORAGE_PDU;
    simAuthInfo.authData = TEST_STORAGE_PDU;
    int32_t ret = g_rilInterface->SimAuthentication(SLOTID_2, 1000000001, simAuthInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_AUTHENTICATION));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SimAuthentication_0800
 * @tc.name  : testV1SimAuthentication006
 * @tc.desc  : Call function SimAuthentication with serialId as 0.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SimAuthentication006, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    SimAuthenticationRequestInfo simAuthInfo;
    simAuthInfo.aid = TEST_STORAGE_PDU;
    simAuthInfo.authData = TEST_STORAGE_PDU;
    int32_t ret = g_rilInterface->SimAuthentication(SLOTID_2, 0, simAuthInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_AUTHENTICATION));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SimAuthentication_0900
 * @tc.name  : testV1GetSimAuthentication007
 * @tc.desc  : Call function SimAuthentication with serialId as -1.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetSimAuthentication007, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    SimAuthenticationRequestInfo simAuthInfo;
    simAuthInfo.aid = TEST_STORAGE_PDU;
    simAuthInfo.authData = TEST_STORAGE_PDU;
    int32_t ret = g_rilInterface->SimAuthentication(SLOTID_2, -1, simAuthInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SimAuthentication_1000
 * @tc.name  : testV1SimAuthentication008
 * @tc.desc  : Call function SimAuthentication with serialId as 1000000001 100times.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SimAuthentication008, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t ret = 0;
    SimAuthenticationRequestInfo simAuthInfo;
    simAuthInfo.aid = TEST_STORAGE_PDU;
    simAuthInfo.authData = TEST_STORAGE_PDU;
    for (int i = 0; i < 100; i++) {
        ret = g_rilInterface->SimAuthentication(SLOTID_2, 1000000001, simAuthInfo);
        WaitFor(WAIT_TIME_SECOND);
        EXPECT_EQ(SUCCESS, ret);
        ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_AUTHENTICATION));
    }
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SimAuthentication_1100
 * @tc.name  : testV1SimAuthentication009
 * @tc.desc  : Call function SimAuthentication with aid as TEST_SEND_PDU.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SimAuthentication009, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t ret = 0;
    SimAuthenticationRequestInfo simAuthInfo;
    simAuthInfo.aid = TEST_SEND_PDU;
    simAuthInfo.authData = TEST_STORAGE_PDU;
    ret = g_rilInterface->SimAuthentication(SLOTID_1, GetSerialId(), simAuthInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_AUTHENTICATION));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SimAuthentication_1200
 * @tc.name  : testV1SimAuthentication010
 * @tc.desc  : Call function SimAuthentication with aid as TEST_SMSC_PDU.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SimAuthentication010, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t ret = 0;
    SimAuthenticationRequestInfo simAuthInfo;
    simAuthInfo.aid = TEST_SMSC_PDU;
    simAuthInfo.authData = TEST_STORAGE_PDU;
    ret = g_rilInterface->SimAuthentication(SLOTID_1, GetSerialId(), simAuthInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_AUTHENTICATION));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SimAuthentication_1300
 * @tc.name  : testV1SimAuthentication011
 * @tc.desc  : Call function SimAuthentication with aid as TEST_CDMA_PDU.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SimAuthentication011, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t ret = 0;
    SimAuthenticationRequestInfo simAuthInfo;
    simAuthInfo.aid = TEST_CDMA_PDU;
    simAuthInfo.authData = TEST_STORAGE_PDU;
    ret = g_rilInterface->SimAuthentication(SLOTID_1, GetSerialId(), simAuthInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_AUTHENTICATION));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SimAuthentication_1400
 * @tc.name  : testV1SimAuthentication012
 * @tc.desc  : Call function SimAuthentication with aid as TEST_SMSC_ADDR.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SimAuthentication012, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t ret = 0;
    SimAuthenticationRequestInfo simAuthInfo;
    simAuthInfo.aid = TEST_SMSC_ADDR;
    simAuthInfo.authData = TEST_STORAGE_PDU;
    ret = g_rilInterface->SimAuthentication(SLOTID_1, GetSerialId(), simAuthInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_AUTHENTICATION));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SimAuthentication_1500
 * @tc.name  : testV1SimAuthentication013
 * @tc.desc  : Call function SimAuthentication with aid as TEST_ID_LIST.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SimAuthentication013, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t ret = 0;
    SimAuthenticationRequestInfo simAuthInfo;
    simAuthInfo.aid = TEST_ID_LIST;
    simAuthInfo.authData = TEST_STORAGE_PDU;
    ret = g_rilInterface->SimAuthentication(SLOTID_1, GetSerialId(), simAuthInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_AUTHENTICATION));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SimAuthentication_1600
 * @tc.name  : testV1SimAuthentication014
 * @tc.desc  : Call function SimAuthentication with aid as TEST_DCS_LIST.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SimAuthentication014, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t ret = 0;
    SimAuthenticationRequestInfo simAuthInfo;
    simAuthInfo.aid = TEST_DCS_LIST;
    simAuthInfo.authData = TEST_STORAGE_PDU;
    ret = g_rilInterface->SimAuthentication(SLOTID_1, GetSerialId(), simAuthInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_AUTHENTICATION));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SimAuthentication_1700
 * @tc.name  : testV1SimAuthentication015
 * @tc.desc  : Call function SimAuthentication with authData as TEST_SEND_PDU.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SimAuthentication015, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t ret = 0;
    SimAuthenticationRequestInfo simAuthInfo;
    simAuthInfo.aid = TEST_STORAGE_PDU;
    simAuthInfo.authData = TEST_SEND_PDU;
    ret = g_rilInterface->SimAuthentication(SLOTID_1, GetSerialId(), simAuthInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_AUTHENTICATION));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SimAuthentication_1800
 * @tc.name  : testV1SimAuthentication016
 * @tc.desc  : Call function SimAuthentication with authData as TEST_SMSC_PDU.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SimAuthentication016, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t ret = 0;
    SimAuthenticationRequestInfo simAuthInfo;
    simAuthInfo.aid = TEST_STORAGE_PDU;
    simAuthInfo.authData = TEST_SMSC_PDU;
    ret = g_rilInterface->SimAuthentication(SLOTID_1, GetSerialId(), simAuthInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_AUTHENTICATION));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SimAuthentication_1900
 * @tc.name  : testV1SimAuthentication017
 * @tc.desc  : Call function SimAuthentication with authData as TEST_CDMA_PDU.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SimAuthentication017, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t ret = 0;
    SimAuthenticationRequestInfo simAuthInfo;
    simAuthInfo.aid = TEST_STORAGE_PDU;
    simAuthInfo.authData = TEST_CDMA_PDU;
    ret = g_rilInterface->SimAuthentication(SLOTID_1, GetSerialId(), simAuthInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_AUTHENTICATION));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SimAuthentication_2000
 * @tc.name  : testV1SimAuthentication018
 * @tc.desc  : Call function SimAuthentication with authData as TEST_SMSC_ADDR.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SimAuthentication018, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t ret = 0;
    SimAuthenticationRequestInfo simAuthInfo;
    simAuthInfo.aid = TEST_STORAGE_PDU;
    simAuthInfo.authData = TEST_SMSC_ADDR;
    ret = g_rilInterface->SimAuthentication(SLOTID_1, GetSerialId(), simAuthInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_AUTHENTICATION));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SimAuthentication_2100
 * @tc.name  : testV1SimAuthentication019
 * @tc.desc  : Call function SimAuthentication with authData as TEST_ID_LIST.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SimAuthentication019, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t ret = 0;
    SimAuthenticationRequestInfo simAuthInfo;
    simAuthInfo.aid = TEST_STORAGE_PDU;
    simAuthInfo.authData = TEST_ID_LIST;
    ret = g_rilInterface->SimAuthentication(SLOTID_1, GetSerialId(), simAuthInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_AUTHENTICATION));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SimAuthentication_2200
 * @tc.name  : testV1SimAuthentication020
 * @tc.desc  : Call function SimAuthentication with authData as TEST_DCS_LIST.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SimAuthentication020, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t ret = 0;
    SimAuthenticationRequestInfo simAuthInfo;
    simAuthInfo.aid = TEST_STORAGE_PDU;
    simAuthInfo.authData = TEST_DCS_LIST;
    ret = g_rilInterface->SimAuthentication(SLOTID_1, GetSerialId(), simAuthInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_AUTHENTICATION));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SendGsmSms_0100
 * @tc.name: testV1SendGsmSms001
 * @tc.desc: Call function V1 SendGsmSms, stability test
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendGsmSms001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = 0;
    for (int i = 0; i < 100; i++) {
        GsmSmsMessageInfo msg;
        msg.smscPdu = TEST_SMSC_PDU;
        msg.pdu = TEST_SEND_PDU;
        ret = g_rilInterface->SendGsmSms(SLOTID_1, GetSerialId(), msg);
        EXPECT_EQ(SUCCESS, ret);
        ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SMS_SEND_GSM_SMS));
    }
}
/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SendGsmSms_0200
 * @tc.name: testV1SendGsmSms002
 * @tc.desc: Call function V1 SendGsmSms, msg.smscPdu is "+-*%"
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendGsmSms002, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    GsmSmsMessageInfo msg;
    msg.smscPdu = "+-*%";
    msg.pdu = TEST_SEND_PDU;
    int32_t ret = g_rilInterface->SendGsmSms(SLOTID_1, GetSerialId(), msg);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SMS_SEND_GSM_SMS));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SendGsmSms_0300
 * @tc.name: testV1SendGsmSms003
 * @tc.desc: Call function V1 SendGsmSms, msg.pdu is "+-*% "
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendGsmSms003, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    GsmSmsMessageInfo msg;
    msg.smscPdu = TEST_SMSC_PDU;
    msg.pdu = "+-*%";
    int32_t ret = g_rilInterface->SendGsmSms(SLOTID_1, GetSerialId(), msg);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SMS_SEND_GSM_SMS));
}
/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SendGsmSms_0400
 * @tc.name: testV1SendGsmSms004
 * @tc.desc: Call function V1 SendGsmSms, msg.smscPdu is "!&#"
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendGsmSms004, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    GsmSmsMessageInfo msg;
    msg.smscPdu = "!&#";
    msg.pdu = TEST_SEND_PDU;
    int32_t ret = g_rilInterface->SendGsmSms(SLOTID_1, GetSerialId(), msg);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SMS_SEND_GSM_SMS));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SendGsmSms_0500
 * @tc.name: testV1SendGsmSms005
 * @tc.desc: Call function V1 SendGsmSms, msg.pdu is "!&#"
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendGsmSms005, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    GsmSmsMessageInfo msg;
    msg.smscPdu = TEST_SMSC_PDU;
    msg.pdu = "!&#";
    int32_t ret = g_rilInterface->SendGsmSms(SLOTID_1, GetSerialId(), msg);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SMS_SEND_GSM_SMS));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SendGsmSms_0600
 * @tc.name: testV1SendGsmSms006
 * @tc.desc: Call function V1 SendGsmSms, serialId is -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendGsmSms006, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    GsmSmsMessageInfo msg;
    msg.smscPdu = TEST_SMSC_PDU;
    msg.pdu = TEST_SEND_PDU;
    int32_t ret = g_rilInterface->SendGsmSms(SLOTID_1, -1, msg);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SMS_SEND_GSM_SMS));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SendGsmSms_0700
 * @tc.name: testV1SendGsmSms007
 * @tc.desc: Call function V1 SendGsmSms, serialId is 0
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendGsmSms007, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    GsmSmsMessageInfo msg;
    msg.smscPdu = TEST_SMSC_PDU;
    msg.pdu = TEST_SEND_PDU;
    int32_t ret = g_rilInterface->SendGsmSms(SLOTID_1, 0, msg);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SMS_SEND_GSM_SMS));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SendGsmSms_0800
 * @tc.name: testV1SendGsmSms008
 * @tc.desc: Call function V1 SendGsmSms, serialId is 1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendGsmSms008, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    GsmSmsMessageInfo msg;
    msg.smscPdu = TEST_SMSC_PDU;
    msg.pdu = TEST_SEND_PDU;
    int32_t ret = g_rilInterface->SendGsmSms(SLOTID_1, 1, msg);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SMS_SEND_GSM_SMS));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SendGsmSms_0900
 * @tc.name: testV1SendGsmSms009
 * @tc.desc: Call function V1 SendGsmSms, serialId is 2
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendGsmSms009, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    GsmSmsMessageInfo msg;
    msg.smscPdu = TEST_SMSC_PDU;
    msg.pdu = TEST_SEND_PDU;
    int32_t ret = g_rilInterface->SendGsmSms(SLOTID_1, 2, msg);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SMS_SEND_GSM_SMS));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SendGsmSms_1000
 * @tc.name: testV1SendGsmSms010
 * @tc.desc: Call function V1 SendGsmSms, serialId is 3
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendGsmSms010, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    GsmSmsMessageInfo msg;
    msg.smscPdu = TEST_SMSC_PDU;
    msg.pdu = TEST_SEND_PDU;
    int32_t ret = g_rilInterface->SendGsmSms(SLOTID_1, 3, msg);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SMS_SEND_GSM_SMS));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SendGsmSms_1100
 * @tc.name: testV1SendGsmSms011
 * @tc.desc: Call function V1 SendGsmSms, serialId is -2147483648
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendGsmSms011, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    GsmSmsMessageInfo msg;
    msg.smscPdu = TEST_SMSC_PDU;
    msg.pdu = TEST_SEND_PDU;
    int32_t ret = g_rilInterface->SendGsmSms(SLOTID_1, -2147483648, msg);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SMS_SEND_GSM_SMS));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SendGsmSms_1200
 * @tc.name: testV1SendGsmSms012
 * @tc.desc: Call function V1 SendGsmSms, serialId is 2147483647
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendGsmSms012, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    GsmSmsMessageInfo msg;
    msg.smscPdu = TEST_SMSC_PDU;
    msg.pdu = TEST_SEND_PDU;
    int32_t ret = g_rilInterface->SendGsmSms(SLOTID_1, 2147483647, msg);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SMS_SEND_GSM_SMS));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SendGsmSms_1300
 * @tc.name: testV1SendGsmSms013
 * @tc.desc: Call function V1 SendGsmSms, msg.serial is -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendGsmSms013, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    GsmSmsMessageInfo msg;
    msg.serial = -1;
    msg.smscPdu = TEST_SMSC_PDU;
    msg.pdu = TEST_SEND_PDU;
    int32_t ret = g_rilInterface->SendGsmSms(SLOTID_1, GetSerialId(), msg);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SMS_SEND_GSM_SMS));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SendGsmSms_1400
 * @tc.name: testV1SendGsmSms014
 * @tc.desc: Call function V1 SendGsmSms, msg.serial is 0
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendGsmSms014, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    GsmSmsMessageInfo msg;
    msg.serial = 0;
    msg.smscPdu = TEST_SMSC_PDU;
    msg.pdu = TEST_SEND_PDU;
    int32_t ret = g_rilInterface->SendGsmSms(SLOTID_1, GetSerialId(), msg);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SMS_SEND_GSM_SMS));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SendGsmSms_1500
 * @tc.name: testV1SendGsmSms015
 * @tc.desc: Call function V1 SendGsmSms, msg.serial is 1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendGsmSms015, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    GsmSmsMessageInfo msg;
    msg.serial = 1;
    msg.smscPdu = TEST_SMSC_PDU;
    msg.pdu = TEST_SEND_PDU;
    int32_t ret = g_rilInterface->SendGsmSms(SLOTID_1, GetSerialId(), msg);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SMS_SEND_GSM_SMS));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SendGsmSms_1600
 * @tc.name: testV1SendGsmSms016
 * @tc.desc: Call function V1 SendGsmSms, msg.serial is 2
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendGsmSms016, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    GsmSmsMessageInfo msg;
    msg.serial = 2;
    msg.smscPdu = TEST_SMSC_PDU;
    msg.pdu = TEST_SEND_PDU;
    int32_t ret = g_rilInterface->SendGsmSms(SLOTID_1, GetSerialId(), msg);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SMS_SEND_GSM_SMS));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SendGsmSms_1700
 * @tc.name: testV1SendGsmSms017
 * @tc.desc: Call function V1 SendGsmSms, msg.serial is 3
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendGsmSms017, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    GsmSmsMessageInfo msg;
    msg.serial = 3;
    msg.smscPdu = TEST_SMSC_PDU;
    msg.pdu = TEST_SEND_PDU;
    int32_t ret = g_rilInterface->SendGsmSms(SLOTID_1, GetSerialId(), msg);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SMS_SEND_GSM_SMS));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SendGsmSms_1800
 * @tc.name: testV1SendGsmSms018
 * @tc.desc: Call function V1 SendGsmSms, msg.serial is -2147483648
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendGsmSms018, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    GsmSmsMessageInfo msg;
    msg.serial = -2147483648;
    msg.smscPdu = TEST_SMSC_PDU;
    msg.pdu = TEST_SEND_PDU;
    int32_t ret = g_rilInterface->SendGsmSms(SLOTID_1, GetSerialId(), msg);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SMS_SEND_GSM_SMS));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SendGsmSms_1900
 * @tc.name: testV1SendGsmSms019
 * @tc.desc: Call function V1 SendGsmSms, msg.serial is 2147483647
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendGsmSms019, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    GsmSmsMessageInfo msg;
    msg.serial = 2147483647;
    msg.smscPdu = TEST_SMSC_PDU;
    msg.pdu = TEST_SEND_PDU;
    int32_t ret = g_rilInterface->SendGsmSms(SLOTID_1, GetSerialId(), msg);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SMS_SEND_GSM_SMS));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SendGsmSms_2000
 * @tc.name: testV1SendGsmSms020
 * @tc.desc: Call function V1 SendGsmSms, msg.state is -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendGsmSms020, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    GsmSmsMessageInfo msg;
    msg.state = -1;
    msg.smscPdu = TEST_SMSC_PDU;
    msg.pdu = TEST_SEND_PDU;
    int32_t ret = g_rilInterface->SendGsmSms(SLOTID_1, GetSerialId(), msg);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SMS_SEND_GSM_SMS));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SendGsmSms_2100
 * @tc.name: testV1SendGsmSms021
 * @tc.desc: Call function V1 SendGsmSms, msg.state is 0
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendGsmSms021, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    GsmSmsMessageInfo msg;
    msg.state = 0;
    msg.smscPdu = TEST_SMSC_PDU;
    msg.pdu = TEST_SEND_PDU;
    int32_t ret = g_rilInterface->SendGsmSms(SLOTID_1, GetSerialId(), msg);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SMS_SEND_GSM_SMS));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SendGsmSms_2200
 * @tc.name: testV1SendGsmSms022
 * @tc.desc: Call function V1 SendGsmSms, msg.state is 1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendGsmSms022, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    GsmSmsMessageInfo msg;
    msg.state = 1;
    msg.smscPdu = TEST_SMSC_PDU;
    msg.pdu = TEST_SEND_PDU;
    int32_t ret = g_rilInterface->SendGsmSms(SLOTID_1, GetSerialId(), msg);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SMS_SEND_GSM_SMS));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SendGsmSms_2300
 * @tc.name: testV1SendGsmSms023
 * @tc.desc: Call function V1 SendGsmSms, msg.state is 2
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendGsmSms023, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    GsmSmsMessageInfo msg;
    msg.state = 2;
    msg.smscPdu = TEST_SMSC_PDU;
    msg.pdu = TEST_SEND_PDU;
    int32_t ret = g_rilInterface->SendGsmSms(SLOTID_1, GetSerialId(), msg);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SMS_SEND_GSM_SMS));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SendGsmSms_2400
 * @tc.name: testV1SendGsmSms024
 * @tc.desc: Call function V1 SendGsmSms, msg.state is 3
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendGsmSms024, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    GsmSmsMessageInfo msg;
    msg.state = 3;
    msg.smscPdu = TEST_SMSC_PDU;
    msg.pdu = TEST_SEND_PDU;
    int32_t ret = g_rilInterface->SendGsmSms(SLOTID_1, GetSerialId(), msg);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SMS_SEND_GSM_SMS));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SendGsmSms_2500
 * @tc.name: testV1SendGsmSms025
 * @tc.desc: Call function V1 SendGsmSms, msg.state is -2147483648
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendGsmSms025, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    GsmSmsMessageInfo msg;
    msg.state = -2147483648;
    msg.smscPdu = TEST_SMSC_PDU;
    msg.pdu = TEST_SEND_PDU;
    int32_t ret = g_rilInterface->SendGsmSms(SLOTID_1, GetSerialId(), msg);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SMS_SEND_GSM_SMS));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SendGsmSms_2600
 * @tc.name: testV1SendGsmSms026
 * @tc.desc: Call function V1 SendGsmSms, msg.state is 2147483647
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendGsmSms026, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    GsmSmsMessageInfo msg;
    msg.state = 2147483647;
    msg.smscPdu = TEST_SMSC_PDU;
    msg.pdu = TEST_SEND_PDU;
    int32_t ret = g_rilInterface->SendGsmSms(SLOTID_1, GetSerialId(), msg);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SMS_SEND_GSM_SMS));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SendGsmSms_2700
 * @tc.name: testV1SendGsmSms027
 * @tc.desc: Call function V1 SendGsmSms, msg.smscPdu is ""
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendGsmSms027, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    GsmSmsMessageInfo msg;
    msg.smscPdu = "";
    msg.pdu = TEST_SEND_PDU;
    int32_t ret = g_rilInterface->SendGsmSms(SLOTID_1, GetSerialId(), msg);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SendGsmSms_2800
 * @tc.name: testV1SendGsmSms028
 * @tc.desc: Call function V1 SendGsmSms, msg.pdu is ""
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendGsmSms028, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    GsmSmsMessageInfo msg;
    msg.smscPdu = TEST_SMSC_PDU;
    msg.pdu = "";
    int32_t ret = g_rilInterface->SendGsmSms(SLOTID_1, GetSerialId(), msg);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SendGsmSms_2900
 * @tc.name: testV1SendGsmSms029
 * @tc.desc: Call function V1 SendGsmSms, msg.smscPdu is "abc"
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendGsmSms029, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    GsmSmsMessageInfo msg;
    msg.smscPdu = "abc";
    msg.pdu = TEST_SEND_PDU;
    int32_t ret = g_rilInterface->SendGsmSms(SLOTID_1, GetSerialId(), msg);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SMS_SEND_GSM_SMS));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SendCdmaSms_0100
 * @tc.name: testV1SendCdmaSms001
 * @tc.desc: Call function V1 SendCdmaSms,
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendCdmaSms001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = 0;
    for (int i = 0; i < 100; i++) {
        SendCdmaSmsMessageInfo msg;
        msg.smscPdu = TEST_CDMA_PDU;
        ret = g_rilInterface->SendCdmaSms(SLOTID_1, GetSerialId(), msg);
        EXPECT_EQ(SUCCESS, ret);
        ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SMS_SEND_CDMA_SMS));
    }
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SendCdmaSms_0200
 * @tc.name: testV1SendCdmaSms002
 * @tc.desc: Call function V1 SendCdmaSms, slotId is 0, msg.state is 2147483647
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendCdmaSms002, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SendCdmaSmsMessageInfo msg;
    msg.state = 2147483647;
    msg.smscPdu = TEST_CDMA_PDU;
    int32_t ret = g_rilInterface->SendCdmaSms(SLOTID_1, GetSerialId(), msg);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SMS_SEND_CDMA_SMS));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SendCdmaSms_0300
 * @tc.name: testV1SendCdmaSms003
 * @tc.desc: Call function V1 SendCdmaSms, slotId is 0, msg.smscPdu is null
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendCdmaSms003, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SendCdmaSmsMessageInfo msg;
    msg.smscPdu = "";
    int32_t ret = g_rilInterface->SendCdmaSms(SLOTID_1, GetSerialId(), msg);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SendCdmaSms_0400
 * @tc.name: testV1SendCdmaSms004
 * @tc.desc: Call function V1 SendCdmaSms, slotId is 0, msg.smscPdu is "!&#"
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendCdmaSms004, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SendCdmaSmsMessageInfo msg;
    msg.smscPdu = "!&#";
    int32_t ret = g_rilInterface->SendCdmaSms(SLOTID_1, GetSerialId(), msg);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SendCdmaSms_0500
 * @tc.name: testV1SendCdmaSms005
 * @tc.desc: Call function V1 SendCdmaSms, serialId is -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendCdmaSms005, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SendCdmaSmsMessageInfo msg;
    msg.smscPdu = TEST_CDMA_PDU;
    int32_t ret = g_rilInterface->SendCdmaSms(SLOTID_1, -1, msg);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SMS_SEND_CDMA_SMS));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SendCdmaSms_0600
 * @tc.name: testV1SendCdmaSms006
 * @tc.desc: Call function V1 SendCdmaSms, serialId is 0
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendCdmaSms006, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SendCdmaSmsMessageInfo msg;
    msg.smscPdu = TEST_CDMA_PDU;
    int32_t ret = g_rilInterface->SendCdmaSms(SLOTID_1, 0, msg);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SMS_SEND_CDMA_SMS));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SendCdmaSms_0700
 * @tc.name: testV1SendCdmaSms007
 * @tc.desc: Call function V1 SendCdmaSms, serialId is 1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendCdmaSms007, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SendCdmaSmsMessageInfo msg;
    msg.smscPdu = TEST_CDMA_PDU;
    int32_t ret = g_rilInterface->SendCdmaSms(SLOTID_1, 1, msg);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SMS_SEND_CDMA_SMS));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SendCdmaSms_0800
 * @tc.name: testV1SendCdmaSms008
 * @tc.desc: Call function V1 SendCdmaSms, serialId is 2
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendCdmaSms008, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SendCdmaSmsMessageInfo msg;
    msg.smscPdu = TEST_CDMA_PDU;
    int32_t ret = g_rilInterface->SendCdmaSms(SLOTID_1, 2, msg);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SMS_SEND_CDMA_SMS));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SendCdmaSms_0900
 * @tc.name: testV1SendCdmaSms009
 * @tc.desc: Call function V1 SendCdmaSms, serialId is 3
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendCdmaSms009, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SendCdmaSmsMessageInfo msg;
    msg.smscPdu = TEST_CDMA_PDU;
    int32_t ret = g_rilInterface->SendCdmaSms(SLOTID_1, 3, msg);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SMS_SEND_CDMA_SMS));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SendCdmaSms_1000
 * @tc.name: testV1SendCdmaSms010
 * @tc.desc: Call function V1 SendCdmaSms, serialId is -2147483648
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendCdmaSms010, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SendCdmaSmsMessageInfo msg;
    msg.smscPdu = TEST_CDMA_PDU;
    int32_t ret = g_rilInterface->SendCdmaSms(SLOTID_1, -2147483648, msg);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SMS_SEND_CDMA_SMS));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SendCdmaSms_1100
 * @tc.name: testV1SendCdmaSms011
 * @tc.desc: Call function V1 SendCdmaSms, serialId is 2147483647
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendCdmaSms011, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SendCdmaSmsMessageInfo msg;
    msg.smscPdu = TEST_CDMA_PDU;
    int32_t ret = g_rilInterface->SendCdmaSms(SLOTID_1, 2147483647, msg);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SMS_SEND_CDMA_SMS));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SendCdmaSms_1200
 * @tc.name: testV1SendCdmaSms012
 * @tc.desc: Call function V1 SendCdmaSms, slotId is 0, msg.serial is -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendCdmaSms012, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SendCdmaSmsMessageInfo msg;
    msg.serial = -1;
    msg.smscPdu = TEST_CDMA_PDU;
    int32_t ret = g_rilInterface->SendCdmaSms(SLOTID_1, GetSerialId(), msg);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SMS_SEND_CDMA_SMS));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SendCdmaSms_1300
 * @tc.name: testV1SendCdmaSms013
 * @tc.desc: Call function V1 SendCdmaSms, slotId is 0, msg.serial is 0
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendCdmaSms013, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SendCdmaSmsMessageInfo msg;
    msg.serial = 0;
    msg.smscPdu = TEST_CDMA_PDU;
    int32_t ret = g_rilInterface->SendCdmaSms(SLOTID_1, GetSerialId(), msg);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SMS_SEND_CDMA_SMS));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SendCdmaSms_1400
 * @tc.name: testV1SendCdmaSms014
 * @tc.desc: Call function V1 SendCdmaSms, slotId is 0, msg.serial is 1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendCdmaSms014, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SendCdmaSmsMessageInfo msg;
    msg.serial = 1;
    msg.smscPdu = TEST_CDMA_PDU;
    int32_t ret = g_rilInterface->SendCdmaSms(SLOTID_1, GetSerialId(), msg);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SMS_SEND_CDMA_SMS));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SendCdmaSms_1500
 * @tc.name: testV1SendCdmaSms015
 * @tc.desc: Call function V1 SendCdmaSms, slotId is 0, msg.serial is 2
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendCdmaSms015, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SendCdmaSmsMessageInfo msg;
    msg.serial = 2;
    msg.smscPdu = TEST_CDMA_PDU;
    int32_t ret = g_rilInterface->SendCdmaSms(SLOTID_1, GetSerialId(), msg);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SMS_SEND_CDMA_SMS));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SendCdmaSms_1600
 * @tc.name: testV1SendCdmaSms016
 * @tc.desc: Call function V1 SendCdmaSms, slotId is 0, msg.serial is 3
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendCdmaSms016, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SendCdmaSmsMessageInfo msg;
    msg.serial = 3;
    msg.smscPdu = TEST_CDMA_PDU;
    int32_t ret = g_rilInterface->SendCdmaSms(SLOTID_1, GetSerialId(), msg);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SMS_SEND_CDMA_SMS));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SendCdmaSms_1700
 * @tc.name: testV1SendCdmaSms017
 * @tc.desc: Call function V1 SendCdmaSms, slotId is 0, msg.serial is -2147483648
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendCdmaSms017, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SendCdmaSmsMessageInfo msg;
    msg.serial = -2147483648;
    msg.smscPdu = TEST_CDMA_PDU;
    int32_t ret = g_rilInterface->SendCdmaSms(SLOTID_1, GetSerialId(), msg);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SMS_SEND_CDMA_SMS));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SendCdmaSms_1800
 * @tc.name: testV1SendCdmaSms018
 * @tc.desc: Call function V1 SendCdmaSms, slotId is 0, msg.serial is 2147483647
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendCdmaSms018, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SendCdmaSmsMessageInfo msg;
    msg.serial = 2147483647;
    msg.smscPdu = TEST_CDMA_PDU;
    int32_t ret = g_rilInterface->SendCdmaSms(SLOTID_1, GetSerialId(), msg);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SMS_SEND_CDMA_SMS));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SendCdmaSms_1900
 * @tc.name: testV1SendCdmaSms019
 * @tc.desc: Call function V1 SendCdmaSms, slotId is 0, msg.smscPdu is "+-*%"
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendCdmaSms019, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SendCdmaSmsMessageInfo msg;
    msg.smscPdu = "+-*%";
    int32_t ret = g_rilInterface->SendCdmaSms(SLOTID_1, GetSerialId(), msg);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SMS_SEND_CDMA_SMS));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SendCdmaSms_2000
 * @tc.name: testV1SendCdmaSms020
 * @tc.desc: Call function V1 SendCdmaSms, slotId is 0, msg.smscPdu is "123"
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendCdmaSms020, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SendCdmaSmsMessageInfo msg;
    msg.smscPdu = "123";
    int32_t ret = g_rilInterface->SendCdmaSms(SLOTID_1, GetSerialId(), msg);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SMS_SEND_CDMA_SMS));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SendCdmaSms_2100
 * @tc.name: testV1SendCdmaSms021
 * @tc.desc: Call function V1 SendCdmaSms, slotId is 0, msg.state is -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendCdmaSms021, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SendCdmaSmsMessageInfo msg;
    msg.state = -1;
    msg.smscPdu = TEST_CDMA_PDU;
    int32_t ret = g_rilInterface->SendCdmaSms(SLOTID_1, GetSerialId(), msg);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SMS_SEND_CDMA_SMS));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SendCdmaSms_2200
 * @tc.name: testV1SendCdmaSms022
 * @tc.desc: Call function V1 SendCdmaSms, slotId is 0, msg.state is 0
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendCdmaSms022, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SendCdmaSmsMessageInfo msg;
    msg.state = 0;
    msg.smscPdu = TEST_CDMA_PDU;
    int32_t ret = g_rilInterface->SendCdmaSms(SLOTID_1, GetSerialId(), msg);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SMS_SEND_CDMA_SMS));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SendCdmaSms_2300
 * @tc.name: testV1SendCdmaSms023
 * @tc.desc: Call function V1 SendCdmaSms, slotId is 0, msg.state is 1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendCdmaSms023, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SendCdmaSmsMessageInfo msg;
    msg.state = 1;
    msg.smscPdu = TEST_CDMA_PDU;
    int32_t ret = g_rilInterface->SendCdmaSms(SLOTID_1, GetSerialId(), msg);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SMS_SEND_CDMA_SMS));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SendCdmaSms_2400
 * @tc.name: testV1SendCdmaSms024
 * @tc.desc: Call function V1 SendCdmaSms, slotId is 0, msg.state is 2
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendCdmaSms024, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SendCdmaSmsMessageInfo msg;
    msg.state = 2;
    msg.smscPdu = TEST_CDMA_PDU;
    int32_t ret = g_rilInterface->SendCdmaSms(SLOTID_1, GetSerialId(), msg);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SMS_SEND_CDMA_SMS));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SendCdmaSms_2500
 * @tc.name: testV1SendCdmaSms025
 * @tc.desc: Call function V1 SendCdmaSms, slotId is 0, msg.state is 3
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendCdmaSms025, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SendCdmaSmsMessageInfo msg;
    msg.state = 3;
    msg.smscPdu = TEST_CDMA_PDU;
    int32_t ret = g_rilInterface->SendCdmaSms(SLOTID_1, GetSerialId(), msg);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SMS_SEND_CDMA_SMS));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SendCdmaSms_2600
 * @tc.name: testV1SendCdmaSms026
 * @tc.desc: Call function V1 SendCdmaSms, slotId is 0, msg.state is -2147483648
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendCdmaSms026, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SendCdmaSmsMessageInfo msg;
    msg.state = -2147483648;
    msg.smscPdu = TEST_CDMA_PDU;
    int32_t ret = g_rilInterface->SendCdmaSms(SLOTID_1, GetSerialId(), msg);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SMS_SEND_CDMA_SMS));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1UnlockPin_0300
 * @tc.name  : testV1UnlockPin001
 * @tc.desc  : Call function UnlockPin 100 times
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1UnlockPin001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = 1;
    std::string pin = TEST_STORAGE_PDU;
    for (int i = 0; i < 100; i++) {
        ret = g_rilInterface->UnlockPin(SLOTID_1, GetSerialId(), pin);
        WaitFor(WAIT_TIME_SECOND);
        EXPECT_EQ(SUCCESS, ret);
        ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_UNLOCK_PIN));
    }
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1UnlockPin_0400
 * @tc.name  : testV1UnlockPin002
 * @tc.desc  : Call function UnlockPin with an entry if 255
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1UnlockPin002, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    std::string pin = TEST_STORAGE_PDU;
    int32_t ret = g_rilInterface->UnlockPin(255, GetSerialId(), pin);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_UNLOCK_PIN));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1UnlockPin_0500
 * @tc.name  : testV1UnlockPin003
 * @tc.desc  : Call function UnlockPin with an entry if 1000000001
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1UnlockPin003, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    std::string pin = TEST_STORAGE_PDU;
    int32_t ret = g_rilInterface->UnlockPin(1000000001, GetSerialId(), pin);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_UNLOCK_PIN));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1UnlockPin_0600
 * @tc.name  : testV1UnlockPin004
 * @tc.desc  : Call function UnlockPin with an entry if -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1UnlockPin004, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    std::string pin = TEST_STORAGE_PDU;
    int32_t ret = g_rilInterface->UnlockPin(-1, GetSerialId(), pin);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1UnlockPin_0700
 * @tc.name  : testV1UnlockPin005
 * @tc.desc  : Call function UnlockPin with the second argument as 1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1UnlockPin005, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    std::string pin = TEST_STORAGE_PDU;
    int32_t ret = g_rilInterface->UnlockPin(SLOTID_1, 1, pin);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_UNLOCK_PIN));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1UnlockPin_0800
 * @tc.name  : testV1UnlockPin006
 * @tc.desc  : Call function UnlockPin with the second argument as 255
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1UnlockPin006, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    std::string pin = TEST_STORAGE_PDU;
    int32_t ret = g_rilInterface->UnlockPin(SLOTID_1, 255, pin);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_UNLOCK_PIN));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1UnlockPin_0900
 * @tc.name  : testV1UnlockPin007
 * @tc.desc  : Call function UnlockPin with the second argument as 1000000001
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1UnlockPin007, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    std::string pin = TEST_STORAGE_PDU;
    int32_t ret = g_rilInterface->UnlockPin(SLOTID_1, 1000000001, pin);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_UNLOCK_PIN));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1UnlockPin_1000
 * @tc.name  : testV1UnlockPin008
 * @tc.desc  : Call function UnlockPin with the second argument as -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1UnlockPin008, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    std::string pin = TEST_STORAGE_PDU;
    int32_t ret = g_rilInterface->UnlockPin(SLOTID_1, -1, pin);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1UnlockPin_1100
 * @tc.name  : testV1UnlockPin009
 * @tc.desc  : Call function UnlockPin with the third argument as pin = TEST_SEND_PDU.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1UnlockPin009, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    std::string pin = TEST_SEND_PDU;
    int32_t ret = g_rilInterface->UnlockPin(SLOTID_1, GetSerialId(), pin);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_UNLOCK_PIN));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1UnlockPin_1200
 * @tc.name  : testV1UnlockPin010
 * @tc.desc  : Call function UnlockPin with the third argument as pin = TEST_SMSC_PDU.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1UnlockPin010, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    std::string pin = TEST_SMSC_PDU;
    int32_t ret = g_rilInterface->UnlockPin(SLOTID_1, GetSerialId(), pin);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_UNLOCK_PIN));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1UnlockPin_1300
 * @tc.name  : testV1UnlockPin011
 * @tc.desc  : Call function UnlockPin with the third argument as pin = TEST_CDMA_PDU.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1UnlockPin011, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    std::string pin = TEST_CDMA_PDU;
    int32_t ret = g_rilInterface->UnlockPin(SLOTID_1, GetSerialId(), pin);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_UNLOCK_PIN));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1UnlockPin_1400
 * @tc.name  : testV1UnlockPin012
 * @tc.desc  : Call function UnlockPin with the third argument as pin = TEST_ID_LIST.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1UnlockPin012, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    std::string pin = TEST_ID_LIST;
    int32_t ret = g_rilInterface->UnlockPin(SLOTID_1, GetSerialId(), pin);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_UNLOCK_PIN));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1UnlockPin_1500
 * @tc.name  : testV1UnlockPin013
 * @tc.desc  : Call function UnlockPin with the third argument as pin = TEST_DCS_LIST.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1UnlockPin013, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    std::string pin = TEST_DCS_LIST;
    int32_t ret = g_rilInterface->UnlockPin(SLOTID_1, GetSerialId(), pin);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_UNLOCK_PIN));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1UnlockPuk_0300
 * @tc.name  : testV1UnlockPuk001
 * @tc.desc  : Call function UnlockPuk 100 times
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1UnlockPuk001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = 1;
    std::string puk = TEST_STORAGE_PDU;
    std::string pin = TEST_STORAGE_PDU;
    for (int i = 0; i < 100; i++) {
        ret = g_rilInterface->UnlockPuk(SLOTID_1, GetSerialId(), puk, pin);
        WaitFor(WAIT_TIME_SECOND);
        EXPECT_EQ(SUCCESS, ret);
        ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_UNLOCK_PUK));
    }
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1UnlockPuk_0400
 * @tc.name  : testV1UnlockPuk002
 * @tc.desc  : Call function UnlockPuk with an entry of 255
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1UnlockPuk002, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    std::string puk = TEST_STORAGE_PDU;
    std::string pin = TEST_STORAGE_PDU;
    int32_t ret = g_rilInterface->UnlockPuk(255, GetSerialId(), puk, pin);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_UNLOCK_PUK));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1UnlockPuk_0500
 * @tc.name  : testV1UnlockPuk003
 * @tc.desc  : Call function UnlockPuk with an entry of 1000000001
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1UnlockPuk003, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    std::string puk = TEST_STORAGE_PDU;
    std::string pin = TEST_STORAGE_PDU;
    int32_t ret = g_rilInterface->UnlockPuk(1000000001, GetSerialId(), puk, pin);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_UNLOCK_PUK));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1UnlockPuk_0600
 * @tc.name  : testV1UnlockPuk004
 * @tc.desc  : Call function UnlockPuk with an entry of -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1UnlockPuk004, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    std::string puk = TEST_STORAGE_PDU;
    std::string pin = TEST_STORAGE_PDU;
    int32_t ret = g_rilInterface->UnlockPuk(-1, GetSerialId(), puk, pin);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1UnlockPuk_0700
 * @tc.name  : testV1UnlockPuk005
 * @tc.desc  : Call function UnlockPuk with the second argument as 1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1UnlockPuk005, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    std::string puk = TEST_STORAGE_PDU;
    std::string pin = TEST_STORAGE_PDU;
    int32_t ret = g_rilInterface->UnlockPuk(SLOTID_1, 1, puk, pin);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_UNLOCK_PUK));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1UnlockPuk_0800
 * @tc.name  : testV1UnlockPuk006
 * @tc.desc  : Call function UnlockPuk with the second argument as 255
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1UnlockPuk006, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    std::string puk = TEST_STORAGE_PDU;
    std::string pin = TEST_STORAGE_PDU;
    int32_t ret = g_rilInterface->UnlockPuk(SLOTID_1, 255, puk, pin);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_UNLOCK_PUK));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1UnlockPuk_0900
 * @tc.name  : testV1UnlockPuk007
 * @tc.desc  : Call function UnlockPuk with the second argument as 1000000001
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1UnlockPuk007, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    std::string puk = TEST_STORAGE_PDU;
    std::string pin = TEST_STORAGE_PDU;
    int32_t ret = g_rilInterface->UnlockPuk(SLOTID_1, 1000000001, puk, pin);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_UNLOCK_PUK));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1UnlockPuk_1000
 * @tc.name  : testV1UnlockPuk008
 * @tc.desc  : Call function UnlockPuk with the second argument as -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1UnlockPuk008, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    std::string puk = TEST_STORAGE_PDU;
    std::string pin = TEST_STORAGE_PDU;
    int32_t ret = g_rilInterface->UnlockPuk(SLOTID_1, -1, puk, pin);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1UnlockPuk_1100
 * @tc.name  : testV1UnlockPuk009
 * @tc.desc  : Call function UnlockPuk with the third argument as puk = TEST_STORAGE_PDU.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1UnlockPuk009, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    std::string puk = TEST_STORAGE_PDU;
    std::string pin = TEST_STORAGE_PDU;
    int32_t ret = g_rilInterface->UnlockPuk(SLOTID_1, GetSerialId(), puk, pin);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_UNLOCK_PUK));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1UnlockPuk_1200
 * @tc.name  : testV1UnlockPuk010
 * @tc.desc  : Call function UnlockPuk with the third argument as puk = TEST_SEND_PDU.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1UnlockPuk010, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    std::string puk = TEST_SEND_PDU;
    std::string pin = TEST_STORAGE_PDU;
    int32_t ret = g_rilInterface->UnlockPuk(SLOTID_1, GetSerialId(), puk, pin);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_UNLOCK_PUK));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1UnlockPuk_1300
 * @tc.name  : testV1UnlockPuk011
 * @tc.desc  : Call function UnlockPuk with the third argument as puk = TEST_SMSC_PDU.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1UnlockPuk011, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    std::string puk = TEST_SMSC_PDU;
    std::string pin = TEST_STORAGE_PDU;
    int32_t ret = g_rilInterface->UnlockPuk(SLOTID_1, GetSerialId(), puk, pin);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_UNLOCK_PUK));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1UnlockPuk_1400
 * @tc.name  : testV1UnlockPuk012
 * @tc.desc  : Call function UnlockPuk with the third argument as puk = TEST_CDMA_PDU.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1UnlockPuk012, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    std::string puk = TEST_CDMA_PDU;
    std::string pin = TEST_STORAGE_PDU;
    int32_t ret = g_rilInterface->UnlockPuk(SLOTID_1, GetSerialId(), puk, pin);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_UNLOCK_PUK));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1UnlockPuk_1500
 * @tc.name  : testV1UnlockPuk013
 * @tc.desc  : Call function UnlockPuk with the third argument as puk = TEST_ID_LIST.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1UnlockPuk013, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    std::string puk = TEST_ID_LIST;
    std::string pin = TEST_STORAGE_PDU;
    int32_t ret = g_rilInterface->UnlockPuk(SLOTID_1, GetSerialId(), puk, pin);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_UNLOCK_PUK));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1UnlockPuk_1600
 * @tc.name  : testV1UnlockPuk014
 * @tc.desc  : Call function UnlockPuk with the third argument as puk = TEST_DCS_LIST.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1UnlockPuk014, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    std::string puk = TEST_DCS_LIST;
    std::string pin = TEST_STORAGE_PDU;
    int32_t ret = g_rilInterface->UnlockPuk(SLOTID_1, GetSerialId(), puk, pin);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_UNLOCK_PUK));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1UnlockPuk_1700
 * @tc.name  : testV1UnlockPuk015
 * @tc.desc  : Call function UnlockPuk with the fourth argument as pin = TEST_SEND_PDU.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1UnlockPuk015, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    std::string puk = TEST_STORAGE_PDU;
    std::string pin = TEST_SEND_PDU;
    int32_t ret = g_rilInterface->UnlockPuk(SLOTID_1, GetSerialId(), puk, pin);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_UNLOCK_PUK));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1UnlockPuk_1800
 * @tc.name  : testV1UnlockPuk016
 * @tc.desc  : Call function UnlockPuk with the fourth argument as pin = TEST_SMSC_PDU.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1UnlockPuk016, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    std::string puk = TEST_STORAGE_PDU;
    std::string pin = TEST_SMSC_PDU;
    int32_t ret = g_rilInterface->UnlockPuk(SLOTID_1, GetSerialId(), puk, pin);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_UNLOCK_PUK));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1UnlockPuk_1900
 * @tc.name  : testV1UnlockPuk017
 * @tc.desc  : Call function UnlockPuk with the fourth argument as pin = TEST_CDMA_PDU.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1UnlockPuk017, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    std::string puk = TEST_STORAGE_PDU;
    std::string pin = TEST_CDMA_PDU;
    int32_t ret = g_rilInterface->UnlockPuk(SLOTID_1, GetSerialId(), puk, pin);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_UNLOCK_PUK));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1UnlockPuk_2000
 * @tc.name  : testV1UnlockPuk018
 * @tc.desc  : Call function UnlockPuk with the fourth argument as pin = TEST_ID_LIST.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1UnlockPuk018, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    std::string puk = TEST_STORAGE_PDU;
    std::string pin = TEST_ID_LIST;
    int32_t ret = g_rilInterface->UnlockPuk(SLOTID_1, GetSerialId(), puk, pin);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_UNLOCK_PUK));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1UnlockPuk_2100
 * @tc.name  : testV1UnlockPuk019
 * @tc.desc  : Call function UnlockPuk with the fourth argument as pin = TEST_DCS_LIST.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1UnlockPuk019, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    std::string puk = TEST_STORAGE_PDU;
    std::string pin = TEST_DCS_LIST;
    int32_t ret = g_rilInterface->UnlockPuk(SLOTID_1, GetSerialId(), puk, pin);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_UNLOCK_PUK));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1UnlockPin2_0300
 * @tc.name  : testV1UnlockPin2001
 * @tc.desc  : Call function UnlockPin2 100 times
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1UnlockPin2001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = 1;
    std::string pin2 = TEST_STORAGE_PDU;
    for (int i = 0; i < 100; i++) {
        ret = g_rilInterface->UnlockPin2(SLOTID_1, GetSerialId(), pin2);
        WaitFor(WAIT_TIME_SECOND);
        EXPECT_EQ(SUCCESS, ret);
        ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_UNLOCK_PIN2));
    }
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1UnlockPin2_0400
 * @tc.name  : testV1UnlockPin2002
 * @tc.desc  : Call function UnlockPin2 with an entry if 255
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1UnlockPin2002, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    std::string pin2 = TEST_STORAGE_PDU;
    int32_t ret = g_rilInterface->UnlockPin2(255, GetSerialId(), pin2);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_UNLOCK_PIN2));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1UnlockPin2_0500
 * @tc.name  : testV1UnlockPin2003
 * @tc.desc  : Call function UnlockPin2 with an entry if 1000000001
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1UnlockPin2003, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    std::string pin2 = TEST_STORAGE_PDU;
    int32_t ret = g_rilInterface->UnlockPin2(1000000001, GetSerialId(), pin2);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_UNLOCK_PIN2));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1UnlockPin2_0600
 * @tc.name  : testV1UnlockPin2004
 * @tc.desc  : Call function UnlockPin2 with an entry if -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1UnlockPin2004, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    std::string pin2 = TEST_STORAGE_PDU;
    int32_t ret = g_rilInterface->UnlockPin2(-1, GetSerialId(), pin2);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1UnlockPin2_0700
 * @tc.name  : testV1UnlockPin2005
 * @tc.desc  : Call function UnlockPin2 with the second argument as 1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1UnlockPin2005, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    std::string pin2 = TEST_STORAGE_PDU;
    int32_t ret = g_rilInterface->UnlockPin2(SLOTID_1, 1, pin2);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_UNLOCK_PIN2));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1UnlockPin2_0800
 * @tc.name  : testV1UnlockPin2006
 * @tc.desc  : Call function UnlockPin2 with the second argument as 255
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1UnlockPin2006, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    std::string pin2 = TEST_STORAGE_PDU;
    int32_t ret = g_rilInterface->UnlockPin2(SLOTID_1, 255, pin2);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_UNLOCK_PIN2));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1UnlockPin2_0900
 * @tc.name  : testV1UnlockPin2007
 * @tc.desc  : Call function UnlockPin2 with the second argument as 1000000001
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1UnlockPin2007, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    std::string pin2 = TEST_STORAGE_PDU;
    int32_t ret = g_rilInterface->UnlockPin2(SLOTID_1, 1000000001, pin2);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_UNLOCK_PIN2));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1UnlockPin2_1000
 * @tc.name  : testV1UnlockPin2008
 * @tc.desc  : Call function UnlockPin2 with the second argument as -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1UnlockPin2008, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    std::string pin2 = TEST_STORAGE_PDU;
    int32_t ret = g_rilInterface->UnlockPin2(SLOTID_1, -1, pin2);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1UnlockPin2_1100
 * @tc.name  : testV1UnlockPin2009
 * @tc.desc  : Call function UnlockPin2 with the third argument as pin2 = TEST_SEND_PDU.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1UnlockPin2009, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    std::string pin2 = TEST_SEND_PDU;
    int32_t ret = g_rilInterface->UnlockPin2(SLOTID_1, GetSerialId(), pin2);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_UNLOCK_PIN2));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1UnlockPin2_1200
 * @tc.name  : testV1UnlockPin2010
 * @tc.desc  : Call function UnlockPin2 with the third argument as pin2 = TEST_SMSC_PDU.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1UnlockPin2010, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    std::string pin2 = TEST_SMSC_PDU;
    int32_t ret = g_rilInterface->UnlockPin2(SLOTID_1, GetSerialId(), pin2);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_UNLOCK_PIN2));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1UnlockPin2_1300
 * @tc.name  : testV1UnlockPin2011
 * @tc.desc  : Call function UnlockPin2 with the third argument as pin2 = TEST_CDMA_PDU.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1UnlockPin2011, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    std::string pin2 = TEST_CDMA_PDU;
    int32_t ret = g_rilInterface->UnlockPin2(SLOTID_1, GetSerialId(), pin2);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_UNLOCK_PIN2));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1UnlockPin2_1400
 * @tc.name  : testV1UnlockPin2012
 * @tc.desc  : Call function UnlockPin2 with the third argument as pin2 = TEST_ID_LIST.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1UnlockPin2012, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    std::string pin2 = TEST_ID_LIST;
    int32_t ret = g_rilInterface->UnlockPin2(SLOTID_1, GetSerialId(), pin2);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_UNLOCK_PIN2));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1UnlockPin2_1500
 * @tc.name  : testV1UnlockPin2013
 * @tc.desc  : Call function UnlockPin2 with the third argument as pin2 = TEST_DCS_LIST.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1UnlockPin2013, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    std::string pin2 = TEST_DCS_LIST;
    int32_t ret = g_rilInterface->UnlockPin2(SLOTID_1, GetSerialId(), pin2);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_UNLOCK_PIN2));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1UnlockPuk2_0300
 * @tc.name  : testV1UnlockPuk2001
 * @tc.desc  : Call function UnlockPuk2 100 times
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1UnlockPuk2001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = 1;
    std::string puk2 = TEST_STORAGE_PDU;
    std::string pin2 = TEST_STORAGE_PDU;
    for (int i = 0; i < 100; i++) {
        ret = g_rilInterface->UnlockPuk2(SLOTID_1, GetSerialId(), puk2, pin2);
        WaitFor(WAIT_TIME_SECOND);
        EXPECT_EQ(SUCCESS, ret);
        ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_UNLOCK_PUK2));
    }
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1UnlockPuk2_0400
 * @tc.name  : testV1UnlockPuk2002
 * @tc.desc  : Call function UnlockPuk2 with an entry of 255
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1UnlockPuk2002, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    std::string puk2 = TEST_STORAGE_PDU;
    std::string pin2 = TEST_STORAGE_PDU;
    int32_t ret = g_rilInterface->UnlockPuk2(255, GetSerialId(), puk2, pin2);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_UNLOCK_PUK2));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1UnlockPuk2_0500
 * @tc.name  : testV1UnlockPuk2003
 * @tc.desc  : Call function UnlockPuk2 with an entry of 1000000001
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1UnlockPuk2003, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    std::string puk2 = TEST_STORAGE_PDU;
    std::string pin2 = TEST_STORAGE_PDU;
    int32_t ret = g_rilInterface->UnlockPuk2(1000000001, GetSerialId(), puk2, pin2);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_UNLOCK_PUK2));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1UnlockPuk2_0600
 * @tc.name  : testV1UnlockPuk2004
 * @tc.desc  : Call function UnlockPuk2 with an entry of -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1UnlockPuk2004, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    std::string puk2 = TEST_STORAGE_PDU;
    std::string pin2 = TEST_STORAGE_PDU;
    int32_t ret = g_rilInterface->UnlockPuk2(-1, GetSerialId(), puk2, pin2);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1UnlockPuk2_0700
 * @tc.name  : testV1UnlockPuk2005
 * @tc.desc  : Call function UnlockPuk2 with the second argument as 1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1UnlockPuk2005, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    std::string puk2 = TEST_STORAGE_PDU;
    std::string pin2 = TEST_STORAGE_PDU;
    int32_t ret = g_rilInterface->UnlockPuk2(SLOTID_1, 1, puk2, pin2);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_UNLOCK_PUK2));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1UnlockPuk2_0800
 * @tc.name  : testV1UnlockPuk2006
 * @tc.desc  : Call function UnlockPuk2 with the second argument as 255
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1UnlockPuk2006, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    std::string puk2 = TEST_STORAGE_PDU;
    std::string pin2 = TEST_STORAGE_PDU;
    int32_t ret = g_rilInterface->UnlockPuk2(SLOTID_1, 255, puk2, pin2);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_UNLOCK_PUK2));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1UnlockPuk2_0900
 * @tc.name  : testV1UnlockPuk2007
 * @tc.desc  : Call function UnlockPuk2 with the second argument as 1000000001
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1UnlockPuk2007, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    std::string puk2 = TEST_STORAGE_PDU;
    std::string pin2 = TEST_STORAGE_PDU;
    int32_t ret = g_rilInterface->UnlockPuk2(SLOTID_1, 1000000001, puk2, pin2);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_UNLOCK_PUK2));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1UnlockPuk2_1000
 * @tc.name  : testV1UnlockPuk2008
 * @tc.desc  : Call function UnlockPuk2 with the second argument as -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1UnlockPuk2008, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    std::string puk2 = TEST_STORAGE_PDU;
    std::string pin2 = TEST_STORAGE_PDU;
    int32_t ret = g_rilInterface->UnlockPuk2(SLOTID_1, -1, puk2, pin2);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1UnlockPuk2_1100
 * @tc.name  : testV1UnlockPuk2009
 * @tc.desc  : Call function UnlockPuk2 with the third argument as puk2 = TEST_STORAGE_PDU.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1UnlockPuk2009, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    std::string puk2 = TEST_STORAGE_PDU;
    std::string pin2 = TEST_STORAGE_PDU;
    int32_t ret = g_rilInterface->UnlockPuk2(SLOTID_1, GetSerialId(), puk2, pin2);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_UNLOCK_PUK2));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1UnlockPuk2_1200
 * @tc.name  : testV1UnlockPuk2010
 * @tc.desc  : Call function UnlockPuk2 with the third argument as puk2 = TEST_SEND_PDU.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1UnlockPuk2010, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    std::string puk2 = TEST_SEND_PDU;
    std::string pin2 = TEST_STORAGE_PDU;
    int32_t ret = g_rilInterface->UnlockPuk2(SLOTID_1, GetSerialId(), puk2, pin2);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_UNLOCK_PUK2));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1UnlockPuk2_1300
 * @tc.name  : testV1UnlockPuk2011
 * @tc.desc  : Call function UnlockPuk2 with the third argument as puk2 = TEST_SMSC_PDU.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1UnlockPuk2011, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    std::string puk2 = TEST_SMSC_PDU;
    std::string pin2 = TEST_STORAGE_PDU;
    int32_t ret = g_rilInterface->UnlockPuk2(SLOTID_1, GetSerialId(), puk2, pin2);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_UNLOCK_PUK2));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1UnlockPuk2_1400
 * @tc.name  : testV1UnlockPuk2012
 * @tc.desc  : Call function UnlockPuk2 with the third argument as puk2 = TEST_CDMA_PDU.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1UnlockPuk2012, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    std::string puk2 = TEST_CDMA_PDU;
    std::string pin2 = TEST_STORAGE_PDU;
    int32_t ret = g_rilInterface->UnlockPuk2(SLOTID_1, GetSerialId(), puk2, pin2);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_UNLOCK_PUK2));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1UnlockPuk2_1500
 * @tc.name  : testV1UnlockPuk2013
 * @tc.desc  : Call function UnlockPuk2 with the third argument as puk2 = TEST_ID_LIST.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1UnlockPuk2013, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    std::string puk2 = TEST_ID_LIST;
    std::string pin2 = TEST_STORAGE_PDU;
    int32_t ret = g_rilInterface->UnlockPuk2(SLOTID_1, GetSerialId(), puk2, pin2);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_UNLOCK_PUK2));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1UnlockPuk2_1600
 * @tc.name  : testV1UnlockPuk2014
 * @tc.desc  : Call function UnlockPuk2 with the third argument as puk2 = TEST_DCS_LIST.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1UnlockPuk2014, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    std::string puk2 = TEST_DCS_LIST;
    std::string pin2 = TEST_STORAGE_PDU;
    int32_t ret = g_rilInterface->UnlockPuk2(SLOTID_1, GetSerialId(), puk2, pin2);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_UNLOCK_PUK2));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1UnlockPuk2_1700
 * @tc.name  : testV1UnlockPuk2015
 * @tc.desc  : Call function UnlockPuk2 with the fourth argument as pin2 = TEST_SEND_PDU.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1UnlockPuk2015, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    std::string puk2 = TEST_STORAGE_PDU;
    std::string pin2 = TEST_SEND_PDU;
    int32_t ret = g_rilInterface->UnlockPuk2(SLOTID_1, GetSerialId(), puk2, pin2);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_UNLOCK_PUK2));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1UnlockPuk2_1800
 * @tc.name  : testV1UnlockPuk2016
 * @tc.desc  : Call function UnlockPuk2 with the fourth argument as pin2 = TEST_SMSC_PDU.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1UnlockPuk2016, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    std::string puk2 = TEST_STORAGE_PDU;
    std::string pin2 = TEST_SMSC_PDU;
    int32_t ret = g_rilInterface->UnlockPuk2(SLOTID_1, GetSerialId(), puk2, pin2);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_UNLOCK_PUK2));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1UnlockPuk2_1900
 * @tc.name  : testV1UnlockPuk2017
 * @tc.desc  : Call function UnlockPuk2 with the fourth argument as pin2 = TEST_CDMA_PDU.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1UnlockPuk2017, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    std::string puk2 = TEST_STORAGE_PDU;
    std::string pin2 = TEST_CDMA_PDU;
    int32_t ret = g_rilInterface->UnlockPuk2(SLOTID_1, GetSerialId(), puk2, pin2);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_UNLOCK_PUK2));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1UnlockPuk2_2000
 * @tc.name  : testV1UnlockPuk2018
 * @tc.desc  : Call function UnlockPuk2 with the fourth argument as pin2 = TEST_ID_LIST.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1UnlockPuk2018, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    std::string puk2 = TEST_STORAGE_PDU;
    std::string pin2 = TEST_ID_LIST;
    int32_t ret = g_rilInterface->UnlockPuk2(SLOTID_1, GetSerialId(), puk2, pin2);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_UNLOCK_PUK2));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1UnlockPuk2_2100
 * @tc.name  : testV1UnlockPuk2019
 * @tc.desc  : Call function UnlockPuk2 with the fourth argument as pin2 = TEST_DCS_LIST.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1UnlockPuk2019, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    std::string puk2 = TEST_STORAGE_PDU;
    std::string pin2 = TEST_DCS_LIST;
    int32_t ret = g_rilInterface->UnlockPuk2(SLOTID_1, GetSerialId(), puk2, pin2);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_UNLOCK_PUK2));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetActiveSim_0300
 * @tc.name  : testV1SetActiveSim001
 * @tc.desc  : Call function SetActiveSim 100 times
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetActiveSim001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = 1;
    for (int i = 0; i < 100; i++) {
        ret = g_rilInterface->SetActiveSim(SLOTID_1, GetSerialId(), 1, 1);
        WaitFor(WAIT_TIME_SECOND);
        EXPECT_EQ(SUCCESS, ret);
        ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_SET_ACTIVE_SIM));
    }
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetActiveSim_0400
 * @tc.name  : testV1SetActiveSim002
 * @tc.desc  : Call function SetActiveSim with an entry of 255
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetActiveSim002, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SetActiveSim(255, GetSerialId(), 1, 1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_SET_ACTIVE_SIM));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetActiveSim_0500
 * @tc.name  : testV1SetActiveSim003
 * @tc.desc  : Call function SetActiveSim with an entry of 1000000001
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetActiveSim003, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SetActiveSim(1000000001, GetSerialId(), 1, 1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_SET_ACTIVE_SIM));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetActiveSim_0600
 * @tc.name  : testV1SetActiveSim004
 * @tc.desc  : Call function SetActiveSim with an entry of -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetActiveSim004, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SetActiveSim(-1, GetSerialId(), 1, 1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetActiveSim_0700
 * @tc.name  : testV1SetActiveSim005
 * @tc.desc  : Call function SetActiveSim with the second argument as 1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetActiveSim005, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SetActiveSim(SLOTID_1, 1, 1, 1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_SET_ACTIVE_SIM));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetActiveSim_0800
 * @tc.name  : testV1SetActiveSim006
 * @tc.desc  : Call function SetActiveSim with the second argument as 255
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetActiveSim006, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SetActiveSim(SLOTID_1, 255, 1, 1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_SET_ACTIVE_SIM));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetActiveSim_0900
 * @tc.name  : testV1SetActiveSim007
 * @tc.desc  : Call function SetActiveSim with the second argument as 1000000001
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetActiveSim007, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SetActiveSim(SLOTID_1, 1000000001, 1, 1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_SET_ACTIVE_SIM));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetActiveSim_1000
 * @tc.name  : testV1SetActiveSim008
 * @tc.desc  : Call function SetActiveSim with the second argument as -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetActiveSim008, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SetActiveSim(SLOTID_1, -1, 1, 1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetActiveSim_1100
 * @tc.name  : testV1SetActiveSim009
 * @tc.desc  : Call function SetActiveSim with the third argument as SLOTID_1.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetActiveSim009, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SetActiveSim(SLOTID_1, GetSerialId(), 0, 1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_SET_ACTIVE_SIM));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetActiveSim_1200
 * @tc.name  : testV1SetActiveSim010
 * @tc.desc  : Call function SetActiveSim with the third argument as 255
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetActiveSim010, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SetActiveSim(SLOTID_1, GetSerialId(), 255, 1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_SET_ACTIVE_SIM));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetActiveSim_1300
 * @tc.name  : testV1SetActiveSim011
 * @tc.desc  : Call function SetActiveSim with the third argument as 1000000001
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetActiveSim011, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SetActiveSim(SLOTID_1, GetSerialId(), 1000000001, 1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_SET_ACTIVE_SIM));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetActiveSim_1400
 * @tc.name  : testV1SetActiveSim012
 * @tc.desc  : Call function SetActiveSim with the third argument as -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetActiveSim012, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SetActiveSim(SLOTID_1, GetSerialId(), -1, 1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetActiveSim_1500
 * @tc.name  : testV1SetActiveSim013
 * @tc.desc  : Call function SetActiveSim with the fourth argument as 0
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetActiveSim013, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SetActiveSim(SLOTID_1, GetSerialId(), 1, 0);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_SET_ACTIVE_SIM));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetActiveSim_1600
 * @tc.name  : testV1SetActiveSim014
 * @tc.desc  : Call function SetActiveSim with the fourth argument as -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetActiveSim014, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SetActiveSim(SLOTID_1, GetSerialId(), 1, -1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetActiveSim_1700
 * @tc.name  : testV1SetActiveSim015
 * @tc.desc  : Call function SetActiveSim with the fourth argument as 2
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetActiveSim015, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SetActiveSim(SLOTID_1, GetSerialId(), 1, 2);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SimTransmitApduBasicChannel_0300
 * @tc.name  : testV1SimTransmitApduBasicChannel001
 * @tc.desc  : Call function SimTransmitApduBasicChannel with serialId as -1.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SimTransmitApduBasicChannel001, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    ApduSimIORequestInfo reqInfo;
    reqInfo.serial = 0;
    reqInfo.channelId = 0;
    reqInfo.type = 0x80;
    reqInfo.instruction = 0xCA;
    reqInfo.p1 = 0xFF;
    reqInfo.p2 = 0x40;
    reqInfo.p3 = 0x00;
    reqInfo.data = "";
    int32_t ret = g_rilInterface->SimTransmitApduBasicChannel(SLOTID_1, -1, reqInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SimTransmitApduBasicChannel_0400
 * @tc.name  : testV1SimTransmitApduBasicChannel002
 * @tc.desc  : Call function SimTransmitApduBasicChannel with serialId as 0.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SimTransmitApduBasicChannel002, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    ApduSimIORequestInfo reqInfo;
    reqInfo.serial = 0;
    reqInfo.channelId = 0;
    reqInfo.type = 0x80;
    reqInfo.instruction = 0xCA;
    reqInfo.p1 = 0xFF;
    reqInfo.p2 = 0x40;
    reqInfo.p3 = 0x00;
    reqInfo.data = "";
    int32_t ret = g_rilInterface->SimTransmitApduBasicChannel(SLOTID_1, 0, reqInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_TRANSMIT_APDU_BASIC_CHANNEL));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SimTransmitApduBasicChannel_0500
 * @tc.name  : testV1SimTransmitApduBasicChannel003
 * @tc.desc  : Call function SimTransmitApduBasicChannel with serialId as 1.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SimTransmitApduBasicChannel003, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    ApduSimIORequestInfo reqInfo;
    reqInfo.serial = 0;
    reqInfo.channelId = 0;
    reqInfo.type = 0x80;
    reqInfo.instruction = 0xCA;
    reqInfo.p1 = 0xFF;
    reqInfo.p2 = 0x40;
    reqInfo.p3 = 0x00;
    reqInfo.data = "";
    int32_t ret = g_rilInterface->SimTransmitApduBasicChannel(SLOTID_1, 1, reqInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_TRANSMIT_APDU_BASIC_CHANNEL));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SimTransmitApduBasicChannel_0600
 * @tc.name  : testV1SimTransmitApduBasicChannel004
 * @tc.desc  : Call function SimTransmitApduBasicChannel with serialId as 1 100times.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SimTransmitApduBasicChannel004, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    ApduSimIORequestInfo reqInfo;
    reqInfo.serial = 0;
    reqInfo.channelId = 0;
    reqInfo.type = 0x80;
    reqInfo.instruction = 0xCA;
    reqInfo.p1 = 0xFF;
    reqInfo.p2 = 0x40;
    reqInfo.p3 = 0x00;
    reqInfo.data = "";
    int32_t ret = 0;
    for (int i = 0; i < 100; i++) {
        ret = g_rilInterface->SimTransmitApduBasicChannel(SLOTID_1, 1, reqInfo);
        WaitFor(WAIT_TIME_SECOND);
        EXPECT_EQ(SUCCESS, ret);
        ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_TRANSMIT_APDU_BASIC_CHANNEL));
    }
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SimTransmitApduBasicChannel_0700
 * @tc.name  : testV1SimTransmitApduBasicChannel005
 * @tc.desc  : Call function SimTransmitApduBasicChannel with serialId as -1.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SimTransmitApduBasicChannel005, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    ApduSimIORequestInfo reqInfo;
    reqInfo.serial = 0;
    reqInfo.channelId = 0;
    reqInfo.type = 0x80;
    reqInfo.instruction = 0xCA;
    reqInfo.p1 = 0xFF;
    reqInfo.p2 = 0x40;
    reqInfo.p3 = 0x00;
    reqInfo.data = "";
    int32_t ret = g_rilInterface->SimTransmitApduBasicChannel(SLOTID_2, -1, reqInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SimTransmitApduBasicChannel_0800
 * @tc.name  : testV1SimTransmitApduBasicChannel006
 * @tc.desc  : Call function SimTransmitApduBasicChannel with serialId as 0.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SimTransmitApduBasicChannel006, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    ApduSimIORequestInfo reqInfo;
    reqInfo.serial = 0;
    reqInfo.channelId = 0;
    reqInfo.type = 0x80;
    reqInfo.instruction = 0xCA;
    reqInfo.p1 = 0xFF;
    reqInfo.p2 = 0x40;
    reqInfo.p3 = 0x00;
    reqInfo.data = "";
    int32_t ret = g_rilInterface->SimTransmitApduBasicChannel(SLOTID_2, 0, reqInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_TRANSMIT_APDU_BASIC_CHANNEL));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SimTransmitApduBasicChannel_0900
 * @tc.name  : testV1SimTransmitApduBasicChannel007
 * @tc.desc  : Call function SimTransmitApduBasicChannel with serialId as 1.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SimTransmitApduBasicChannel007, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    ApduSimIORequestInfo reqInfo;
    reqInfo.serial = 0;
    reqInfo.channelId = 0;
    reqInfo.type = 0x80;
    reqInfo.instruction = 0xCA;
    reqInfo.p1 = 0xFF;
    reqInfo.p2 = 0x40;
    reqInfo.p3 = 0x00;
    reqInfo.data = "";
    int32_t ret = g_rilInterface->SimTransmitApduBasicChannel(SLOTID_2, 1, reqInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_TRANSMIT_APDU_BASIC_CHANNEL));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SimTransmitApduBasicChannel_1000
 * @tc.name  : testV1SimTransmitApduBasicChannel008
 * @tc.desc  : Call function SimTransmitApduBasicChannel with serialId as 1 100times.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SimTransmitApduBasicChannel008, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    ApduSimIORequestInfo reqInfo;
    reqInfo.serial = 0;
    reqInfo.channelId = 0;
    reqInfo.type = 0x80;
    reqInfo.instruction = 0xCA;
    reqInfo.p1 = 0xFF;
    reqInfo.p2 = 0x40;
    reqInfo.p3 = 0x00;
    reqInfo.data = "";
    int32_t ret = 0;
    for (int i = 0; i < 100; i++) {
        ret = g_rilInterface->SimTransmitApduBasicChannel(SLOTID_2, 1, reqInfo);
        WaitFor(WAIT_TIME_SECOND);
        EXPECT_EQ(SUCCESS, ret);
        ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_TRANSMIT_APDU_BASIC_CHANNEL));
    }
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SimTransmitApduBasicChannel_1100
 * @tc.name  : testV1SimTransmitApduBasicChannel009
 * @tc.desc  : Call function SimTransmitApduBasicChannel with serial as -1.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SimTransmitApduBasicChannel009, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    ApduSimIORequestInfo reqInfo;
    reqInfo.serial = -1;
    reqInfo.channelId = 0;
    reqInfo.type = 0x80;
    reqInfo.instruction = 0xCA;
    reqInfo.p1 = 0xFF;
    reqInfo.p2 = 0x40;
    reqInfo.p3 = 0x00;
    reqInfo.data = "";
    int32_t ret = g_rilInterface->SimTransmitApduBasicChannel(SLOTID_1, 1, reqInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SimTransmitApduBasicChannel_1200
 * @tc.name  : testV1SimTransmitApduBasicChannel010
 * @tc.desc  : Call function SimTransmitApduBasicChannel with serial as 1.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SimTransmitApduBasicChannel010, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    ApduSimIORequestInfo reqInfo;
    reqInfo.serial = 1;
    reqInfo.channelId = 0;
    reqInfo.type = 0x80;
    reqInfo.instruction = 0xCA;
    reqInfo.p1 = 0xFF;
    reqInfo.p2 = 0x40;
    reqInfo.p3 = 0x00;
    reqInfo.data = "";
    int32_t ret = g_rilInterface->SimTransmitApduBasicChannel(SLOTID_1, 1, reqInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_TRANSMIT_APDU_BASIC_CHANNEL));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SimTransmitApduBasicChannel_1300
 * @tc.name  : testV1SimTransmitApduBasicChannel011
 * @tc.desc  : Call function SimTransmitApduBasicChannel with channelId as -1.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SimTransmitApduBasicChannel011, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    ApduSimIORequestInfo reqInfo;
    reqInfo.serial = 0;
    reqInfo.channelId = -1;
    reqInfo.type = 0x80;
    reqInfo.instruction = 0xCA;
    reqInfo.p1 = 0xFF;
    reqInfo.p2 = 0x40;
    reqInfo.p3 = 0x00;
    reqInfo.data = "";
    int32_t ret = g_rilInterface->SimTransmitApduBasicChannel(SLOTID_1, 1, reqInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SimTransmitApduBasicChannel_1400
 * @tc.name  : testV1SimTransmitApduBasicChannel012
 * @tc.desc  : Call function SimTransmitApduBasicChannel with channelId as 1.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SimTransmitApduBasicChannel012, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    ApduSimIORequestInfo reqInfo;
    reqInfo.serial = 0;
    reqInfo.channelId = 1;
    reqInfo.type = 0x80;
    reqInfo.instruction = 0xCA;
    reqInfo.p1 = 0xFF;
    reqInfo.p2 = 0x40;
    reqInfo.p3 = 0x00;
    reqInfo.data = "";
    int32_t ret = g_rilInterface->SimTransmitApduBasicChannel(SLOTID_1, 1, reqInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_TRANSMIT_APDU_BASIC_CHANNEL));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SimTransmitApduLogicalChannel_0300
 * @tc.name  : testV1SimTransmitApduLogicalChannel001
 * @tc.desc  : Call function SimTransmitApduLogicalChannel with serialId as -1.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SimTransmitApduLogicalChannel001, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    ApduSimIORequestInfo reqInfo;
    reqInfo.serial = 0;
    reqInfo.channelId = 0;
    reqInfo.type = 0x80;
    reqInfo.instruction = 0xCA;
    reqInfo.p1 = 0xFF;
    reqInfo.p2 = 0x40;
    reqInfo.p3 = 0x00;
    reqInfo.data = "";
    int32_t ret = g_rilInterface->SimTransmitApduLogicalChannel(SLOTID_1, -1, reqInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SimTransmitApduLogicalChannel_0400
 * @tc.name  : testV1SimTransmitApduLogicalChannel002
 * @tc.desc  : Call function SimTransmitApduLogicalChannel with serialId as 0.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SimTransmitApduLogicalChannel002, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    ApduSimIORequestInfo reqInfo;
    reqInfo.serial = 0;
    reqInfo.channelId = 0;
    reqInfo.type = 0x80;
    reqInfo.instruction = 0xCA;
    reqInfo.p1 = 0xFF;
    reqInfo.p2 = 0x40;
    reqInfo.p3 = 0x00;
    reqInfo.data = "";
    int32_t ret = g_rilInterface->SimTransmitApduLogicalChannel(SLOTID_1, 0, reqInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_TRANSMIT_APDU_LOGICAL_CHANNEL));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SimTransmitApduLogicalChannel_0500
 * @tc.name  : testV1SimTransmitApduLogicalChannel003
 * @tc.desc  : Call function SimTransmitApduLogicalChannel with serialId as 1.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SimTransmitApduLogicalChannel003, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    ApduSimIORequestInfo reqInfo;
    reqInfo.serial = 0;
    reqInfo.channelId = 0;
    reqInfo.type = 0x80;
    reqInfo.instruction = 0xCA;
    reqInfo.p1 = 0xFF;
    reqInfo.p2 = 0x40;
    reqInfo.p3 = 0x00;
    reqInfo.data = "";
    int32_t ret = g_rilInterface->SimTransmitApduLogicalChannel(SLOTID_1, 1, reqInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_TRANSMIT_APDU_LOGICAL_CHANNEL));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SimTransmitApduLogicalChannel_0600
 * @tc.name  : testV1SimTransmitApduLogicalChannel004
 * @tc.desc  : Call function SimTransmitApduLogicalChannel with serialId as 1 100times.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SimTransmitApduLogicalChannel004, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    ApduSimIORequestInfo reqInfo;
    reqInfo.serial = 0;
    reqInfo.channelId = 0;
    reqInfo.type = 0x80;
    reqInfo.instruction = 0xCA;
    reqInfo.p1 = 0xFF;
    reqInfo.p2 = 0x40;
    reqInfo.p3 = 0x00;
    reqInfo.data = "";
    int32_t ret = 0;
    for (int i = 0; i < 100; i++) {
        ret = g_rilInterface->SimTransmitApduLogicalChannel(SLOTID_1, 1, reqInfo);
        WaitFor(WAIT_TIME_SECOND);
        EXPECT_EQ(SUCCESS, ret);
        ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_TRANSMIT_APDU_LOGICAL_CHANNEL));
    }
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SimTransmitApduLogicalChannel_0700
 * @tc.name  : testV1SimTransmitApduLogicalChannel005
 * @tc.desc  : Call function SimTransmitApduLogicalChannel with serialId as -1.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SimTransmitApduLogicalChannel005, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    ApduSimIORequestInfo reqInfo;
    reqInfo.serial = 0;
    reqInfo.channelId = 0;
    reqInfo.type = 0x80;
    reqInfo.instruction = 0xCA;
    reqInfo.p1 = 0xFF;
    reqInfo.p2 = 0x40;
    reqInfo.p3 = 0x00;
    reqInfo.data = "";
    int32_t ret = g_rilInterface->SimTransmitApduLogicalChannel(SLOTID_2, -1, reqInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SimTransmitApduLogicalChannel_0800
 * @tc.name  : testV1SimTransmitApduLogicalChannel006
 * @tc.desc  : Call function SimTransmitApduLogicalChannel with serialId as 0.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SimTransmitApduLogicalChannel006, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    ApduSimIORequestInfo reqInfo;
    reqInfo.serial = 0;
    reqInfo.channelId = 0;
    reqInfo.type = 0x80;
    reqInfo.instruction = 0xCA;
    reqInfo.p1 = 0xFF;
    reqInfo.p2 = 0x40;
    reqInfo.p3 = 0x00;
    reqInfo.data = "";
    int32_t ret = g_rilInterface->SimTransmitApduLogicalChannel(SLOTID_2, 0, reqInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_TRANSMIT_APDU_LOGICAL_CHANNEL));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SimTransmitApduLogicalChannel_0900
 * @tc.name  : testV1SimTransmitApduLogicalChannel007
 * @tc.desc  : Call function SimTransmitApduLogicalChannel with serialId as 1.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SimTransmitApduLogicalChannel007, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    ApduSimIORequestInfo reqInfo;
    reqInfo.serial = 0;
    reqInfo.channelId = 0;
    reqInfo.type = 0x80;
    reqInfo.instruction = 0xCA;
    reqInfo.p1 = 0xFF;
    reqInfo.p2 = 0x40;
    reqInfo.p3 = 0x00;
    reqInfo.data = "";
    int32_t ret = g_rilInterface->SimTransmitApduLogicalChannel(SLOTID_2, 1, reqInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_TRANSMIT_APDU_LOGICAL_CHANNEL));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SimTransmitApduLogicalChannel_1000
 * @tc.name  : testV1SimTransmitApduLogicalChannel008
 * @tc.desc  : Call function SimTransmitApduLogicalChannel with serialId as 1 100times.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SimTransmitApduLogicalChannel008, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    ApduSimIORequestInfo reqInfo;
    reqInfo.serial = 0;
    reqInfo.channelId = 0;
    reqInfo.type = 0x80;
    reqInfo.instruction = 0xCA;
    reqInfo.p1 = 0xFF;
    reqInfo.p2 = 0x40;
    reqInfo.p3 = 0x00;
    reqInfo.data = "";
    int32_t ret = 0;
    for (int i = 0; i < 100; i++) {
        ret = g_rilInterface->SimTransmitApduLogicalChannel(SLOTID_2, 1, reqInfo);
        WaitFor(WAIT_TIME_SECOND);
        EXPECT_EQ(SUCCESS, ret);
        ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_TRANSMIT_APDU_LOGICAL_CHANNEL));
    }
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SimTransmitApduLogicalChannel_1100
 * @tc.name  : testV1SimTransmitApduLogicalChannel009
 * @tc.desc  : Call function SimTransmitApduLogicalChannel with serial as -1.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SimTransmitApduLogicalChannel009, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    ApduSimIORequestInfo reqInfo;
    reqInfo.serial = -1;
    reqInfo.channelId = 0;
    reqInfo.type = 0x80;
    reqInfo.instruction = 0xCA;
    reqInfo.p1 = 0xFF;
    reqInfo.p2 = 0x40;
    reqInfo.p3 = 0x00;
    reqInfo.data = "";
    int32_t ret = g_rilInterface->SimTransmitApduLogicalChannel(SLOTID_1, 1, reqInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SimTransmitApduLogicalChannel_1200
 * @tc.name  : testV1SimTransmitApduLogicalChannel010
 * @tc.desc  : Call function SimTransmitApduLogicalChannel with serial as 1.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SimTransmitApduLogicalChannel010, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    ApduSimIORequestInfo reqInfo;
    reqInfo.serial = 1;
    reqInfo.channelId = 0;
    reqInfo.type = 0x80;
    reqInfo.instruction = 0xCA;
    reqInfo.p1 = 0xFF;
    reqInfo.p2 = 0x40;
    reqInfo.p3 = 0x00;
    reqInfo.data = "";
    int32_t ret = g_rilInterface->SimTransmitApduLogicalChannel(SLOTID_1, 1, reqInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_TRANSMIT_APDU_LOGICAL_CHANNEL));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SimTransmitApduLogicalChannel_1300
 * @tc.name  : testV1SimTransmitApduLogicalChannel011
 * @tc.desc  : Call function SimTransmitApduLogicalChannel with channelId as -1.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SimTransmitApduLogicalChannel011, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    ApduSimIORequestInfo reqInfo;
    reqInfo.serial = 0;
    reqInfo.channelId = -1;
    reqInfo.type = 0x80;
    reqInfo.instruction = 0xCA;
    reqInfo.p1 = 0xFF;
    reqInfo.p2 = 0x40;
    reqInfo.p3 = 0x00;
    reqInfo.data = "";
    int32_t ret = g_rilInterface->SimTransmitApduLogicalChannel(SLOTID_1, 1, reqInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SimTransmitApduLogicalChannel_1400
 * @tc.name  : testV1SimTransmitApduLogicalChannel012
 * @tc.desc  : Call function SimTransmitApduLogicalChannel with channelId as 1.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SimTransmitApduLogicalChannel012, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    ApduSimIORequestInfo reqInfo;
    reqInfo.serial = 0;
    reqInfo.channelId = 1;
    reqInfo.type = 0x80;
    reqInfo.instruction = 0xCA;
    reqInfo.p1 = 0xFF;
    reqInfo.p2 = 0x40;
    reqInfo.p3 = 0x00;
    reqInfo.data = "";
    int32_t ret = g_rilInterface->SimTransmitApduLogicalChannel(SLOTID_1, 1, reqInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_TRANSMIT_APDU_LOGICAL_CHANNEL));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SimStkSendTerminalResponse_0300
 * @tc.name  : testV1SimStkSendTerminalResponse001
 * @tc.desc  : Call function SimStkSendTerminalResponse with SerialId as 1.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SimStkSendTerminalResponse001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SimStkSendTerminalResponse(SLOTID_1, 1, TEST_STORAGE_PDU);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_STK_SEND_TERMINAL_RESPONSE));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SimStkSendTerminalResponse_0400
 * @tc.name  : testV1SimStkSendTerminalResponse002
 * @tc.desc  : Call function SimStkSendTerminalResponse with SerialId as -1.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SimStkSendTerminalResponse002, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SimStkSendTerminalResponse(SLOTID_1, -1, TEST_STORAGE_PDU);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SimStkSendTerminalResponse_0500
 * @tc.name  : testV1SimStkSendTerminalResponse003
 * @tc.desc  : Call function SimStkSendTerminalResponse with SerialId as 0.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SimStkSendTerminalResponse003, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SimStkSendTerminalResponse(SLOTID_1, 0, TEST_STORAGE_PDU);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_STK_SEND_TERMINAL_RESPONSE));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SimStkSendTerminalResponse_0600
 * @tc.name  : testV1SimStkSendTerminalResponse004
 * @tc.desc  : Call function SimStkSendTerminalResponse with SerialId as 0 100times.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SimStkSendTerminalResponse004, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = 0;
    for (int i = 0; i < 100; i++) {
        ret = g_rilInterface->SimStkSendTerminalResponse(SLOTID_1, 0, TEST_STORAGE_PDU);
        WaitFor(WAIT_TIME_SECOND);
        EXPECT_EQ(SUCCESS, ret);
        ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_STK_SEND_TERMINAL_RESPONSE));
    }
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SimStkSendTerminalResponse_0700
 * @tc.name  : testV1SimStkSendTerminalResponse005
 * @tc.desc  : Call function SimStkSendTerminalResponse with SerialId as 1.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SimStkSendTerminalResponse005, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SimStkSendTerminalResponse(SLOTID_2, 1, TEST_STORAGE_PDU);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_STK_SEND_TERMINAL_RESPONSE));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SimStkSendTerminalResponse_0800
 * @tc.name  : testV1SimStkSendTerminalResponse006
 * @tc.desc  : Call function SimStkSendTerminalResponse with SerialId as -1.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SimStkSendTerminalResponse006, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SimStkSendTerminalResponse(SLOTID_2, -1, TEST_STORAGE_PDU);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SimStkSendTerminalResponse_0900
 * @tc.name  : testV1SimStkSendTerminalResponse007
 * @tc.desc  : Call function SimStkSendTerminalResponse with SerialId as 0.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SimStkSendTerminalResponse007, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SimStkSendTerminalResponse(SLOTID_2, 0, TEST_STORAGE_PDU);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_STK_SEND_TERMINAL_RESPONSE));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SimStkSendTerminalResponse_1000
 * @tc.name  : testV1SimStkSendTerminalResponse008
 * @tc.desc  : Call function SimStkSendTerminalResponse with SerialId as 0 100times.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SimStkSendTerminalResponse008, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = 0;
    for (int i = 0; i < 100; i++) {
        ret = g_rilInterface->SimStkSendTerminalResponse(SLOTID_2, 0, TEST_STORAGE_PDU);
        WaitFor(WAIT_TIME_SECOND);
        EXPECT_EQ(SUCCESS, ret);
        ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_STK_SEND_TERMINAL_RESPONSE));
    }
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SimStkSendTerminalResponse_1100
 * @tc.name  : testV1SimStkSendTerminalResponse009
 * @tc.desc  : Call function SimStkSendTerminalResponse with StrCmd as TEST_SEND_PDU .
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SimStkSendTerminalResponse009, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SimStkSendTerminalResponse(SLOTID_1, 1, TEST_SEND_PDU);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_STK_SEND_TERMINAL_RESPONSE));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SimStkSendTerminalResponse_1200
 * @tc.name  : testV1SimStkSendTerminalResponse010
 * @tc.desc  : Call function SimStkSendTerminalResponse with StrCmd as TEST_SMSC_PDU.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SimStkSendTerminalResponse010, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SimStkSendTerminalResponse(SLOTID_1, 1, TEST_SMSC_PDU);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_STK_SEND_TERMINAL_RESPONSE));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SimStkSendTerminalResponse_1300
 * @tc.name  : testV1SimStkSendTerminalResponse011
 * @tc.desc  : Call function SimStkSendTerminalResponse with StrCmd as TEST_CDMA_PDU.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SimStkSendTerminalResponse011, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SimStkSendTerminalResponse(SLOTID_1, 1, TEST_CDMA_PDU);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_STK_SEND_TERMINAL_RESPONSE));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SimStkSendTerminalResponse_1400
 * @tc.name  : testV1SimStkSendTerminalResponse012
 * @tc.desc  : Call function SimStkSendTerminalResponse with StrCmd as TEST_SMSC_ADDR.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SimStkSendTerminalResponse012, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SimStkSendTerminalResponse(SLOTID_1, 1, TEST_SMSC_ADDR);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_STK_SEND_TERMINAL_RESPONSE));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SimStkSendTerminalResponse_1500
 * @tc.name  : testV1SimStkSendTerminalResponse013
 * @tc.desc  : Call function SimStkSendTerminalResponse with StrCmd as TEST_ID_LIST.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SimStkSendTerminalResponse013, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SimStkSendTerminalResponse(SLOTID_1, 1, TEST_ID_LIST);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_STK_SEND_TERMINAL_RESPONSE));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SimStkSendTerminalResponse_1600
 * @tc.name  : testV1SimStkSendTerminalResponse014
 * @tc.desc  : Call function SimStkSendTerminalResponse with StrCmd as TEST_DCS_LIST.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SimStkSendTerminalResponse014, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SimStkSendTerminalResponse(SLOTID_1, 1, TEST_DCS_LIST);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_STK_SEND_TERMINAL_RESPONSE));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SimStkSendEnvelope_0300
 * @tc.name  : testV1SimStkSendEnvelope001
 * @tc.desc  : Call function SimStkSendEnvelope with SerialId as 1.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SimStkSendEnvelope001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SimStkSendEnvelope(SLOTID_1, 1, TEST_STORAGE_PDU);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_STK_SEND_ENVELOPE));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SimStkSendEnvelope_0400
 * @tc.name  : testV1SimStkSendEnvelope002
 * @tc.desc  : Call function SimStkSendEnvelope with SerialId as -1.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SimStkSendEnvelope002, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SimStkSendEnvelope(SLOTID_1, -1, TEST_STORAGE_PDU);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SimStkSendEnvelope_0500
 * @tc.name  : testV1SimStkSendEnvelope003
 * @tc.desc  : Call function SimStkSendEnvelope with SerialId as 0.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SimStkSendEnvelope003, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SimStkSendEnvelope(SLOTID_1, 0, TEST_STORAGE_PDU);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_STK_SEND_ENVELOPE));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SimStkSendEnvelope_0600
 * @tc.name  : testV1SimStkSendEnvelope004
 * @tc.desc  : Call function SimStkSendEnvelope with SerialId as 0 100times.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SimStkSendEnvelope004, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = 0;
    for (int i = 0; i < 100; i++) {
        ret = g_rilInterface->SimStkSendEnvelope(SLOTID_1, 0, TEST_STORAGE_PDU);
        WaitFor(WAIT_TIME_SECOND);
        EXPECT_EQ(SUCCESS, ret);
        ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_STK_SEND_ENVELOPE));
    }
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SimStkSendEnvelope_0700
 * @tc.name  : testV1SimStkSendEnvelope005
 * @tc.desc  : Call function SimStkSendEnvelope with SerialId as 1.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SimStkSendEnvelope005, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SimStkSendEnvelope(SLOTID_2, 1, TEST_STORAGE_PDU);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_STK_SEND_ENVELOPE));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SimStkSendEnvelope_0800
 * @tc.name  : testV1SimStkSendEnvelope006
 * @tc.desc  : Call function SimStkSendEnvelope with SerialId as -1.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SimStkSendEnvelope006, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SimStkSendEnvelope(SLOTID_2, -1, TEST_STORAGE_PDU);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SimStkSendEnvelope_0900
 * @tc.name  : testV1SimStkSendEnvelope007
 * @tc.desc  : Call function SimStkSendEnvelope with SerialId as 0.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SimStkSendEnvelope007, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SimStkSendEnvelope(SLOTID_2, 0, TEST_STORAGE_PDU);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_STK_SEND_ENVELOPE));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SimStkSendEnvelope_1000
 * @tc.name  : testV1SimStkSendEnvelope008
 * @tc.desc  : Call function SimStkSendEnvelope with SerialId as 0 100times.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SimStkSendEnvelope008, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = 0;
    for (int i = 0; i < 100; i++) {
        ret = g_rilInterface->SimStkSendEnvelope(SLOTID_2, 0, TEST_STORAGE_PDU);
        WaitFor(WAIT_TIME_SECOND);
        EXPECT_EQ(SUCCESS, ret);
        ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_STK_SEND_ENVELOPE));
    }
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SimStkSendEnvelope_1100
 * @tc.name  : testV1SimStkSendEnvelope009
 * @tc.desc  : Call function SimStkSendEnvelope with SerialId as TEST_SEND_PDU .
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SimStkSendEnvelope009, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SimStkSendEnvelope(SLOTID_1, 1, TEST_SEND_PDU);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_STK_SEND_ENVELOPE));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SimStkSendEnvelope_1200
 * @tc.name  : testV1SimStkSendEnvelope010
 * @tc.desc  : Call function SimStkSendEnvelope with SerialId as TEST_SMSC_PDU.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SimStkSendEnvelope010, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SimStkSendEnvelope(SLOTID_1, 1, TEST_SMSC_PDU);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_STK_SEND_ENVELOPE));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SimStkSendEnvelope_1300
 * @tc.name  : testV1SimStkSendEnvelope011
 * @tc.desc  : Call function SimStkSendEnvelope with SerialId as TEST_CDMA_PDU.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SimStkSendEnvelope011, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SimStkSendEnvelope(SLOTID_1, 1, TEST_CDMA_PDU);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_STK_SEND_ENVELOPE));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SimStkSendEnvelope_1400
 * @tc.name  : testV1SimStkSendEnvelope012
 * @tc.desc  : Call function SimStkSendEnvelope with SerialId as TEST_SMSC_ADDR.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SimStkSendEnvelope012, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SimStkSendEnvelope(SLOTID_1, 1, TEST_SMSC_ADDR);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_STK_SEND_ENVELOPE));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SimStkSendEnvelope_1500
 * @tc.name  : testV1SimStkSendEnvelope013
 * @tc.desc  : Call function SimStkSendEnvelope with SerialId as TEST_ID_LIST.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SimStkSendEnvelope013, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SimStkSendEnvelope(SLOTID_1, 1, TEST_ID_LIST);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_STK_SEND_ENVELOPE));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SimStkSendEnvelope_1600
 * @tc.name  : testV1SimStkSendEnvelope014
 * @tc.desc  : Call function SimStkSendEnvelope with SerialId as TEST_DCS_LIST.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SimStkSendEnvelope014, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SimStkSendEnvelope(SLOTID_1, 1, TEST_DCS_LIST);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_STK_SEND_ENVELOPE));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SimStkSendCallSetupRequestResult_0300
 * @tc.name  : testV1SimStkSendCallSetupRequestResult001
 * @tc.desc  : Call function SimStkSendCallSetupRequestResult with SerialId as 1.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SimStkSendCallSetupRequestResult001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SimStkSendCallSetupRequestResult(SLOTID_1, 1, true);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_STK_SEND_CALL_SETUP_REQUEST_RESULT));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SimStkSendCallSetupRequestResult_0400
 * @tc.name  : testV1SimStkSendCallSetupRequestResult002
 * @tc.desc  : Call function SimStkSendCallSetupRequestResult with SerialId as -1.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SimStkSendCallSetupRequestResult002, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SimStkSendCallSetupRequestResult(SLOTID_1, -1, true);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SimStkSendCallSetupRequestResult_0500
 * @tc.name  : testV1SimStkSendCallSetupRequestResult003
 * @tc.desc  : Call function SimStkSendCallSetupRequestResult with SerialId as 0.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SimStkSendCallSetupRequestResult003, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SimStkSendCallSetupRequestResult(SLOTID_1, 0, true);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_STK_SEND_CALL_SETUP_REQUEST_RESULT));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SimStkSendCallSetupRequestResult_0600
 * @tc.name  : testV1SimStkSendCallSetupRequestResult004
 * @tc.desc  : Call function SimStkSendCallSetupRequestResult with SerialId as 0 100times.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SimStkSendCallSetupRequestResult004, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = 0;
    for (int i = 0; i < 100; i++) {
        ret = g_rilInterface->SimStkSendCallSetupRequestResult(SLOTID_1, 0, true);
        WaitFor(WAIT_TIME_SECOND);
        EXPECT_EQ(SUCCESS, ret);
        ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_STK_SEND_CALL_SETUP_REQUEST_RESULT));
    }
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SimStkSendCallSetupRequestResult_0700
 * @tc.name  : testV1SimStkSendCallSetupRequestResult005
 * @tc.desc  : Call function SimStkSendCallSetupRequestResult with SerialId as 1.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SimStkSendCallSetupRequestResult005, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SimStkSendCallSetupRequestResult(SLOTID_2, 1, true);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_STK_SEND_CALL_SETUP_REQUEST_RESULT));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SimStkSendCallSetupRequestResult_0800
 * @tc.name  : testV1SimStkSendCallSetupRequestResult006
 * @tc.desc  : Call function SimStkSendCallSetupRequestResult with SerialId as -1.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SimStkSendCallSetupRequestResult006, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SimStkSendCallSetupRequestResult(SLOTID_2, -1, true);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SimStkSendCallSetupRequestResult_0900
 * @tc.name  : testV1SimStkSendCallSetupRequestResult007
 * @tc.desc  : Call function SimStkSendCallSetupRequestResult with SerialId as 0.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SimStkSendCallSetupRequestResult007, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SimStkSendCallSetupRequestResult(SLOTID_2, 0, true);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_STK_SEND_CALL_SETUP_REQUEST_RESULT));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SimStkSendCallSetupRequestResult_1000
 * @tc.name  : testV1SimStkSendCallSetupRequestResult008
 * @tc.desc  : Call function SimStkSendCallSetupRequestResult with SerialId as 0 100times.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SimStkSendCallSetupRequestResult008, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = 0;
    for (int i = 0; i < 100; i++) {
        ret = g_rilInterface->SimStkSendCallSetupRequestResult(SLOTID_2, 0, true);
        WaitFor(WAIT_TIME_SECOND);
        EXPECT_EQ(SUCCESS, ret);
        ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_STK_SEND_CALL_SETUP_REQUEST_RESULT));
    }
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SimStkIsReady_0300
 * @tc.name  : testV1SimStkIsReady001
 * @tc.desc  : Call function SimStkIsReady with SerialId as 1.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SimStkIsReady001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SimStkIsReady(SLOTID_1, 1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_STK_IS_READY));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SimStkIsReady_0400
 * @tc.name  : testV1SimStkIsReady002
 * @tc.desc  : Call function SimStkIsReady with SerialId as -1.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SimStkIsReady002, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SimStkIsReady(SLOTID_1, -1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SimStkIsReady_0500
 * @tc.name  : testV1SimStkIsReady003
 * @tc.desc  : Call function SimStkIsReady with SerialId as 0.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SimStkIsReady003, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SimStkIsReady(SLOTID_1, 0);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_STK_IS_READY));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SimStkIsReady_0600
 * @tc.name  : testV1SimStkIsReady004
 * @tc.desc  : Call function SimStkIsReady with SerialId as 0 100times.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SimStkIsReady004, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = 0;
    for (int i = 0; i < 100; i++) {
        ret = g_rilInterface->SimStkIsReady(SLOTID_1, 0);
        WaitFor(WAIT_TIME_SECOND);
        EXPECT_EQ(SUCCESS, ret);
        ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_STK_IS_READY));
    }
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SimStkIsReady_0700
 * @tc.name  : testV1SimStkIsReady005
 * @tc.desc  : Call function SimStkIsReady with SerialId as 1.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SimStkIsReady005, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SimStkIsReady(SLOTID_2, 1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_STK_IS_READY));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SimStkIsReady_0800
 * @tc.name  : testV1SimStkIsReady006
 * @tc.desc  : Call function SimStkIsReady with SerialId as -1.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SimStkIsReady006, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SimStkIsReady(SLOTID_2, -1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SimStkIsReady_0900
 * @tc.name  : testV1SimStkIsReady007
 * @tc.desc  : Call function SimStkIsReady with SerialId as 0.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SimStkIsReady007, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SimStkIsReady(SLOTID_2, 0);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_STK_IS_READY));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SimStkIsReady_1000
 * @tc.name  : testV1SimStkIsReady008
 * @tc.desc  : Call function SimStkIsReady with SerialId as 0 100times.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SimStkIsReady008, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = 0;
    for (int i = 0; i < 100; i++) {
        ret = g_rilInterface->SimStkIsReady(SLOTID_2, 0);
        WaitFor(WAIT_TIME_SECOND);
        EXPECT_EQ(SUCCESS, ret);
        ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_STK_IS_READY));
    }
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetRadioProtocol_0300
 * @tc.name  : testV1SetRadioProtocol001
 * @tc.desc  : Call function SetRadioProtocol with SerialId as 1.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetRadioProtocol001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    RadioProtocol protocol;
    protocol.slotId = SLOTID_1;
    int32_t ret = g_rilInterface->SetRadioProtocol(SLOTID_1, 1, protocol);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_RADIO_PROTOCOL));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetRadioProtocol_0400
 * @tc.name  : testV1SetRadioProtocol002
 * @tc.desc  : Call function SetRadioProtocol with SerialId as -1.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetRadioProtocol002, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    RadioProtocol protocol;
    protocol.slotId = SLOTID_1;
    int32_t ret = g_rilInterface->SetRadioProtocol(SLOTID_1, -1, protocol);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetRadioProtocol_0500
 * @tc.name  : testV1SetRadioProtocol003
 * @tc.desc  : Call function SetRadioProtocol with SerialId as 0.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetRadioProtocol003, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    RadioProtocol protocol;
    protocol.slotId = SLOTID_1;
    int32_t ret = g_rilInterface->SetRadioProtocol(SLOTID_1, 0, protocol);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_RADIO_PROTOCOL));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetRadioProtocol_0600
 * @tc.name  : testV1SetRadioProtocol004
 * @tc.desc  : Call function SetRadioProtocol with SerialId as 0 100times.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetRadioProtocol004, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = 0;
    RadioProtocol protocol;
    protocol.slotId = SLOTID_1;
    for (int i = 0; i < 100; i++) {
        ret = g_rilInterface->SetRadioProtocol(SLOTID_1, 0, protocol);
        WaitFor(WAIT_TIME_SECOND);
        EXPECT_EQ(SUCCESS, ret);
        ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_RADIO_PROTOCOL));
    }
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetRadioProtocol_0700
 * @tc.name  : testV1SetRadioProtocol005
 * @tc.desc  : Call function SetRadioProtocol with SerialId as 1.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetRadioProtocol005, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    RadioProtocol protocol;
    protocol.slotId = SLOTID_2;
    int32_t ret = g_rilInterface->SetRadioProtocol(SLOTID_2, 1, protocol);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_RADIO_PROTOCOL));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetRadioProtocol_0800
 * @tc.name  : testV1SetRadioProtocol006
 * @tc.desc  : Call function SetRadioProtocol with SerialId as -1.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetRadioProtocol006, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    RadioProtocol protocol;
    protocol.slotId = SLOTID_2;
    int32_t ret = g_rilInterface->SetRadioProtocol(SLOTID_2, -1, protocol);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetRadioProtocol_0900
 * @tc.name  : testV1SetRadioProtocol007
 * @tc.desc  : Call function SetRadioProtocol with SerialId as 0.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetRadioProtocol007, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    RadioProtocol protocol;
    protocol.slotId = SLOTID_2;
    int32_t ret = g_rilInterface->SetRadioProtocol(SLOTID_2, 0, protocol);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_RADIO_PROTOCOL));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetRadioProtocol_1000
 * @tc.name  : testV1SetRadioProtocol008
 * @tc.desc  : Call function SetRadioProtocol with SerialId as 0 100times.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetRadioProtocol008, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = 0;
    RadioProtocol protocol;
    protocol.slotId = SLOTID_2;
    for (int i = 0; i < 100; i++) {
        ret = g_rilInterface->SetRadioProtocol(SLOTID_2, 0, protocol);
        WaitFor(WAIT_TIME_SECOND);
        EXPECT_EQ(SUCCESS, ret);
        ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_RADIO_PROTOCOL));
    }
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetRadioProtocol_0100
 * @tc.name  : testV1GetRadioProtocol001
 * @tc.desc  : Call function GetRadioProtocol with SerialId as 1.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetRadioProtocol001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->GetRadioProtocol(SLOTID_1, 1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_RADIO_PROTOCOL));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SimOpenLogicalChannel_0300
 * @tc.name  : testV1SimOpenLogicalChannel001
 * @tc.desc  : Call function SimOpenLogicalChannel with SerialId as 1.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SimOpenLogicalChannel001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    std::string appID = "A00000015141434C00";
    int32_t p2 = 0;
    int32_t ret = g_rilInterface->SimOpenLogicalChannel(SLOTID_1, 1, appID, p2);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_OPEN_LOGICAL_CHANNEL));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SimOpenLogicalChannel_0400
 * @tc.name  : testV1SimOpenLogicalChannel002
 * @tc.desc  : Call function SimOpenLogicalChannel with SerialId as -1.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SimOpenLogicalChannel002, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    std::string appID = "A00000015141434C00";
    int32_t p2 = 0;
    int32_t ret = g_rilInterface->SimOpenLogicalChannel(SLOTID_1, -1, appID, p2);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SimOpenLogicalChannel_0500
 * @tc.name  : testV1SimOpenLogicalChannel003
 * @tc.desc  : Call function SimOpenLogicalChannel with SerialId as 0.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SimOpenLogicalChannel003, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    std::string appID = "A00000015141434C00";
    int32_t p2 = 0;
    int32_t ret = g_rilInterface->SimOpenLogicalChannel(SLOTID_1, 0, appID, p2);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_OPEN_LOGICAL_CHANNEL));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SimOpenLogicalChannel_0600
 * @tc.name  : testV1SimOpenLogicalChannel004
 * @tc.desc  : Call function SimOpenLogicalChannel with SerialId as 0 100times.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SimOpenLogicalChannel004, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    std::string appID = "A00000015141434C00";
    int32_t p2 = 0;
    int32_t ret = 0;
    for (int i = 0; i < 100; i++) {
        ret = g_rilInterface->SimOpenLogicalChannel(SLOTID_1, 0, appID, p2);
        WaitFor(WAIT_TIME_SECOND);
        EXPECT_EQ(SUCCESS, ret);
        ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_OPEN_LOGICAL_CHANNEL));
    }
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SimOpenLogicalChannel_0700
 * @tc.name  : testV1SimOpenLogicalChannel005
 * @tc.desc  : Call function SimOpenLogicalChannel with SerialId as 1.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SimOpenLogicalChannel005, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    std::string appID = "A00000015141434C00";
    int32_t p2 = 0;
    int32_t ret = g_rilInterface->SimOpenLogicalChannel(SLOTID_2, 1, appID, p2);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_OPEN_LOGICAL_CHANNEL));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SimOpenLogicalChannel_0800
 * @tc.name  : testV1SimOpenLogicalChannel006
 * @tc.desc  : Call function SimOpenLogicalChannel with SerialId as -1.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SimOpenLogicalChannel006, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    std::string appID = "A00000015141434C00";
    int32_t p2 = 0;
    int32_t ret = g_rilInterface->SimOpenLogicalChannel(SLOTID_2, -1, appID, p2);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SimOpenLogicalChannel_0900
 * @tc.name  : testV1SimOpenLogicalChannel007
 * @tc.desc  : Call function SimOpenLogicalChannel with SerialId as 0.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SimOpenLogicalChannel007, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    std::string appID = "A00000015141434C00";
    int32_t p2 = 0;
    int32_t ret = g_rilInterface->SimOpenLogicalChannel(SLOTID_2, 0, appID, p2);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_OPEN_LOGICAL_CHANNEL));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SimOpenLogicalChannel_1000
 * @tc.name  : testV1SimOpenLogicalChannel008
 * @tc.desc  : Call function SimOpenLogicalChannel with SerialId as 0 100times.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SimOpenLogicalChannel008, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    std::string appID = "A00000015141434C00";
    int32_t p2 = 0;
    int32_t ret = 0;
    for (int i = 0; i < 100; i++) {
        ret = g_rilInterface->SimOpenLogicalChannel(SLOTID_2, 0, appID, p2);
        WaitFor(WAIT_TIME_SECOND);
        EXPECT_EQ(SUCCESS, ret);
        ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_OPEN_LOGICAL_CHANNEL));
    }
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SimCloseLogicalChannel_0300
 * @tc.name  : testV1SimCloseLogicalChannel001
 * @tc.desc  : Call function SimCloseLogicalChannel with SerialId as 1.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SimCloseLogicalChannel001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SimCloseLogicalChannel(SLOTID_1, 1, currentChannelId_);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_CLOSE_LOGICAL_CHANNEL));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SimCloseLogicalChannel_0400
 * @tc.name  : testV1SimCloseLogicalChannel002
 * @tc.desc  : Call function SimCloseLogicalChannel with SerialId as -1.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SimCloseLogicalChannel002, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SimCloseLogicalChannel(SLOTID_1, -1, currentChannelId_);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SimCloseLogicalChannel_0500
 * @tc.name  : testV1SimCloseLogicalChannel003
 * @tc.desc  : Call function SimCloseLogicalChannel with SerialId as 0.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SimCloseLogicalChannel003, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SimCloseLogicalChannel(SLOTID_1, 0, currentChannelId_);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_CLOSE_LOGICAL_CHANNEL));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SimCloseLogicalChannel_0600
 * @tc.name  : testV1SimCloseLogicalChannel004
 * @tc.desc  : Call function SimCloseLogicalChannel with SerialId as 0 100times.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SimCloseLogicalChannel004, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = 0;
    for (int i = 0; i < 100; i++) {
        ret = g_rilInterface->SimCloseLogicalChannel(SLOTID_1, 0, currentChannelId_);
        WaitFor(WAIT_TIME_SECOND);
        EXPECT_EQ(SUCCESS, ret);
        ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_CLOSE_LOGICAL_CHANNEL));
    }
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SimCloseLogicalChannel_0700
 * @tc.name  : testV1SimCloseLogicalChannel005
 * @tc.desc  : Call function SimCloseLogicalChannel with SerialId as 1.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SimCloseLogicalChannel005, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t ret = g_rilInterface->SimCloseLogicalChannel(SLOTID_2, 1, currentChannelId_);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_CLOSE_LOGICAL_CHANNEL));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SimCloseLogicalChannel_0800
 * @tc.name  : testV1SimCloseLogicalChannel006
 * @tc.desc  : Call function SimCloseLogicalChannel with SerialId as -1.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SimCloseLogicalChannel006, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t ret = g_rilInterface->SimCloseLogicalChannel(SLOTID_2, -1, currentChannelId_);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SimCloseLogicalChannel_0900
 * @tc.name  : testV1SimCloseLogicalChannel007
 * @tc.desc  : Call function SimCloseLogicalChannel with SerialId as 0.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SimCloseLogicalChannel007, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t ret = g_rilInterface->SimCloseLogicalChannel(SLOTID_2, 0, currentChannelId_);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_CLOSE_LOGICAL_CHANNEL));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SimCloseLogicalChannel_1000
 * @tc.name  : testV1SimCloseLogicalChannel008
 * @tc.desc  : Call function SimCloseLogicalChannel with SerialId as 0 100times.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SimCloseLogicalChannel008, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t ret = 0;
    for (int i = 0; i < 100; i++) {
        ret = g_rilInterface->SimCloseLogicalChannel(SLOTID_2, 0, currentChannelId_);
        WaitFor(WAIT_TIME_SECOND);
        EXPECT_EQ(SUCCESS, ret);
        ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_CLOSE_LOGICAL_CHANNEL));
    }
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1DialResponse_0300
 * @tc.name  : testV1DialResponse001
 * @tc.desc  : Call function DialResponse.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1DialResponse001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    g_dialResponseFlag = false;
    DialInfo dialInfo = {};
    dialInfo.address = "10086";
    dialInfo.clir = 0;
    int32_t ret = 0;
    ret = g_rilInterface->Dial(SLOTID_1, GetSerialId(), dialInfo);
    EXPECT_EQ(SUCCESS, ret);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(true, g_dialResponseFlag);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_DIAL));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1DialResponse_0400
 * @tc.name  : testV1DialResponse002
 * @tc.desc  : Call function DialResponse.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1DialResponse002, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    g_dialResponseFlag = false;
    DialInfo dialInfo = {};
    dialInfo.address = "10086";
    dialInfo.clir = 0;
    int32_t ret = 0;
    ret = g_rilInterface->Dial(SLOTID_2, GetSerialId(), dialInfo);
    EXPECT_EQ(SUCCESS, ret);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(true, g_dialResponseFlag);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_DIAL));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1DialResponse_0500
 * @tc.name  : testV1DialResponse003
 * @tc.desc  : Call function DialResponse 100times.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1DialResponse003, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    g_dialResponseFlag = false;
    DialInfo dialInfo = {};
    dialInfo.address = "10086";
    dialInfo.clir = 0;
    int32_t ret = 0;
    for (int i = 0; i < 100; i++) {
        ret = g_rilInterface->Dial(SLOTID_1, GetSerialId(), dialInfo);
        EXPECT_EQ(SUCCESS, ret);
        WaitFor(WAIT_TIME_SECOND);
        EXPECT_EQ(true, g_dialResponseFlag);
        ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_DIAL));
    }
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1DialResponse_0600
 * @tc.name  : testV1DialResponse004
 * @tc.desc  : Call function DialResponse 100times.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1DialResponse004, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    g_dialResponseFlag = false;
    DialInfo dialInfo = {};
    dialInfo.address = "10086";
    dialInfo.clir = 0;
    int32_t ret = 0;
    for (int i = 0; i < 100; i++) {
        ret = g_rilInterface->Dial(SLOTID_2, GetSerialId(), dialInfo);
        EXPECT_EQ(SUCCESS, ret);
        WaitFor(WAIT_TIME_SECOND);
        EXPECT_EQ(true, g_dialResponseFlag);
        ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_DIAL));
    }
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1DialResponse_0700
 * @tc.name  : testV1DialResponse005
 * @tc.desc  : Call function DialResponse.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1DialResponse005, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    g_dialResponseFlag = false;
    DialInfo dialInfo = {};
    dialInfo.address = "10086";
    dialInfo.clir = 0;
    int32_t ret = 0;
    ret = g_rilInterface->Dial(SLOTID_1, -1, dialInfo);
    EXPECT_NE(SUCCESS, ret);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(true, g_dialResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1DialResponse_0800
 * @tc.name  : testV1DialResponse006
 * @tc.desc  : Call function DialResponse.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1DialResponse006, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    g_dialResponseFlag = false;
    DialInfo dialInfo = {};
    dialInfo.address = "10086";
    dialInfo.clir = 0;
    int32_t ret = 0;
    ret = g_rilInterface->Dial(SLOTID_2, -1, dialInfo);
    EXPECT_NE(SUCCESS, ret);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(true, g_dialResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1DialResponse_0900
 * @tc.name  : testV1DialResponse007
 * @tc.desc  : Call function DialResponse.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1DialResponse007, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    g_dialResponseFlag = false;
    DialInfo dialInfo = {};
    dialInfo.address = "10086";
    dialInfo.clir = 1;
    int32_t ret = 0;
    ret = g_rilInterface->Dial(SLOTID_1, GetSerialId(), dialInfo);
    EXPECT_EQ(SUCCESS, ret);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(true, g_dialResponseFlag);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_DIAL));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1DialResponse_1000
 * @tc.name  : testV1DialResponse008
 * @tc.desc  : Call function DialResponse.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1DialResponse008, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    g_dialResponseFlag = false;
    DialInfo dialInfo = {};
    dialInfo.address = "10086";
    dialInfo.clir = 1;
    int32_t ret = 0;
    ret = g_rilInterface->Dial(SLOTID_2, GetSerialId(), dialInfo);
    EXPECT_EQ(SUCCESS, ret);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(true, g_dialResponseFlag);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_DIAL));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1DeactivatePdpContext_0300
 * @tc.name  : testV1DeactivatePdpContext001
 * @tc.desc  : Deactivates the PDP context. SLOTID_1 serialId = 0.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1DeactivatePdpContext001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t serialId = 0;
    UniInfo uniInfo;
    uniInfo.serial = serialId;
    uniInfo.gsmIndex = 1;
    uniInfo.arg1 = 2;
    int32_t ret = g_rilInterface->DeactivatePdpContext(SLOTID_1, serialId, uniInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_DATA_DEACTIVATE_PDP_CONTEXT));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1DeactivatePdpContext_0400
 * @tc.name  : testV1DeactivatePdpContext002
 * @tc.desc  : Deactivates the PDP context. SLOTID_1 serialId = 1.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1DeactivatePdpContext002, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t serialId = 1;
    UniInfo uniInfo;
    uniInfo.serial = serialId;
    uniInfo.gsmIndex = 1;
    uniInfo.arg1 = 2;
    int32_t ret = g_rilInterface->DeactivatePdpContext(SLOTID_1, serialId, uniInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_DATA_DEACTIVATE_PDP_CONTEXT));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1DeactivatePdpContext_0500
 * @tc.name  : testV1DeactivatePdpContext003
 * @tc.desc  : Deactivates the PDP context. SLOTID_1 serialId = 100.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1DeactivatePdpContext003, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t serialId = 100;
    UniInfo uniInfo;
    uniInfo.serial = serialId;
    uniInfo.gsmIndex = 1;
    uniInfo.arg1 = 2;
    int32_t ret = g_rilInterface->DeactivatePdpContext(SLOTID_1, serialId, uniInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_DATA_DEACTIVATE_PDP_CONTEXT));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1DeactivatePdpContext_0600
 * @tc.name  : testV1DeactivatePdpContext004
 * @tc.desc  : Deactivates the PDP context. SLOTID_1 serialId = 1000000000.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1DeactivatePdpContext004, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t serialId = 1000000000;
    UniInfo uniInfo;
    uniInfo.serial = serialId;
    uniInfo.gsmIndex = 1;
    uniInfo.arg1 = 2;
    int32_t ret = g_rilInterface->DeactivatePdpContext(SLOTID_1, serialId, uniInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_DATA_DEACTIVATE_PDP_CONTEXT));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1DeactivatePdpContext_0700
 * @tc.name  : testV1DeactivatePdpContext005
 * @tc.desc  : Deactivates the PDP context. SLOTID_1 serialId = 255.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1DeactivatePdpContext005, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t serialId = 255;
    UniInfo uniInfo;
    uniInfo.serial = serialId;
    uniInfo.gsmIndex = 1;
    uniInfo.arg1 = 2;
    int32_t ret = g_rilInterface->DeactivatePdpContext(SLOTID_1, serialId, uniInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_DATA_DEACTIVATE_PDP_CONTEXT));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1DeactivatePdpContext_0800
 * @tc.name  : testV1DeactivatePdpContext006
 * @tc.desc  : Deactivates the PDP context. SLOTID_2 serialId = 0.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1DeactivatePdpContext006, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t serialId = 0;
    UniInfo uniInfo;
    uniInfo.serial = serialId;
    uniInfo.gsmIndex = 1;
    uniInfo.arg1 = 2;
    int32_t ret = g_rilInterface->DeactivatePdpContext(SLOTID_2, serialId, uniInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_DATA_DEACTIVATE_PDP_CONTEXT));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1DeactivatePdpContext_0900
 * @tc.name  : testV1DeactivatePdpContext007
 * @tc.desc  : Deactivates the PDP context. SLOTID_2 serialId = 1.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1DeactivatePdpContext007, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t serialId = 1;
    UniInfo uniInfo;
    uniInfo.serial = serialId;
    uniInfo.gsmIndex = 1;
    uniInfo.arg1 = 2;
    int32_t ret = g_rilInterface->DeactivatePdpContext(SLOTID_2, serialId, uniInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_DATA_DEACTIVATE_PDP_CONTEXT));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1DeactivatePdpContext_1000
 * @tc.name  : testV1DeactivatePdpContext008
 * @tc.desc  : Deactivates the PDP context. SLOTID_2 serialId = 100.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1DeactivatePdpContext008, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t serialId = 100;
    UniInfo uniInfo;
    uniInfo.serial = serialId;
    uniInfo.gsmIndex = 1;
    uniInfo.arg1 = 2;
    int32_t ret = g_rilInterface->DeactivatePdpContext(SLOTID_2, serialId, uniInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_DATA_DEACTIVATE_PDP_CONTEXT));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1DeactivatePdpContext_1100
 * @tc.name  : testV1DeactivatePdpContext009
 * @tc.desc  : Deactivates the PDP context. SLOTID_2 serialId = 1000000000.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1DeactivatePdpContext009, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t serialId = 1000000000;
    UniInfo uniInfo;
    uniInfo.serial = serialId;
    uniInfo.gsmIndex = 1;
    uniInfo.arg1 = 2;
    int32_t ret = g_rilInterface->DeactivatePdpContext(SLOTID_2, serialId, uniInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_DATA_DEACTIVATE_PDP_CONTEXT));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1DeactivatePdpContext_1200
 * @tc.name  : testV1DeactivatePdpContext010
 * @tc.desc  : Deactivates the PDP context. SLOTID_2 serialId = 255.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1DeactivatePdpContext010, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t serialId = 255;
    UniInfo uniInfo;
    uniInfo.serial = serialId;
    uniInfo.gsmIndex = 1;
    uniInfo.arg1 = 2;
    int32_t ret = g_rilInterface->DeactivatePdpContext(SLOTID_2, serialId, uniInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_DATA_DEACTIVATE_PDP_CONTEXT));
}
/**
 * @tc.number: SUB_Telephony_DriverSystem_V1DeactivatePdpContext_1300
 * @tc.name  : testV1DeactivatePdpContext011
 * @tc.desc  : Deactivates the PDP context. SLOTID_1 uniInfo.gsmIndex = 1 uniInfo.arg1 = 1.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1DeactivatePdpContext011, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t serialId = 1;
    UniInfo uniInfo;
    uniInfo.serial = serialId;
    uniInfo.gsmIndex = 1;
    uniInfo.arg1 = 1;
    int32_t ret = g_rilInterface->DeactivatePdpContext(SLOTID_1, serialId, uniInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_DATA_DEACTIVATE_PDP_CONTEXT));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1DeactivatePdpContext_1400
 * @tc.name  : testV1DeactivatePdpContext012
 * @tc.desc  : Deactivates the PDP context. SLOTID_1 uniInfo.gsmIndex = 0 uniInfo.arg1 = 0.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1DeactivatePdpContext012, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t serialId = 1;
    UniInfo uniInfo;
    uniInfo.serial = serialId;
    uniInfo.gsmIndex = 0;
    uniInfo.arg1 = 0;
    int32_t ret = g_rilInterface->DeactivatePdpContext(SLOTID_1, serialId, uniInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_DATA_DEACTIVATE_PDP_CONTEXT));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1DeactivatePdpContext_1500
 * @tc.name  : testV1DeactivatePdpContext013
 * @tc.desc  : Deactivates the PDP context. SLOTID_1 uniInfo.gsmIndex = 255 uniInfo.arg1 = 255.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1DeactivatePdpContext013, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t serialId = 1;
    UniInfo uniInfo;
    uniInfo.serial = serialId;
    uniInfo.gsmIndex = 255;
    uniInfo.arg1 = 255;
    int32_t ret = g_rilInterface->DeactivatePdpContext(SLOTID_1, serialId, uniInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_DATA_DEACTIVATE_PDP_CONTEXT));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1DeactivatePdpContext_1600
 * @tc.name  : testV1DeactivatePdpContext014
 * @tc.desc  : Deactivates the PDP context. SLOTID_1 uniInfo.gsmIndex = 0 uniInfo.arg1 = 255.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1DeactivatePdpContext014, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t serialId = 1;
    UniInfo uniInfo;
    uniInfo.serial = serialId;
    uniInfo.gsmIndex = 0;
    uniInfo.arg1 = 255;
    int32_t ret = g_rilInterface->DeactivatePdpContext(SLOTID_1, serialId, uniInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_DATA_DEACTIVATE_PDP_CONTEXT));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1DeactivatePdpContext_1700
 * @tc.name  : testV1DeactivatePdpContext015
 * @tc.desc  : Deactivates the PDP context. SLOTID_1 uniInfo.gsmIndex = 255 uniInfo.arg1 = 0.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1DeactivatePdpContext015, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t serialId = 1;
    UniInfo uniInfo;
    uniInfo.serial = serialId;
    uniInfo.gsmIndex = 255;
    uniInfo.arg1 = 0;
    int32_t ret = g_rilInterface->DeactivatePdpContext(SLOTID_1, serialId, uniInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_DATA_DEACTIVATE_PDP_CONTEXT));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1DeactivatePdpContext_1800
 * @tc.name  : testV1DeactivatePdpContext016
 * @tc.desc  : Deactivates the PDP context. SLOTID_2 uniInfo.gsmIndex = 1 uniInfo.arg1 = 1.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1DeactivatePdpContext016, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t serialId = 1;
    UniInfo uniInfo;
    uniInfo.serial = serialId;
    uniInfo.gsmIndex = 1;
    uniInfo.arg1 = 1;
    int32_t ret = g_rilInterface->DeactivatePdpContext(SLOTID_2, serialId, uniInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_DATA_DEACTIVATE_PDP_CONTEXT));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1DeactivatePdpContext_1900
 * @tc.name  : testV1DeactivatePdpContext017
 * @tc.desc  : Deactivates the PDP context. SLOTID_2 uniInfo.gsmIndex = 0 uniInfo.arg1 = 0.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1DeactivatePdpContext017, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t serialId = 1;
    UniInfo uniInfo;
    uniInfo.serial = serialId;
    uniInfo.gsmIndex = 0;
    uniInfo.arg1 = 0;
    int32_t ret = g_rilInterface->DeactivatePdpContext(SLOTID_2, serialId, uniInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_DATA_DEACTIVATE_PDP_CONTEXT));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1DeactivatePdpContext_2000
 * @tc.name  : testV1DeactivatePdpContext018
 * @tc.desc  : Deactivates the PDP context. SLOTID_2 uniInfo.gsmIndex = 255 uniInfo.arg1 = 255.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1DeactivatePdpContext018, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t serialId = 1;
    UniInfo uniInfo;
    uniInfo.serial = serialId;
    uniInfo.gsmIndex = 255;
    uniInfo.arg1 = 255;
    int32_t ret = g_rilInterface->DeactivatePdpContext(SLOTID_2, serialId, uniInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_DATA_DEACTIVATE_PDP_CONTEXT));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1DeactivatePdpContext_2100
 * @tc.name  : testV1DeactivatePdpContext019
 * @tc.desc  : Deactivates the PDP context. SLOTID_2 uniInfo.gsmIndex = 0 uniInfo.arg1 = 255.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1DeactivatePdpContext019, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t serialId = 1;
    UniInfo uniInfo;
    uniInfo.serial = serialId;
    uniInfo.gsmIndex = 0;
    uniInfo.arg1 = 255;
    int32_t ret = g_rilInterface->DeactivatePdpContext(SLOTID_2, serialId, uniInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_DATA_DEACTIVATE_PDP_CONTEXT));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1DeactivatePdpContext_2200
 * @tc.name  : testV1DeactivatePdpContext020
 * @tc.desc  : Deactivates the PDP context. SLOTID_2 uniInfo.gsmIndex = 255 uniInfo.arg1 = 0.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1DeactivatePdpContext020, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t serialId = 1;
    UniInfo uniInfo;
    uniInfo.serial = serialId;
    uniInfo.gsmIndex = 255;
    uniInfo.arg1 = 0;
    int32_t ret = g_rilInterface->DeactivatePdpContext(SLOTID_2, serialId, uniInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_DATA_DEACTIVATE_PDP_CONTEXT));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1DeactivatePdpContext_2300
 * @tc.name  : testV1DeactivatePdpContext021
 * @tc.desc  : Deactivates the PDP context. SLOTID_1 uniInfo.gsmIndex = 1 uniInfo.arg1 = 2.Cycle 10 times.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1DeactivatePdpContext021, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t serialId = GetSerialId();
    int32_t ret;
    UniInfo uniInfo;
    uniInfo.serial = serialId;
    uniInfo.gsmIndex = 1;
    uniInfo.arg1 = 2;
    for (int i = 0; i < 10; i++) {
        ret = g_rilInterface->DeactivatePdpContext(SLOTID_1, serialId, uniInfo);
        WaitFor(WAIT_TIME_SECOND);
        EXPECT_EQ(SUCCESS, ret);
    }
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_DATA_DEACTIVATE_PDP_CONTEXT));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1DeactivatePdpContext_2400
 * @tc.name  : testV1DeactivatePdpContext022
 * @tc.desc  : Deactivates the PDP context. SLOTID_2 uniInfo.gsmIndex = 1 uniInfo.arg1 = 2.Cycle 10 times.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1DeactivatePdpContext022, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t serialId = GetSerialId();
    int32_t ret;
    UniInfo uniInfo;
    uniInfo.serial = serialId;
    uniInfo.gsmIndex = 1;
    uniInfo.arg1 = 2;
    for (int i = 0; i < 10; i++) {
        ret = g_rilInterface->DeactivatePdpContext(SLOTID_2, serialId, uniInfo);
        WaitFor(WAIT_TIME_SECOND);
        EXPECT_EQ(SUCCESS, ret);
    }
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_DATA_DEACTIVATE_PDP_CONTEXT));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetPdpContextList_0300
 * @tc.name  : testV1GetPdpContextList001
 * @tc.desc  : Obtains the PDP context list. SLOTID_1 serialId = 0.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetPdpContextList001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t serialId = 0;
    UniInfo uniInfo;
    uniInfo.serial = serialId;
    int32_t ret = g_rilInterface->GetPdpContextList(SLOTID_1, serialId, uniInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_DATA_GET_PDP_CONTEXT_LIST));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetPdpContextList_0400
 * @tc.name  : testV1GetPdpContextList002
 * @tc.desc  : Obtains the PDP context list. SLOTID_1 serialId = 1.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetPdpContextList002, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t serialId = 1;
    UniInfo uniInfo;
    uniInfo.serial = serialId;
    int32_t ret = g_rilInterface->GetPdpContextList(SLOTID_1, serialId, uniInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_DATA_GET_PDP_CONTEXT_LIST));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetPdpContextList_0500
 * @tc.name  : testV1GetPdpContextList003
 * @tc.desc  : Obtains the PDP context list. SLOTID_1 serialId = 100.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetPdpContextList003, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t serialId = 100;
    UniInfo uniInfo;
    uniInfo.serial = serialId;
    int32_t ret = g_rilInterface->GetPdpContextList(SLOTID_1, serialId, uniInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_DATA_GET_PDP_CONTEXT_LIST));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetPdpContextList_0600
 * @tc.name  : testV1GetPdpContextList004
 * @tc.desc  : Obtains the PDP context list. SLOTID_1 serialId = 1000000000.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetPdpContextList004, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t serialId = 1000000000;
    UniInfo uniInfo;
    uniInfo.serial = serialId;
    int32_t ret = g_rilInterface->GetPdpContextList(SLOTID_1, serialId, uniInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_DATA_GET_PDP_CONTEXT_LIST));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetPdpContextList_0700
 * @tc.name  : testV1GetPdpContextList005
 * @tc.desc  : Obtains the PDP context list. SLOTID_1 serialId = 255.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetPdpContextList005, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t serialId = 255;
    UniInfo uniInfo;
    uniInfo.serial = serialId;
    int32_t ret = g_rilInterface->GetPdpContextList(SLOTID_1, serialId, uniInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_DATA_GET_PDP_CONTEXT_LIST));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetPdpContextList_0800
 * @tc.name  : testV1GetPdpContextList006
 * @tc.desc  : Obtains the PDP context list. SLOTID_2 serialId = 0.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetPdpContextList006, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t serialId = 0;
    UniInfo uniInfo;
    uniInfo.serial = serialId;
    int32_t ret = g_rilInterface->GetPdpContextList(SLOTID_2, serialId, uniInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_DATA_GET_PDP_CONTEXT_LIST));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetPdpContextList_0900
 * @tc.name  : testV1GetPdpContextList007
 * @tc.desc  : Obtains the PDP context list. SLOTID_2 serialId = 1.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetPdpContextList007, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t serialId = 1;
    UniInfo uniInfo;
    uniInfo.serial = serialId;
    int32_t ret = g_rilInterface->GetPdpContextList(SLOTID_2, serialId, uniInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_DATA_GET_PDP_CONTEXT_LIST));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetPdpContextList_1000
 * @tc.name  : testV1GetPdpContextList008
 * @tc.desc  : Obtains the PDP context list. SLOTID_2 serialId = 100.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetPdpContextList008, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t serialId = 100;
    UniInfo uniInfo;
    uniInfo.serial = serialId;
    int32_t ret = g_rilInterface->GetPdpContextList(SLOTID_2, serialId, uniInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_DATA_GET_PDP_CONTEXT_LIST));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetPdpContextList_1100
 * @tc.name  : testV1GetPdpContextList009
 * @tc.desc  : Obtains the PDP context list. SLOTID_2 serialId = 1000000000.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetPdpContextList009, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t serialId = 1000000000;
    UniInfo uniInfo;
    uniInfo.serial = serialId;
    int32_t ret = g_rilInterface->GetPdpContextList(SLOTID_2, serialId, uniInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_DATA_GET_PDP_CONTEXT_LIST));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetPdpContextList_1200
 * @tc.name  : testV1GetPdpContextList010
 * @tc.desc  : Obtains the PDP context list. SLOTID_2 serialId = 255.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetPdpContextList010, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t serialId = 255;
    UniInfo uniInfo;
    uniInfo.serial = serialId;
    int32_t ret = g_rilInterface->GetPdpContextList(SLOTID_2, serialId, uniInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_DATA_GET_PDP_CONTEXT_LIST));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetPdpContextList_1300
 * @tc.name  : testV1GetPdpContextList011
 * @tc.desc  : Obtains the PDP context list. SLOTID_2 serialId = 1000000000.Cycle 10 times
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetPdpContextList011, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t serialId = 1000000000;
    int32_t ret;
    UniInfo uniInfo;
    uniInfo.serial = serialId;
    for (int i = 0; i < 10; i++) {
        ret = g_rilInterface->GetPdpContextList(SLOTID_2, serialId, uniInfo);
        WaitFor(WAIT_TIME_SECOND);
        EXPECT_EQ(SUCCESS, ret);
    }
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_DATA_GET_PDP_CONTEXT_LIST));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetPdpContextList_1400
 * @tc.name  : testV1GetPdpContextList012
 * @tc.desc  : Obtains the PDP context list. SLOTID_2 serialId = 255.Cycle 10 times
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetPdpContextList012, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t ret;
    int32_t serialId = 255;
    UniInfo uniInfo;
    uniInfo.serial = serialId;
    for (int i = 0; i < 10; i++) {
        ret = g_rilInterface->GetPdpContextList(SLOTID_2, serialId, uniInfo);
        WaitFor(WAIT_TIME_SECOND);
        EXPECT_EQ(SUCCESS, ret);
    }
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_DATA_GET_PDP_CONTEXT_LIST));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetInitApnInfo_0300
 * @tc.name  : testV1SetInitApnInfo001
 * @tc.desc  : slotId Card slot ID. SLOTID_1 serialId = 0.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetInitApnInfo001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t serialId = 0;
    DataProfileDataInfo dataProfileInfo;
    dataProfileInfo.profileId = 0;
    dataProfileInfo.password = "user1";
    dataProfileInfo.authenticationType = 0;
    dataProfileInfo.userName = "user1";
    dataProfileInfo.apn = "cmnet";
    dataProfileInfo.protocol = "IPV4V6";
    dataProfileInfo.roamingProtocol = "IPV4V6";
    dataProfileInfo.serial = serialId;
    int32_t ret = g_rilInterface->SetInitApnInfo(SLOTID_1, serialId, dataProfileInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_DATA_SET_INIT_APN_INFO));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetInitApnInfo_0400
 * @tc.name  : testV1SetInitApnInfo002
 * @tc.desc  : slotId Card slot ID. SLOTID_1 serialId = 1.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetInitApnInfo002, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t serialId = 1;
    DataProfileDataInfo dataProfileInfo;
    dataProfileInfo.profileId = 0;
    dataProfileInfo.password = "user1";
    dataProfileInfo.authenticationType = 0;
    dataProfileInfo.userName = "user1";
    dataProfileInfo.apn = "cmnet";
    dataProfileInfo.protocol = "IPV4V6";
    dataProfileInfo.roamingProtocol = "IPV4V6";
    dataProfileInfo.serial = serialId;
    int32_t ret = g_rilInterface->SetInitApnInfo(SLOTID_1, serialId, dataProfileInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_DATA_SET_INIT_APN_INFO));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetInitApnInfo_0500
 * @tc.name  : testV1SetInitApnInfo003
 * @tc.desc  : slotId Card slot ID. SLOTID_1 serialId = 1000000000.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetInitApnInfo003, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t serialId = 1000000000;
    DataProfileDataInfo dataProfileInfo;
    dataProfileInfo.profileId = 0;
    dataProfileInfo.password = "user1";
    dataProfileInfo.authenticationType = 0;
    dataProfileInfo.userName = "user1";
    dataProfileInfo.apn = "cmnet";
    dataProfileInfo.protocol = "IPV4V6";
    dataProfileInfo.roamingProtocol = "IPV4V6";
    dataProfileInfo.serial = serialId;
    int32_t ret = g_rilInterface->SetInitApnInfo(SLOTID_1, serialId, dataProfileInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_DATA_SET_INIT_APN_INFO));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetInitApnInfo_0600
 * @tc.name  : testV1SetInitApnInfo004
 * @tc.desc  : slotId Card slot ID. SLOTID_1 serialId = 100.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetInitApnInfo004, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t serialId = 100;
    DataProfileDataInfo dataProfileInfo;
    dataProfileInfo.profileId = 0;
    dataProfileInfo.password = "user1";
    dataProfileInfo.authenticationType = 0;
    dataProfileInfo.userName = "user1";
    dataProfileInfo.apn = "cmnet";
    dataProfileInfo.protocol = "IPV4V6";
    dataProfileInfo.roamingProtocol = "IPV4V6";
    dataProfileInfo.serial = serialId;
    int32_t ret = g_rilInterface->SetInitApnInfo(SLOTID_1, serialId, dataProfileInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_DATA_SET_INIT_APN_INFO));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetInitApnInfo_0700
 * @tc.name  : testV1SetInitApnInfo005
 * @tc.desc  : slotId Card slot ID. SLOTID_1 serialId = 255.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetInitApnInfo005, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t serialId = 255;
    DataProfileDataInfo dataProfileInfo;
    dataProfileInfo.profileId = 0;
    dataProfileInfo.password = "user1";
    dataProfileInfo.authenticationType = 0;
    dataProfileInfo.userName = "user1";
    dataProfileInfo.apn = "cmnet";
    dataProfileInfo.protocol = "IPV4V6";
    dataProfileInfo.roamingProtocol = "IPV4V6";
    dataProfileInfo.serial = serialId;
    int32_t ret = g_rilInterface->SetInitApnInfo(SLOTID_1, serialId, dataProfileInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_DATA_SET_INIT_APN_INFO));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetInitApnInfo_0800
 * @tc.name  : testV1SetInitApnInfo006
 * @tc.desc  : slotId Card slot ID. SLOTID_2 serialId = 0.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetInitApnInfo006, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t serialId = 0;
    DataProfileDataInfo dataProfileInfo;
    dataProfileInfo.profileId = 0;
    dataProfileInfo.password = "user1";
    dataProfileInfo.authenticationType = 0;
    dataProfileInfo.userName = "user1";
    dataProfileInfo.apn = "cmnet";
    dataProfileInfo.protocol = "IPV4V6";
    dataProfileInfo.roamingProtocol = "IPV4V6";
    dataProfileInfo.serial = serialId;
    int32_t ret = g_rilInterface->SetInitApnInfo(SLOTID_2, serialId, dataProfileInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_DATA_SET_INIT_APN_INFO));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetInitApnInfo_0900
 * @tc.name  : testV1SetInitApnInfo007
 * @tc.desc  : slotId Card slot ID. SLOTID_2 serialId = 1.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetInitApnInfo007, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t serialId = 1;
    DataProfileDataInfo dataProfileInfo;
    dataProfileInfo.profileId = 0;
    dataProfileInfo.password = "user1";
    dataProfileInfo.authenticationType = 0;
    dataProfileInfo.userName = "user1";
    dataProfileInfo.apn = "cmnet";
    dataProfileInfo.protocol = "IPV4V6";
    dataProfileInfo.roamingProtocol = "IPV4V6";
    dataProfileInfo.serial = serialId;
    int32_t ret = g_rilInterface->SetInitApnInfo(SLOTID_2, serialId, dataProfileInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_DATA_SET_INIT_APN_INFO));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetInitApnInfo_1000
 * @tc.name  : testV1SetInitApnInfo008
 * @tc.desc  : slotId Card slot ID. SLOTID_2 serialId = 1000000000.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetInitApnInfo008, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t serialId = 1000000000;
    DataProfileDataInfo dataProfileInfo;
    dataProfileInfo.profileId = 0;
    dataProfileInfo.password = "user1";
    dataProfileInfo.authenticationType = 0;
    dataProfileInfo.userName = "user1";
    dataProfileInfo.apn = "cmnet";
    dataProfileInfo.protocol = "IPV4V6";
    dataProfileInfo.roamingProtocol = "IPV4V6";
    dataProfileInfo.serial = serialId;
    int32_t ret = g_rilInterface->SetInitApnInfo(SLOTID_2, serialId, dataProfileInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_DATA_SET_INIT_APN_INFO));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetInitApnInfo_1100
 * @tc.name  : testV1SetInitApnInfo009
 * @tc.desc  : slotId Card slot ID. SLOTID_2 serialId = 100.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetInitApnInfo009, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t serialId = 100;
    DataProfileDataInfo dataProfileInfo;
    dataProfileInfo.profileId = 0;
    dataProfileInfo.password = "user1";
    dataProfileInfo.authenticationType = 0;
    dataProfileInfo.userName = "user1";
    dataProfileInfo.apn = "cmnet";
    dataProfileInfo.protocol = "IPV4V6";
    dataProfileInfo.roamingProtocol = "IPV4V6";
    dataProfileInfo.serial = serialId;
    int32_t ret = g_rilInterface->SetInitApnInfo(SLOTID_2, serialId, dataProfileInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_DATA_SET_INIT_APN_INFO));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetInitApnInfo_1200
 * @tc.name  : testV1SetInitApnInfo010
 * @tc.desc  : slotId Card slot ID. SLOTID_2 serialId = 255.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetInitApnInfo010, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t serialId = 255;
    DataProfileDataInfo dataProfileInfo;
    dataProfileInfo.profileId = 0;
    dataProfileInfo.password = "user1";
    dataProfileInfo.authenticationType = 0;
    dataProfileInfo.userName = "user1";
    dataProfileInfo.apn = "cmnet";
    dataProfileInfo.protocol = "IPV4V6";
    dataProfileInfo.roamingProtocol = "IPV4V6";
    dataProfileInfo.serial = serialId;
    int32_t ret = g_rilInterface->SetInitApnInfo(SLOTID_2, serialId, dataProfileInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_DATA_SET_INIT_APN_INFO));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetInitApnInfo_1300
 * @tc.name  : testV1SetInitApnInfo011
 * @tc.desc  : slotId Card slot ID. SLOTID_2 serialId = 100.Cycle 20 times.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetInitApnInfo011, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t serialId = 100;
    int32_t ret;
    DataProfileDataInfo dataProfileInfo;
    dataProfileInfo.profileId = 0;
    dataProfileInfo.password = "user1";
    dataProfileInfo.authenticationType = 0;
    dataProfileInfo.userName = "user1";
    dataProfileInfo.apn = "cmnet";
    dataProfileInfo.protocol = "IPV4V6";
    dataProfileInfo.roamingProtocol = "IPV4V6";
    dataProfileInfo.serial = serialId;
    for (int i = 0; i < 20; i++) {
        ret = g_rilInterface->SetInitApnInfo(SLOTID_2, serialId, dataProfileInfo);
        WaitFor(WAIT_TIME_SECOND);
        EXPECT_EQ(SUCCESS, ret);
    }
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_DATA_SET_INIT_APN_INFO));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetInitApnInfo_1400
 * @tc.name  : testV1SetInitApnInfo012
 * @tc.desc  : slotId Card slot ID. SLOTID_2 serialId = 255.Cycle 20 times.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetInitApnInfo012, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t serialId = 255;
    int32_t ret;
    DataProfileDataInfo dataProfileInfo;
    dataProfileInfo.profileId = 0;
    dataProfileInfo.password = "user1";
    dataProfileInfo.authenticationType = 0;
    dataProfileInfo.userName = "user1";
    dataProfileInfo.apn = "cmnet";
    dataProfileInfo.protocol = "IPV4V6";
    dataProfileInfo.roamingProtocol = "IPV4V6";
    dataProfileInfo.serial = serialId;
    for (int i = 0; i < 20; i++) {
        ret = g_rilInterface->SetInitApnInfo(SLOTID_2, serialId, dataProfileInfo);
        WaitFor(WAIT_TIME_SECOND);
        EXPECT_EQ(SUCCESS, ret);
    }
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_DATA_SET_INIT_APN_INFO));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SendDataSleepMode_0300
 * @tc.name  : testV1SendDataSleepMode001
 * @tc.desc  : Sends the data service sleep mode. SLOTID_1 serialId = 0.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendDataSleepMode001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t serialId = 0;
    DataSleepInfo dataSleepInfo;
    dataSleepInfo.sleepEnable = 1;
    int32_t ret = g_rilInterface->SendDataSleepMode(SLOTID_1, serialId, dataSleepInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_GT(ret, -1);
    GetBoolResult(HdiId::HREQ_DATA_SEND_DATA_SLEEP_MODE);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SendDataSleepMode_0400
 * @tc.name  : testV1SendDataSleepMode002
 * @tc.desc  : Sends the data service sleep mode. SLOTID_1 serialId = 1.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendDataSleepMode002, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t serialId = 1;
    DataSleepInfo dataSleepInfo;
    dataSleepInfo.sleepEnable = 1;
    int32_t ret = g_rilInterface->SendDataSleepMode(SLOTID_1, serialId, dataSleepInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_GT(ret, -1);
    GetBoolResult(HdiId::HREQ_DATA_SEND_DATA_SLEEP_MODE);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SendDataSleepMode_0500
 * @tc.name  : testV1SendDataSleepMode003
 * @tc.desc  : Sends the data service sleep mode. SLOTID_1 serialId = 255.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendDataSleepMode003, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t serialId = 255;
    DataSleepInfo dataSleepInfo;
    dataSleepInfo.sleepEnable = 1;
    int32_t ret = g_rilInterface->SendDataSleepMode(SLOTID_1, serialId, dataSleepInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_GT(ret, -1);
    GetBoolResult(HdiId::HREQ_DATA_SEND_DATA_SLEEP_MODE);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SendDataSleepMode_0600
 * @tc.name  : testV1SendDataSleepMode004
 * @tc.desc  : Sends the data service sleep mode. SLOTID_1 serialId = 10000.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendDataSleepMode004, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t serialId = 10000;
    DataSleepInfo dataSleepInfo;
    dataSleepInfo.sleepEnable = 1;
    int32_t ret = g_rilInterface->SendDataSleepMode(SLOTID_1, serialId, dataSleepInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_GT(ret, -1);
    GetBoolResult(HdiId::HREQ_DATA_SEND_DATA_SLEEP_MODE);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SendDataSleepMode_0700
 * @tc.name  : testV1SendDataSleepMode005
 * @tc.desc  : Sends the data service sleep mode. SLOTID_1 serialId = 1000000000.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendDataSleepMode005, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t serialId = 1000000000;
    DataSleepInfo dataSleepInfo;
    dataSleepInfo.sleepEnable = 1;
    int32_t ret = g_rilInterface->SendDataSleepMode(SLOTID_1, serialId, dataSleepInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_GT(ret, -1);
    GetBoolResult(HdiId::HREQ_DATA_SEND_DATA_SLEEP_MODE);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SendDataSleepMode_0800
 * @tc.name  : testV1SendDataSleepMode006
 * @tc.desc  : Sends the data service sleep mode. SLOTID_2 serialId = 0.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendDataSleepMode006, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t serialId = 0;
    DataSleepInfo dataSleepInfo;
    dataSleepInfo.sleepEnable = 1;
    int32_t ret = g_rilInterface->SendDataSleepMode(SLOTID_2, serialId, dataSleepInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_GT(ret, -1);
    GetBoolResult(HdiId::HREQ_DATA_SEND_DATA_SLEEP_MODE);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SendDataSleepMode_0900
 * @tc.name  : testV1SendDataSleepMode007
 * @tc.desc  : Sends the data service sleep mode. SLOTID_2 serialId = 1.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendDataSleepMode007, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t serialId = 1;
    DataSleepInfo dataSleepInfo;
    dataSleepInfo.sleepEnable = 1;
    int32_t ret = g_rilInterface->SendDataSleepMode(SLOTID_2, serialId, dataSleepInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_GT(ret, -1);
    GetBoolResult(HdiId::HREQ_DATA_SEND_DATA_SLEEP_MODE);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SendDataSleepMode_1000
 * @tc.name  : testV1SendDataSleepMode008
 * @tc.desc  : Sends the data service sleep mode. SLOTID_2 serialId = 255.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendDataSleepMode008, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t serialId = 255;
    DataSleepInfo dataSleepInfo;
    dataSleepInfo.sleepEnable = 1;
    int32_t ret = g_rilInterface->SendDataSleepMode(SLOTID_2, serialId, dataSleepInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_GT(ret, -1);
    GetBoolResult(HdiId::HREQ_DATA_SEND_DATA_SLEEP_MODE);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SendDataSleepMode_1100
 * @tc.name  : testV1SendDataSleepMode009
 * @tc.desc  : Sends the data service sleep mode. SLOTID_2 serialId = 10000.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendDataSleepMode009, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t serialId = 10000;
    DataSleepInfo dataSleepInfo;
    dataSleepInfo.sleepEnable = 1;
    int32_t ret = g_rilInterface->SendDataSleepMode(SLOTID_2, serialId, dataSleepInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_GT(ret, -1);
    GetBoolResult(HdiId::HREQ_DATA_SEND_DATA_SLEEP_MODE);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SendDataSleepMode_1200
 * @tc.name  : testV1SendDataSleepMode010
 * @tc.desc  : Sends the data service sleep mode. SLOTID_2 serialId = 1000000000.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendDataSleepMode010, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t serialId = 1000000000;
    DataSleepInfo dataSleepInfo;
    dataSleepInfo.sleepEnable = 1;
    int32_t ret = g_rilInterface->SendDataSleepMode(SLOTID_2, serialId, dataSleepInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_GT(ret, -1);
    GetBoolResult(HdiId::HREQ_DATA_SEND_DATA_SLEEP_MODE);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SendDataSleepMode_1300
 * @tc.name  : testV1SendDataSleepMode011
 * @tc.desc  : Sends the data service sleep mode. SLOTID_1 dataSleepInfo.sleepEnable = 0.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendDataSleepMode011, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t serialId = GetSerialId();
    DataSleepInfo dataSleepInfo;
    dataSleepInfo.sleepEnable = 0;
    int32_t ret = g_rilInterface->SendDataSleepMode(SLOTID_1, serialId, dataSleepInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_GT(ret, -1);
    GetBoolResult(HdiId::HREQ_DATA_SEND_DATA_SLEEP_MODE);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SendDataSleepMode_1400
 * @tc.name  : testV1SendDataSleepMode012
 * @tc.desc  : Sends the data service sleep mode. SLOTID_1 dataSleepInfo.sleepEnable = 100.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendDataSleepMode012, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t serialId = GetSerialId();
    DataSleepInfo dataSleepInfo;
    dataSleepInfo.sleepEnable = 100;
    int32_t ret = g_rilInterface->SendDataSleepMode(SLOTID_1, serialId, dataSleepInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_GT(ret, -1);
    GetBoolResult(HdiId::HREQ_DATA_SEND_DATA_SLEEP_MODE);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SendDataSleepMode_1500
 * @tc.name  : testV1SendDataSleepMode013
 * @tc.desc  : Sends the data service sleep mode. SLOTID_1 dataSleepInfo.sleepEnable = 1000.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendDataSleepMode013, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t serialId = GetSerialId();
    DataSleepInfo dataSleepInfo;
    dataSleepInfo.sleepEnable = 1000;
    int32_t ret = g_rilInterface->SendDataSleepMode(SLOTID_1, serialId, dataSleepInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_GT(ret, -1);
    GetBoolResult(HdiId::HREQ_DATA_SEND_DATA_SLEEP_MODE);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SendDataSleepMode_1600
 * @tc.name  : testV1SendDataSleepMode014
 * @tc.desc  : Sends the data service sleep mode. SLOTID_1 dataSleepInfo.sleepEnable = 10000.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendDataSleepMode014, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t serialId = GetSerialId();
    DataSleepInfo dataSleepInfo;
    dataSleepInfo.sleepEnable = 10000;
    int32_t ret = g_rilInterface->SendDataSleepMode(SLOTID_1, serialId, dataSleepInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_GT(ret, -1);
    GetBoolResult(HdiId::HREQ_DATA_SEND_DATA_SLEEP_MODE);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SendDataSleepMode_1700
 * @tc.name  : testV1SendDataSleepMode015
 * @tc.desc  : Sends the data service sleep mode. SLOTID_1 dataSleepInfo.sleepEnable = 32767.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendDataSleepMode015, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t serialId = GetSerialId();
    DataSleepInfo dataSleepInfo;
    dataSleepInfo.sleepEnable = 32767;
    int32_t ret = g_rilInterface->SendDataSleepMode(SLOTID_1, serialId, dataSleepInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_GT(ret, -1);
    GetBoolResult(HdiId::HREQ_DATA_SEND_DATA_SLEEP_MODE);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SendDataSleepMode_1800
 * @tc.name  : testV1SendDataSleepMode016
 * @tc.desc  : Sends the data service sleep mode. SLOTID_2 dataSleepInfo.sleepEnable = 0.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendDataSleepMode016, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t serialId = GetSerialId();
    DataSleepInfo dataSleepInfo;
    dataSleepInfo.sleepEnable = 0;
    int32_t ret = g_rilInterface->SendDataSleepMode(SLOTID_2, serialId, dataSleepInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_GT(ret, -1);
    GetBoolResult(HdiId::HREQ_DATA_SEND_DATA_SLEEP_MODE);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SendDataSleepMode_1900
 * @tc.name  : testV1SendDataSleepMode017
 * @tc.desc  : Sends the data service sleep mode. SLOTID_2 dataSleepInfo.sleepEnable = 100.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendDataSleepMode017, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t serialId = GetSerialId();
    DataSleepInfo dataSleepInfo;
    dataSleepInfo.sleepEnable = 100;
    int32_t ret = g_rilInterface->SendDataSleepMode(SLOTID_2, serialId, dataSleepInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_GT(ret, -1);
    GetBoolResult(HdiId::HREQ_DATA_SEND_DATA_SLEEP_MODE);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SendDataSleepMode_2000
 * @tc.name  : testV1SendDataSleepMode018
 * @tc.desc  : Sends the data service sleep mode. SLOTID_2 dataSleepInfo.sleepEnable = 1000.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendDataSleepMode018, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t serialId = GetSerialId();
    DataSleepInfo dataSleepInfo;
    dataSleepInfo.sleepEnable = 1000;
    int32_t ret = g_rilInterface->SendDataSleepMode(SLOTID_2, serialId, dataSleepInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_GT(ret, -1);
    GetBoolResult(HdiId::HREQ_DATA_SEND_DATA_SLEEP_MODE);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SendDataSleepMode_2100
 * @tc.name  : testV1SendDataSleepMode019
 * @tc.desc  : Sends the data service sleep mode. SLOTID_2 dataSleepInfo.sleepEnable = 10000.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendDataSleepMode019, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t serialId = GetSerialId();
    DataSleepInfo dataSleepInfo;
    dataSleepInfo.sleepEnable = 10000;
    int32_t ret = g_rilInterface->SendDataSleepMode(SLOTID_2, serialId, dataSleepInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_GT(ret, -1);
    GetBoolResult(HdiId::HREQ_DATA_SEND_DATA_SLEEP_MODE);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SendDataSleepMode_2200
 * @tc.name  : testV1SendDataSleepMode020
 * @tc.desc  : Sends the data service sleep mode. SLOTID_2 dataSleepInfo.sleepEnable = 32767.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendDataSleepMode020, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t serialId = GetSerialId();
    DataSleepInfo dataSleepInfo;
    dataSleepInfo.sleepEnable = 32767;
    int32_t ret = g_rilInterface->SendDataSleepMode(SLOTID_2, serialId, dataSleepInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_GT(ret, -1);
    GetBoolResult(HdiId::HREQ_DATA_SEND_DATA_SLEEP_MODE);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SendDataPerformanceMode_0300
 * @tc.name  : testV1SendDataPerformanceMode001
 * @tc.desc  : Sends the data service performance mode. SLOTID_1 serialId = 0.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendDataPerformanceMode001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t serialId = 0;
    DataPerformanceInfo dataPerformanceInfo;
    dataPerformanceInfo.performanceEnable = 0;
    dataPerformanceInfo.enforce = 1;
    int32_t ret = g_rilInterface->SendDataPerformanceMode(SLOTID_1, serialId, dataPerformanceInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_GT(ret, -1);
    GetBoolResult(HdiId::HREQ_DATA_SEND_DATA_PERFORMANCE_MODE);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SendDataPerformanceMode_0400
 * @tc.name  : testV1SendDataPerformanceMode002
 * @tc.desc  : Sends the data service performance mode. SLOTID_1 serialId = 1.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendDataPerformanceMode002, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t serialId = 1;
    DataPerformanceInfo dataPerformanceInfo;
    dataPerformanceInfo.performanceEnable = 0;
    dataPerformanceInfo.enforce = 1;
    int32_t ret = g_rilInterface->SendDataPerformanceMode(SLOTID_1, serialId, dataPerformanceInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_GT(ret, -1);
    GetBoolResult(HdiId::HREQ_DATA_SEND_DATA_PERFORMANCE_MODE);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SendDataPerformanceMode_0500
 * @tc.name  : testV1SendDataPerformanceMode003
 * @tc.desc  : Sends the data service performance mode. SLOTID_1 serialId = 255.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendDataPerformanceMode003, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t serialId = 255;
    DataPerformanceInfo dataPerformanceInfo;
    dataPerformanceInfo.performanceEnable = 0;
    dataPerformanceInfo.enforce = 1;
    int32_t ret = g_rilInterface->SendDataPerformanceMode(SLOTID_1, serialId, dataPerformanceInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_GT(ret, -1);
    GetBoolResult(HdiId::HREQ_DATA_SEND_DATA_PERFORMANCE_MODE);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SendDataPerformanceMode_0600
 * @tc.name  : testV1SendDataPerformanceMode004
 * @tc.desc  : Sends the data service performance mode. SLOTID_1 serialId = 10000.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendDataPerformanceMode004, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t serialId = 10000;
    DataPerformanceInfo dataPerformanceInfo;
    dataPerformanceInfo.performanceEnable = 0;
    dataPerformanceInfo.enforce = 1;
    int32_t ret = g_rilInterface->SendDataPerformanceMode(SLOTID_1, serialId, dataPerformanceInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_GT(ret, -1);
    GetBoolResult(HdiId::HREQ_DATA_SEND_DATA_PERFORMANCE_MODE);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SendDataPerformanceMode_0700
 * @tc.name  : testV1SendDataPerformanceMode005
 * @tc.desc  : Sends the data service performance mode. SLOTID_1 serialId = 1000000000.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendDataPerformanceMode005, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t serialId = 1000000000;
    DataPerformanceInfo dataPerformanceInfo;
    dataPerformanceInfo.performanceEnable = 0;
    dataPerformanceInfo.enforce = 1;
    int32_t ret = g_rilInterface->SendDataPerformanceMode(SLOTID_1, serialId, dataPerformanceInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_GT(ret, -1);
    GetBoolResult(HdiId::HREQ_DATA_SEND_DATA_PERFORMANCE_MODE);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SendDataPerformanceMode_0800
 * @tc.name  : testV1SendDataPerformanceMode006
 * @tc.desc  : Sends the data service performance mode. SLOTID_2 serialId = 0.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendDataPerformanceMode006, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t serialId = 0;
    DataPerformanceInfo dataPerformanceInfo;
    dataPerformanceInfo.performanceEnable = 0;
    dataPerformanceInfo.enforce = 1;
    int32_t ret = g_rilInterface->SendDataPerformanceMode(SLOTID_2, serialId, dataPerformanceInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_GT(ret, -1);
    GetBoolResult(HdiId::HREQ_DATA_SEND_DATA_PERFORMANCE_MODE);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SendDataPerformanceMode_0900
 * @tc.name  : testV1SendDataPerformanceMode007
 * @tc.desc  : Sends the data service performance mode. SLOTID_2 serialId = 1.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendDataPerformanceMode007, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t serialId = 1;
    DataPerformanceInfo dataPerformanceInfo;
    dataPerformanceInfo.performanceEnable = 0;
    dataPerformanceInfo.enforce = 1;
    int32_t ret = g_rilInterface->SendDataPerformanceMode(SLOTID_2, serialId, dataPerformanceInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_GT(ret, -1);
    GetBoolResult(HdiId::HREQ_DATA_SEND_DATA_PERFORMANCE_MODE);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SendDataPerformanceMode_1000
 * @tc.name  : testV1SendDataPerformanceMode008
 * @tc.desc  : Sends the data service performance mode. SLOTID_2 serialId = 255.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendDataPerformanceMode008, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t serialId = 255;
    DataPerformanceInfo dataPerformanceInfo;
    dataPerformanceInfo.performanceEnable = 0;
    dataPerformanceInfo.enforce = 1;
    int32_t ret = g_rilInterface->SendDataPerformanceMode(SLOTID_2, serialId, dataPerformanceInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_GT(ret, -1);
    GetBoolResult(HdiId::HREQ_DATA_SEND_DATA_PERFORMANCE_MODE);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SendDataPerformanceMode_1100
 * @tc.name  : testV1SendDataPerformanceMode009
 * @tc.desc  : Sends the data service performance mode. SLOTID_2 serialId = 10000.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendDataPerformanceMode009, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t serialId = 10000;
    DataPerformanceInfo dataPerformanceInfo;
    dataPerformanceInfo.performanceEnable = 0;
    dataPerformanceInfo.enforce = 1;
    int32_t ret = g_rilInterface->SendDataPerformanceMode(SLOTID_2, serialId, dataPerformanceInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_GT(ret, -1);
    GetBoolResult(HdiId::HREQ_DATA_SEND_DATA_PERFORMANCE_MODE);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SendDataPerformanceMode_1200
 * @tc.name  : testV1SendDataPerformanceMode010
 * @tc.desc  : Sends the data service performance mode. SLOTID_2 serialId = 1000000000.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendDataPerformanceMode010, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t serialId = 1000000000;
    DataPerformanceInfo dataPerformanceInfo;
    dataPerformanceInfo.performanceEnable = 0;
    dataPerformanceInfo.enforce = 1;
    int32_t ret = g_rilInterface->SendDataPerformanceMode(SLOTID_2, serialId, dataPerformanceInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_GT(ret, -1);
    GetBoolResult(HdiId::HREQ_DATA_SEND_DATA_PERFORMANCE_MODE);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SendDataPerformanceMode_1300
 * @tc.name  : testV1SendDataPerformanceMode011
 * @tc.desc  : Sends the data service performance mode. SLOTID_1 dataPerformanceInfo.performanceEnable = 0.
 * dataPerformanceInfo.enforce = 0.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendDataPerformanceMode011, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t serialId = GetSerialId();
    DataPerformanceInfo dataPerformanceInfo;
    dataPerformanceInfo.performanceEnable = 0;
    dataPerformanceInfo.enforce = 0;
    int32_t ret = g_rilInterface->SendDataPerformanceMode(SLOTID_1, serialId, dataPerformanceInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_GT(ret, -1);
    GetBoolResult(HdiId::HREQ_DATA_SEND_DATA_PERFORMANCE_MODE);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SendDataPerformanceMode_1400
 * @tc.name  : testV1SendDataPerformanceMode012
 * @tc.desc  : Sends the data service performance mode. SLOTID_1 dataPerformanceInfo.performanceEnable = 1.
 * dataPerformanceInfo.enforce = 0.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendDataPerformanceMode012, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t serialId = GetSerialId();
    DataPerformanceInfo dataPerformanceInfo;
    dataPerformanceInfo.performanceEnable = 1;
    dataPerformanceInfo.enforce = 0;
    int32_t ret = g_rilInterface->SendDataPerformanceMode(SLOTID_1, serialId, dataPerformanceInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_GT(ret, -1);
    GetBoolResult(HdiId::HREQ_DATA_SEND_DATA_PERFORMANCE_MODE);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SendDataPerformanceMode_1500
 * @tc.name  : testV1SendDataPerformanceMode013
 * @tc.desc  : Sends the data service performance mode. SLOTID_1 dataPerformanceInfo.performanceEnable = 1.
 * dataPerformanceInfo.enforce = 1.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendDataPerformanceMode013, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t serialId = GetSerialId();
    DataPerformanceInfo dataPerformanceInfo;
    dataPerformanceInfo.performanceEnable = 1;
    dataPerformanceInfo.enforce = 1;
    int32_t ret = g_rilInterface->SendDataPerformanceMode(SLOTID_1, serialId, dataPerformanceInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_GT(ret, -1);
    GetBoolResult(HdiId::HREQ_DATA_SEND_DATA_PERFORMANCE_MODE);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SendDataPerformanceMode_1600
 * @tc.name  : testV1SendDataPerformanceMode014
 * @tc.desc  : Sends the data service performance mode. SLOTID_1 dataPerformanceInfo.performanceEnable = 0.
 * dataPerformanceInfo.enforce = 100.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendDataPerformanceMode014, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t serialId = GetSerialId();
    DataPerformanceInfo dataPerformanceInfo;
    dataPerformanceInfo.performanceEnable = 0;
    dataPerformanceInfo.enforce = 100;
    int32_t ret = g_rilInterface->SendDataPerformanceMode(SLOTID_1, serialId, dataPerformanceInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_GT(ret, -1);
    GetBoolResult(HdiId::HREQ_DATA_SEND_DATA_PERFORMANCE_MODE);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SendDataPerformanceMode_1700
 * @tc.name  : testV1SendDataPerformanceMode015
 * @tc.desc  : Sends the data service performance mode. SLOTID_1 dataPerformanceInfo.performanceEnable = 0.
 * dataPerformanceInfo.enforce = 1000.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendDataPerformanceMode015, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t serialId = GetSerialId();
    DataPerformanceInfo dataPerformanceInfo;
    dataPerformanceInfo.performanceEnable = 0;
    dataPerformanceInfo.enforce = 1000;
    int32_t ret = g_rilInterface->SendDataPerformanceMode(SLOTID_1, serialId, dataPerformanceInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_GT(ret, -1);
    GetBoolResult(HdiId::HREQ_DATA_SEND_DATA_PERFORMANCE_MODE);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SendDataPerformanceMode_1800
 * @tc.name  : testV1SendDataPerformanceMode016
 * @tc.desc  : Sends the data service performance mode. SLOTID_1 dataPerformanceInfo.performanceEnable = 0.
 * dataPerformanceInfo.enforce = 10000.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendDataPerformanceMode016, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t serialId = GetSerialId();
    DataPerformanceInfo dataPerformanceInfo;
    dataPerformanceInfo.performanceEnable = 0;
    dataPerformanceInfo.enforce = 10000;
    int32_t ret = g_rilInterface->SendDataPerformanceMode(SLOTID_1, serialId, dataPerformanceInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_GT(ret, -1);
    GetBoolResult(HdiId::HREQ_DATA_SEND_DATA_PERFORMANCE_MODE);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SendDataPerformanceMode_1900
 * @tc.name  : testV1SendDataPerformanceMode017
 * @tc.desc  : Sends the data service performance mode. SLOTID_1 dataPerformanceInfo.performanceEnable = 0.
 * dataPerformanceInfo.enforce = 32767.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendDataPerformanceMode017, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t serialId = GetSerialId();
    DataPerformanceInfo dataPerformanceInfo;
    dataPerformanceInfo.performanceEnable = 0;
    dataPerformanceInfo.enforce = 32767;
    int32_t ret = g_rilInterface->SendDataPerformanceMode(SLOTID_1, serialId, dataPerformanceInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_GT(ret, -1);
    GetBoolResult(HdiId::HREQ_DATA_SEND_DATA_PERFORMANCE_MODE);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SendDataPerformanceMode_2000
 * @tc.name  : testV1SendDataPerformanceMode018
 * @tc.desc  : Sends the data service performance mode. SLOTID_1 dataPerformanceInfo.performanceEnable = 100.
 * dataPerformanceInfo.enforce = 1.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendDataPerformanceMode018, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t serialId = GetSerialId();
    DataPerformanceInfo dataPerformanceInfo;
    dataPerformanceInfo.performanceEnable = 100;
    dataPerformanceInfo.enforce = 1;
    int32_t ret = g_rilInterface->SendDataPerformanceMode(SLOTID_1, serialId, dataPerformanceInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_GT(ret, -1);
    GetBoolResult(HdiId::HREQ_DATA_SEND_DATA_PERFORMANCE_MODE);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SendDataPerformanceMode_2100
 * @tc.name  : testV1SendDataPerformanceMode019
 * @tc.desc  : Sends the data service performance mode. SLOTID_1 dataPerformanceInfo.performanceEnable = 1000.
 * dataPerformanceInfo.enforce = 1.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendDataPerformanceMode019, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t serialId = GetSerialId();
    DataPerformanceInfo dataPerformanceInfo;
    dataPerformanceInfo.performanceEnable = 1000;
    dataPerformanceInfo.enforce = 1;
    int32_t ret = g_rilInterface->SendDataPerformanceMode(SLOTID_1, serialId, dataPerformanceInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_GT(ret, -1);
    GetBoolResult(HdiId::HREQ_DATA_SEND_DATA_PERFORMANCE_MODE);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SendDataPerformanceMode_2200
 * @tc.name  : testV1SendDataPerformanceMode020
 * @tc.desc  : Sends the data service performance mode. SLOTID_1 dataPerformanceInfo.performanceEnable = 10000.
 * dataPerformanceInfo.enforce = 1.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendDataPerformanceMode020, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t serialId = GetSerialId();
    DataPerformanceInfo dataPerformanceInfo;
    dataPerformanceInfo.performanceEnable = 10000;
    dataPerformanceInfo.enforce = 1;
    int32_t ret = g_rilInterface->SendDataPerformanceMode(SLOTID_1, serialId, dataPerformanceInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_GT(ret, -1);
    GetBoolResult(HdiId::HREQ_DATA_SEND_DATA_PERFORMANCE_MODE);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SendDataPerformanceMode_2300
 * @tc.name  : testV1SendDataPerformanceMode021
 * @tc.desc  : Sends the data service performance mode. SLOTID_1 dataPerformanceInfo.performanceEnable = 32767.
 * dataPerformanceInfo.enforce = 1.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendDataPerformanceMode021, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t serialId = GetSerialId();
    DataPerformanceInfo dataPerformanceInfo;
    dataPerformanceInfo.performanceEnable = 32767;
    dataPerformanceInfo.enforce = 1;
    int32_t ret = g_rilInterface->SendDataPerformanceMode(SLOTID_1, serialId, dataPerformanceInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_GT(ret, -1);
    GetBoolResult(HdiId::HREQ_DATA_SEND_DATA_PERFORMANCE_MODE);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SendDataPerformanceMode_2400
 * @tc.name  : testV1SendDataPerformanceMode022
 * @tc.desc  : Sends the data service performance mode. SLOTID_2 dataPerformanceInfo.performanceEnable = 0.
 * dataPerformanceInfo.enforce = 0.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendDataPerformanceMode022, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t serialId = GetSerialId();
    DataPerformanceInfo dataPerformanceInfo;
    dataPerformanceInfo.performanceEnable = 0;
    dataPerformanceInfo.enforce = 0;
    int32_t ret = g_rilInterface->SendDataPerformanceMode(SLOTID_2, serialId, dataPerformanceInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_GT(ret, -1);
    GetBoolResult(HdiId::HREQ_DATA_SEND_DATA_PERFORMANCE_MODE);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SendDataPerformanceMode_2500
 * @tc.name  : testV1SendDataPerformanceMode023
 * @tc.desc  : Sends the data service performance mode. SLOTID_2 dataPerformanceInfo.performanceEnable = 1.
 * dataPerformanceInfo.enforce = 0.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendDataPerformanceMode023, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t serialId = GetSerialId();
    DataPerformanceInfo dataPerformanceInfo;
    dataPerformanceInfo.performanceEnable = 1;
    dataPerformanceInfo.enforce = 0;
    int32_t ret = g_rilInterface->SendDataPerformanceMode(SLOTID_2, serialId, dataPerformanceInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_GT(ret, -1);
    GetBoolResult(HdiId::HREQ_DATA_SEND_DATA_PERFORMANCE_MODE);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SendDataPerformanceMode_2600
 * @tc.name  : testV1SendDataPerformanceMode024
 * @tc.desc  : Sends the data service performance mode. SLOTID_2 dataPerformanceInfo.performanceEnable = 1.
 * dataPerformanceInfo.enforce = 1.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendDataPerformanceMode024, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t serialId = GetSerialId();
    DataPerformanceInfo dataPerformanceInfo;
    dataPerformanceInfo.performanceEnable = 1;
    dataPerformanceInfo.enforce = 1;
    int32_t ret = g_rilInterface->SendDataPerformanceMode(SLOTID_2, serialId, dataPerformanceInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_GT(ret, -1);
    GetBoolResult(HdiId::HREQ_DATA_SEND_DATA_PERFORMANCE_MODE);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SendDataPerformanceMode_2700
 * @tc.name  : testV1SendDataPerformanceMode025
 * @tc.desc  : Sends the data service performance mode. SLOTID_2 dataPerformanceInfo.performanceEnable = 0.
 * dataPerformanceInfo.enforce = 100.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendDataPerformanceMode025, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t serialId = GetSerialId();
    DataPerformanceInfo dataPerformanceInfo;
    dataPerformanceInfo.performanceEnable = 0;
    dataPerformanceInfo.enforce = 100;
    int32_t ret = g_rilInterface->SendDataPerformanceMode(SLOTID_2, serialId, dataPerformanceInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_GT(ret, -1);
    GetBoolResult(HdiId::HREQ_DATA_SEND_DATA_PERFORMANCE_MODE);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SendDataPerformanceMode_2800
 * @tc.name  : testV1SendDataPerformanceMode026
 * @tc.desc  : Sends the data service performance mode. SLOTID_2 dataPerformanceInfo.performanceEnable = 0.
 * dataPerformanceInfo.enforce = 1000.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendDataPerformanceMode026, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t serialId = GetSerialId();
    DataPerformanceInfo dataPerformanceInfo;
    dataPerformanceInfo.performanceEnable = 0;
    dataPerformanceInfo.enforce = 1000;
    int32_t ret = g_rilInterface->SendDataPerformanceMode(SLOTID_2, serialId, dataPerformanceInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_GT(ret, -1);
    GetBoolResult(HdiId::HREQ_DATA_SEND_DATA_PERFORMANCE_MODE);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SendDataPerformanceMode_2900
 * @tc.name  : testV1SendDataPerformanceMode027
 * @tc.desc  : Sends the data service performance mode. SLOTID_2 dataPerformanceInfo.performanceEnable = 0.
 * dataPerformanceInfo.enforce = 10000.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendDataPerformanceMode027, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t serialId = GetSerialId();
    DataPerformanceInfo dataPerformanceInfo;
    dataPerformanceInfo.performanceEnable = 0;
    dataPerformanceInfo.enforce = 10000;
    int32_t ret = g_rilInterface->SendDataPerformanceMode(SLOTID_2, serialId, dataPerformanceInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_GT(ret, -1);
    GetBoolResult(HdiId::HREQ_DATA_SEND_DATA_PERFORMANCE_MODE);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SendDataPerformanceMode_3000
 * @tc.name  : testV1SendDataPerformanceMode028
 * @tc.desc  : Sends the data service performance mode. SLOTID_2 dataPerformanceInfo.performanceEnable = 0.
 * dataPerformanceInfo.enforce = 32767.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendDataPerformanceMode028, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t serialId = GetSerialId();
    DataPerformanceInfo dataPerformanceInfo;
    dataPerformanceInfo.performanceEnable = 0;
    dataPerformanceInfo.enforce = 32767;
    int32_t ret = g_rilInterface->SendDataPerformanceMode(SLOTID_2, serialId, dataPerformanceInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_GT(ret, -1);
    GetBoolResult(HdiId::HREQ_DATA_SEND_DATA_PERFORMANCE_MODE);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SendDataPerformanceMode_3100
 * @tc.name  : testV1SendDataPerformanceMode029
 * @tc.desc  : Sends the data service performance mode. SLOTID_2 dataPerformanceInfo.performanceEnable = 100.
 * dataPerformanceInfo.enforce = 1.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendDataPerformanceMode029, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t serialId = GetSerialId();
    DataPerformanceInfo dataPerformanceInfo;
    dataPerformanceInfo.performanceEnable = 100;
    dataPerformanceInfo.enforce = 1;
    int32_t ret = g_rilInterface->SendDataPerformanceMode(SLOTID_2, serialId, dataPerformanceInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_GT(ret, -1);
    GetBoolResult(HdiId::HREQ_DATA_SEND_DATA_PERFORMANCE_MODE);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SendDataPerformanceMode_3200
 * @tc.name  : testV1SendDataPerformanceMode030
 * @tc.desc  : Sends the data service performance mode. SLOTID_2 dataPerformanceInfo.performanceEnable = 1000.
 * dataPerformanceInfo.enforce = 1.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendDataPerformanceMode030, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t serialId = GetSerialId();
    DataPerformanceInfo dataPerformanceInfo;
    dataPerformanceInfo.performanceEnable = 1000;
    dataPerformanceInfo.enforce = 1;
    int32_t ret = g_rilInterface->SendDataPerformanceMode(SLOTID_2, serialId, dataPerformanceInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_GT(ret, -1);
    GetBoolResult(HdiId::HREQ_DATA_SEND_DATA_PERFORMANCE_MODE);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SendDataPerformanceMode_3300
 * @tc.name  : testV1SendDataPerformanceMode031
 * @tc.desc  : Sends the data service performance mode. SLOTID_2 dataPerformanceInfo.performanceEnable = 10000.
 * dataPerformanceInfo.enforce = 1.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendDataPerformanceMode031, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t serialId = GetSerialId();
    DataPerformanceInfo dataPerformanceInfo;
    dataPerformanceInfo.performanceEnable = 10000;
    dataPerformanceInfo.enforce = 1;
    int32_t ret = g_rilInterface->SendDataPerformanceMode(SLOTID_2, serialId, dataPerformanceInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_GT(ret, -1);
    GetBoolResult(HdiId::HREQ_DATA_SEND_DATA_PERFORMANCE_MODE);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SendDataPerformanceMode_3400
 * @tc.name  : testV1SendDataPerformanceMode032
 * @tc.desc  : Sends the data service performance mode. SLOTID_2 dataPerformanceInfo.performanceEnable = 32767.
 * dataPerformanceInfo.enforce = 1.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendDataPerformanceMode032, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t serialId = GetSerialId();
    DataPerformanceInfo dataPerformanceInfo;
    dataPerformanceInfo.performanceEnable = 32767;
    dataPerformanceInfo.enforce = 1;
    int32_t ret = g_rilInterface->SendDataPerformanceMode(SLOTID_2, serialId, dataPerformanceInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_GT(ret, -1);
    GetBoolResult(HdiId::HREQ_DATA_SEND_DATA_PERFORMANCE_MODE);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetCdmaCBConfigResponse_0100
 * @tc.name  : testV1SetCdmaCBConfigResponse001
 * @tc.desc  : Call function SetCdmaCBConfigResponse.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetCdmaCBConfigResponse001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    g_setCdmaCBConfigResponseFlag = false;
    CdmaCBConfigInfoList broadcastInfoList = {};
    broadcastInfoList.serial = 1;
    broadcastInfoList.size = 1;
    int32_t ret = g_rilInterface->SetCdmaCBConfig(SLOTID_1, GetSerialId(), broadcastInfoList);
    EXPECT_EQ(SUCCESS, ret);

    EXPECT_EQ(g_setCdmaCBConfigResponseFlag, true);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetCdmaCBConfigResponse_0100
 * @tc.name  : testV1GetCdmaCBConfigResponse001
 * @tc.desc  : Call function GetCdmaCBConfigResponse
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetCdmaCBConfigResponse001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    g_getCdmaCBConfigResponseFlag = false;
    int32_t ret = g_rilInterface->GetCdmaCBConfig(SLOTID_1, 1);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(g_getCdmaCBConfigResponseFlag, true);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SendSmsMoreModeResponse_0100
 * @tc.name: testV1SendSmsMoreModeResponse001
 * @tc.desc: Call function SendSmsMoreModeResponse
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendSmsMoreModeResponse001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    g_sendSmsMoreModeResponseFlag = false;
    GsmSmsMessageInfo msg;
    msg.serial = 1;
    msg.state = 1;
    msg.smscPdu = TEST_STORAGE_PDU;
    msg.pdu = TEST_DCS_LIST;
    int32_t ret = g_rilInterface->SendSmsMoreMode(SLOTID_1, GetSerialId(), msg);
    EXPECT_EQ(SUCCESS, ret);

    EXPECT_EQ(g_sendSmsMoreModeResponseFlag, true);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SendSmsAckResponse_0100
 * @tc.name  : testV1SendSmsAckResponse001
 * @tc.desc  : Call function SendSmsAckResponse.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendSmsAckResponse001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    g_sendSmsAckResponseFlag = false;
    ModeData data;
    data.serial = 1;
    data.result = true;
    data.mode = 1000000001;
    data.pdu = "abc";
    int32_t ret = g_rilInterface->SendSmsAck(SLOTID_1, GetSerialId(), data);
    EXPECT_EQ(SUCCESS, ret);

    EXPECT_EQ(g_sendSmsAckResponseFlag, true);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetNrOptionModeResponse_0100
 * @tc.name  : testV1SetNrOptionModeResponse001
 * @tc.desc  : Call function SetNrOptionModeResponse.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetNrOptionModeResponse001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    g_setNrOptionModeResponseFlag = false;
    int32_t ret = g_rilInterface->SetNrOptionMode(SLOTID_1, GetSerialId(), 31);
    EXPECT_EQ(SUCCESS, ret);

    EXPECT_EQ(g_setNrOptionModeResponseFlag, true);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetNrOptionModeResponse_0100
 * @tc.name  : testV1GetNrOptionModeResponse001
 * @tc.desc  : Call function GetNrOptionModeResponse.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetNrOptionModeResponse001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    g_getNrOptionModeResponseFlag = false;
    int32_t ret = g_rilInterface->SetNrOptionMode(SLOTID_1, GetSerialId(), 31);
    EXPECT_EQ(SUCCESS, ret);

    int32_t ret1 = 0;
    ret1 = g_rilInterface->GetNrOptionMode(SLOTID_1, GetSerialId());
    EXPECT_EQ(SUCCESS, ret1);

    EXPECT_EQ(g_getNrOptionModeResponseFlag, true);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetNotificationFilter_0300
 * @tc.name  : testV1SetNotificationFilter001
 * @tc.desc  : test SetNotificationFilter indicates that the slot1 filter is disabled
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetNotificationFilter001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SetNotificationFilter(
        SLOTID_1, GetSerialId(), static_cast<int32_t>(NotificationFilter::NOTIFICATION_FILTER_NONE));
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_NETWORK_SET_NOTIFICATION_FILTER));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetNotificationFilter_0400
 * @tc.name  : testV1SetNotificationFilter002
 * @tc.desc  : test SetNotificationFilter indicates that the slot2 filter is disabled
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetNotificationFilter002, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t ret = g_rilInterface->SetNotificationFilter(
        SLOTID_2, GetSerialId(), static_cast<int32_t>(NotificationFilter::NOTIFICATION_FILTER_NONE));
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_NETWORK_SET_NOTIFICATION_FILTER));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetNotificationFilter_0500
 * @tc.name  : testV1SetNotificationFilter003
 * @tc.desc  : test SetNotificationFilter indicates that the slot1 signal strength
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetNotificationFilter003, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SetNotificationFilter(
        SLOTID_1, GetSerialId(), static_cast<int32_t>(NotificationFilter::NOTIFICATION_FILTER_SIGNAL_STRENGTH));
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_NETWORK_SET_NOTIFICATION_FILTER));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetNotificationFilter_0600
 * @tc.name  : testV1SetNotificationFilter004
 * @tc.desc  : test SetNotificationFilter indicates that the slot2 signal strength
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetNotificationFilter004, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t ret = g_rilInterface->SetNotificationFilter(
        SLOTID_2, GetSerialId(), static_cast<int32_t>(NotificationFilter::NOTIFICATION_FILTER_SIGNAL_STRENGTH));
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_NETWORK_SET_NOTIFICATION_FILTER));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetNotificationFilter_0700
 * @tc.name  : testV1SetNotificationFilter005
 * @tc.desc  : test SetNotificationFilter indicates that the slot1 network registration status
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetNotificationFilter005, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SetNotificationFilter(
        SLOTID_1, GetSerialId(), static_cast<int32_t>(NotificationFilter::NOTIFICATION_FILTER_NETWORK_STATE));
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_NETWORK_SET_NOTIFICATION_FILTER));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetNotificationFilter_0800
 * @tc.name  : testV1SetNotificationFilter006
 * @tc.desc  : test SetNotificationFilter indicates that the slot2 network registration status
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetNotificationFilter006, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t ret = g_rilInterface->SetNotificationFilter(
        SLOTID_2, GetSerialId(), static_cast<int32_t>(NotificationFilter::NOTIFICATION_FILTER_NETWORK_STATE));
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_NETWORK_SET_NOTIFICATION_FILTER));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetNotificationFilter_0900
 * @tc.name  : testV1SetNotificationFilter007
 * @tc.desc  : test SetNotificationFilter indicates that the slot1 data connection status
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetNotificationFilter007, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SetNotificationFilter(
        SLOTID_1, GetSerialId(), static_cast<int32_t>(NotificationFilter::NOTIFICATION_FILTER_DATA_CALL));
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_NETWORK_SET_NOTIFICATION_FILTER));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetNotificationFilter_1000
 * @tc.name  : testV1SetNotificationFilter008
 * @tc.desc  : test SetNotificationFilter indicates that the slot2 data connection status
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetNotificationFilter008, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t ret = g_rilInterface->SetNotificationFilter(
        SLOTID_2, GetSerialId(), static_cast<int32_t>(NotificationFilter::NOTIFICATION_FILTER_DATA_CALL));
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_NETWORK_SET_NOTIFICATION_FILTER));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetNotificationFilter_1100
 * @tc.name  : testV1SetNotificationFilter009
 * @tc.desc  : test SetNotificationFilter indicates that the slot1 link capacity
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetNotificationFilter009, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SetNotificationFilter(
        SLOTID_1, GetSerialId(), static_cast<int32_t>(NotificationFilter::NOTIFICATION_FILTER_LINK_CAPACITY));
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_NETWORK_SET_NOTIFICATION_FILTER));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetNotificationFilter_1200
 * @tc.name  : testV1SetNotificationFilter010
 * @tc.desc  : test SetNotificationFilter indicates that the slot2 link capacity
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetNotificationFilter010, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t ret = g_rilInterface->SetNotificationFilter(
        SLOTID_2, GetSerialId(), static_cast<int32_t>(NotificationFilter::NOTIFICATION_FILTER_LINK_CAPACITY));
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_NETWORK_SET_NOTIFICATION_FILTER));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetNotificationFilter_1300
 * @tc.name  : testV1SetNotificationFilter011
 * @tc.desc  : test SetNotificationFilter indicates that the slot1 physical channel configuration
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetNotificationFilter011, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SetNotificationFilter(
        SLOTID_1, GetSerialId(), static_cast<int32_t>(NotificationFilter::NOTIFICATION_FILTER_PHYSICAL_CHANNEL_CONFIG));
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_NETWORK_SET_NOTIFICATION_FILTER));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetNotificationFilter_1400
 * @tc.name  : testV1SetNotificationFilter012
 * @tc.desc  : test SetNotificationFilter indicates that the slot2 physical channel configuration
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetNotificationFilter012, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t ret = g_rilInterface->SetNotificationFilter(
        SLOTID_2, GetSerialId(), static_cast<int32_t>(NotificationFilter::NOTIFICATION_FILTER_PHYSICAL_CHANNEL_CONFIG));
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_NETWORK_SET_NOTIFICATION_FILTER));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetNotificationFilter_1500
 * @tc.name  : testV1SetNotificationFilter013
 * @tc.desc  : test SetNotificationFilter slot1 bit 1 and bit 2
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetNotificationFilter013, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SetNotificationFilter(SLOTID_1, GetSerialId(), 3);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_NETWORK_SET_NOTIFICATION_FILTER));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetNotificationFilter_1600
 * @tc.name  : testV1SetNotificationFilter014
 * @tc.desc  : test SetNotificationFilter slot 2 bit 1 and bit 2
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetNotificationFilter014, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t ret = g_rilInterface->SetNotificationFilter(SLOTID_2, GetSerialId(), 3);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_NETWORK_SET_NOTIFICATION_FILTER));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetNotificationFilter_1700
 * @tc.name  : testV1SetNotificationFilter015
 * @tc.desc  : test SetNotificationFilter slot1 bit 1 and bit 3
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetNotificationFilter015, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SetNotificationFilter(SLOTID_1, GetSerialId(), 5);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_NETWORK_SET_NOTIFICATION_FILTER));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetNotificationFilter_1800
 * @tc.name  : testV1SetNotificationFilter016
 * @tc.desc  : test SetNotificationFilter slot2 bit 1 and bit 3
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetNotificationFilter016, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t ret = g_rilInterface->SetNotificationFilter(SLOTID_2, GetSerialId(), 5);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_NETWORK_SET_NOTIFICATION_FILTER));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetNotificationFilter_1900
 * @tc.name  : testV1SetNotificationFilter017
 * @tc.desc  : test SetNotificationFilter slot1 bit 2 and bit 3
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetNotificationFilter017, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SetNotificationFilter(SLOTID_1, GetSerialId(), 6);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_NETWORK_SET_NOTIFICATION_FILTER));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetNotificationFilter_2000
 * @tc.name  : testV1SetNotificationFilter018
 * @tc.desc  : test SetNotificationFilter slot2 bit 2 and bit 3
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetNotificationFilter018, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t ret = g_rilInterface->SetNotificationFilter(SLOTID_2, GetSerialId(), 6);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_NETWORK_SET_NOTIFICATION_FILTER));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetNotificationFilter_2100
 * @tc.name  : testV1SetNotificationFilter019
 * @tc.desc  : test SetNotificationFilter slot1 bit 1 bit 2 and bit 3
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetNotificationFilter019, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SetNotificationFilter(SLOTID_1, GetSerialId(), 7);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_NETWORK_SET_NOTIFICATION_FILTER));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetNotificationFilter_2200
 * @tc.name  : testV1SetNotificationFilter020
 * @tc.desc  : test SetNotificationFilter slot2 bit 1 bit 2 and bit 3
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetNotificationFilter020, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t ret = g_rilInterface->SetNotificationFilter(SLOTID_2, GetSerialId(), 7);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_NETWORK_SET_NOTIFICATION_FILTER));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetNotificationFilter_2300
 * @tc.name  : testV1SetNotificationFilter021
 * @tc.desc  : test SetNotificationFilter slot1 bit 1 and bit 4
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetNotificationFilter021, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SetNotificationFilter(SLOTID_1, GetSerialId(), 9);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_NETWORK_SET_NOTIFICATION_FILTER));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetNotificationFilter_2400
 * @tc.name  : testV1SetNotificationFilter022
 * @tc.desc  : test SetNotificationFilter slot2 bit 1 and bit 4
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetNotificationFilter022, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t ret = g_rilInterface->SetNotificationFilter(SLOTID_2, GetSerialId(), 9);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_NETWORK_SET_NOTIFICATION_FILTER));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetNotificationFilter_2500
 * @tc.name  : testV1SetNotificationFilter023
 * @tc.desc  : test SetNotificationFilter slot1 bit 2 and bit 4
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetNotificationFilter023, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SetNotificationFilter(SLOTID_1, GetSerialId(), 10);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_NETWORK_SET_NOTIFICATION_FILTER));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetNotificationFilter_2600
 * @tc.name  : testV1SetNotificationFilter024
 * @tc.desc  : test SetNotificationFilter slot2 bit 2 and bit 4
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetNotificationFilter024, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t ret = g_rilInterface->SetNotificationFilter(SLOTID_2, GetSerialId(), 10);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_NETWORK_SET_NOTIFICATION_FILTER));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetNotificationFilter_2700
 * @tc.name  : testV1SetNotificationFilter025
 * @tc.desc  : test SetNotificationFilter slot1 bit 1 bit 2 and bit 4
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetNotificationFilter025, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SetNotificationFilter(SLOTID_1, GetSerialId(), 11);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_NETWORK_SET_NOTIFICATION_FILTER));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetNotificationFilter_2800
 * @tc.name  : testV1SetNotificationFilter026
 * @tc.desc  : test SetNotificationFilter slot2 bit 1 bit 2 and bit 4
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetNotificationFilter026, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t ret = g_rilInterface->SetNotificationFilter(SLOTID_2, GetSerialId(), 11);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_NETWORK_SET_NOTIFICATION_FILTER));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetNotificationFilter_2900
 * @tc.name  : testV1SetNotificationFilter027
 * @tc.desc  : test SetNotificationFilter slot1 bit 3 and bit 4
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetNotificationFilter027, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SetNotificationFilter(SLOTID_1, GetSerialId(), 12);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_NETWORK_SET_NOTIFICATION_FILTER));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetNotificationFilter_3000
 * @tc.name  : testV1SetNotificationFilter028
 * @tc.desc  : test SetNotificationFilter slot2 bit 3 and bit 4
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetNotificationFilter028, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t ret = g_rilInterface->SetNotificationFilter(SLOTID_2, GetSerialId(), 12);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_NETWORK_SET_NOTIFICATION_FILTER));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetNotificationFilter_3100
 * @tc.name  : testV1SetNotificationFilter029
 * @tc.desc  : test SetNotificationFilter slot1 bit 1 bit 3 and bit 4
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetNotificationFilter029, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SetNotificationFilter(SLOTID_1, GetSerialId(), 13);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_NETWORK_SET_NOTIFICATION_FILTER));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetNotificationFilter_3200
 * @tc.name  : testV1SetNotificationFilter030
 * @tc.desc  : test SetNotificationFilter slot2 bit 1 bit 3 and bit 4
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetNotificationFilter030, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t ret = g_rilInterface->SetNotificationFilter(SLOTID_2, GetSerialId(), 13);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_NETWORK_SET_NOTIFICATION_FILTER));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetNotificationFilter_3300
 * @tc.name  : testV1SetNotificationFilter031
 * @tc.desc  : test SetNotificationFilter slot1 bit 2 bit 3 and bit 4
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetNotificationFilter031, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SetNotificationFilter(SLOTID_1, GetSerialId(), 14);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_NETWORK_SET_NOTIFICATION_FILTER));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetNotificationFilter_3400
 * @tc.name  : testV1SetNotificationFilter032
 * @tc.desc  : test SetNotificationFilter slot2 bit 2 bit 3 and bit 4
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetNotificationFilter032, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t ret = g_rilInterface->SetNotificationFilter(SLOTID_2, GetSerialId(), 14);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_NETWORK_SET_NOTIFICATION_FILTER));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetNotificationFilter_3500
 * @tc.name  : testV1SetNotificationFilter033
 * @tc.desc  : test SetNotificationFilter slot1 bit 1 bit 2 bit 3 and bit 4
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetNotificationFilter033, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SetNotificationFilter(SLOTID_1, GetSerialId(), 15);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_NETWORK_SET_NOTIFICATION_FILTER));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetNotificationFilter_3600
 * @tc.name  : testV1SetNotificationFilter034
 * @tc.desc  : test SetNotificationFilter slot2 bit 1 bit 2 bit 3 and bit 4
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetNotificationFilter034, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t ret = g_rilInterface->SetNotificationFilter(SLOTID_2, GetSerialId(), 15);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_NETWORK_SET_NOTIFICATION_FILTER));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetNotificationFilter_3700
 * @tc.name  : testV1SetNotificationFilter035
 * @tc.desc  : test SetNotificationFilter slot1 Serial Id is invalid.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetNotificationFilter035, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SetNotificationFilter(
        SLOTID_1, -1, static_cast<int32_t>(NotificationFilter::NOTIFICATION_FILTER_ALL));
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetNotificationFilter_3800
 * @tc.name  : testV1SetNotificationFilter036
 * @tc.desc  : test SetNotificationFilter slot2 Serial Id is invalid.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetNotificationFilter036, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t ret = g_rilInterface->SetNotificationFilter(
        SLOTID_2, -1, static_cast<int32_t>(NotificationFilter::NOTIFICATION_FILTER_ALL));
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetDeviceState_0300
 * @tc.name  : testV1SetDeviceState001
 * @tc.desc  : test SetDeviceState the slot1 low data mode.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetDeviceState001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SetDeviceState(SLOTID_1, GetSerialId(),
                                                 static_cast<int32_t>(DeviceStateType::LOW_DATA_STATE), 1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_NETWORK_SET_DEVICE_STATE));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetDeviceState_0400
 * @tc.name  : testV1SetDeviceState002
 * @tc.desc  : test SetDeviceState the slot2 low data mode.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetDeviceState002, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t ret = g_rilInterface->SetDeviceState(SLOTID_2, GetSerialId(),
                                                 static_cast<int32_t>(DeviceStateType::LOW_DATA_STATE), 1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_NETWORK_SET_DEVICE_STATE));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetDeviceState_0500
 * @tc.name  : testV1SetDeviceState003
 * @tc.desc  : test SetDeviceState the slot1 charging mode.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetDeviceState003, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SetDeviceState(SLOTID_1, GetSerialId(),
                                                 static_cast<int32_t>(DeviceStateType::CHARGING_STATE), 0);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_NETWORK_SET_DEVICE_STATE));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetDeviceState_0600
 * @tc.name  : testV1SetDeviceState004
 * @tc.desc  : test SetDeviceState the slot2 charging mode.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetDeviceState004, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t ret = g_rilInterface->SetDeviceState(SLOTID_2, GetSerialId(),
                                                 static_cast<int32_t>(DeviceStateType::CHARGING_STATE), 0);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_NETWORK_SET_DEVICE_STATE));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetDeviceState_0700
 * @tc.name  : testV1SetDeviceState005
 * @tc.desc  : test SetDeviceState the slot1 charging mode.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetDeviceState005, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SetDeviceState(SLOTID_1, GetSerialId(),
                                                 static_cast<int32_t>(DeviceStateType::CHARGING_STATE), 1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_NETWORK_SET_DEVICE_STATE));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetDeviceState_0800
 * @tc.name  : testV1SetDeviceState006
 * @tc.desc  : test SetDeviceState the slot2 charging mode.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetDeviceState006, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t ret = g_rilInterface->SetDeviceState(SLOTID_2, GetSerialId(),
                                                 static_cast<int32_t>(DeviceStateType::CHARGING_STATE), 1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_NETWORK_SET_DEVICE_STATE));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetDeviceState_0900
 * @tc.name  : testV1SetDeviceState007
 * @tc.desc  : test SetDeviceState the slot1 power saving mode.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetDeviceState007, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SetDeviceState(SLOTID_1, GetSerialId(),
                                                 static_cast<int32_t>(DeviceStateType::POWER_SAVE_MODE), 0);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_NETWORK_SET_DEVICE_STATE));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetDeviceState_1000
 * @tc.name  : testV1SetDeviceState008
 * @tc.desc  : test SetDeviceState the slot2 power saving mode.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetDeviceState008, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t ret = g_rilInterface->SetDeviceState(SLOTID_2, GetSerialId(),
                                                 static_cast<int32_t>(DeviceStateType::POWER_SAVE_MODE), 0);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_NETWORK_SET_DEVICE_STATE));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetDeviceState_1100
 * @tc.name  : testV1SetDeviceState009
 * @tc.desc  : test SetDeviceState the slot1 power saving mode.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetDeviceState009, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SetDeviceState(SLOTID_1, GetSerialId(),
                                                 static_cast<int32_t>(DeviceStateType::POWER_SAVE_MODE), 1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_NETWORK_SET_DEVICE_STATE));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetDeviceState_1200
 * @tc.name  : testV1SetDeviceState010
 * @tc.desc  : test SetDeviceState the slot2 power saving mode.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetDeviceState010, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t ret = g_rilInterface->SetDeviceState(SLOTID_2, GetSerialId(),
                                                 static_cast<int32_t>(DeviceStateType::POWER_SAVE_MODE), 1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_NETWORK_SET_DEVICE_STATE));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetDeviceState_1300
 * @tc.name  : testV1SetDeviceState011
 * @tc.desc  : test SetDeviceState the slot1 Invalid mode.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetDeviceState011, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SetDeviceState(SLOTID_1, GetSerialId(), 3, 1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetDeviceState_1400
 * @tc.name  : testV1SetDeviceState012
 * @tc.desc  : test SetDeviceState the slot2 Invalid mode.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetDeviceState012, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t ret = g_rilInterface->SetDeviceState(SLOTID_2, GetSerialId(), 3, 1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetLocateUpdates_0300
 * @tc.name  : testV1SetLocateUpdates001
 * @tc.desc  : test SetLocateUpdates Notification mode is REG_NOT_NOTIFY
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetLocateUpdates001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SetLocateUpdates(SLOTID_1, GetSerialId(), RilRegNotifyMode::REG_NOT_NOTIFY);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_NETWORK_SET_LOCATE_UPDATES));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetLocateUpdates_0400
 * @tc.name  : testV1SetLocateUpdates002
 * @tc.desc  : test SetLocateUpdates Notification mode is REG_NOT_NOTIFY
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetLocateUpdates002, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t ret = g_rilInterface->SetLocateUpdates(SLOTID_2, GetSerialId(), RilRegNotifyMode::REG_NOT_NOTIFY);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_NETWORK_SET_LOCATE_UPDATES));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetLocateUpdates_0500
 * @tc.name  : testV1SetLocateUpdates003
 * @tc.desc  : test SetLocateUpdates Notification mode is REG_NOTIFY_STAT_ONLY
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetLocateUpdates003, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SetLocateUpdates(SLOTID_1, GetSerialId(), RilRegNotifyMode::REG_NOTIFY_STAT_ONLY);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_NETWORK_SET_LOCATE_UPDATES));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetLocateUpdates_0600
 * @tc.name  : testV1SetLocateUpdates004
 * @tc.desc  : test SetLocateUpdates Notification mode is REG_NOTIFY_STAT_ONLY
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetLocateUpdates004, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t ret = g_rilInterface->SetLocateUpdates(SLOTID_2, GetSerialId(), RilRegNotifyMode::REG_NOTIFY_STAT_ONLY);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_NETWORK_SET_LOCATE_UPDATES));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetLocateUpdates_0700
 * @tc.name  : testV1SetLocateUpdates005
 * @tc.desc  : test SetLocateUpdates slot1 Serial Id is invalid
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetLocateUpdates005, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SetLocateUpdates(SLOTID_1, -1, RilRegNotifyMode::REG_NOTIFY_STAT_ONLY);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetLocateUpdates_0800
 * @tc.name  : testV1SetLocateUpdates006
 * @tc.desc  : test SetLocateUpdates slot2 Serial Id is invalid
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetLocateUpdates006, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t ret = g_rilInterface->SetLocateUpdates(SLOTID_2, -1, RilRegNotifyMode::REG_NOTIFY_STAT_ONLY);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetPreferredNetwork_0300
 * @tc.name  : testV1SetPreferredNetwork001
 * @tc.desc  : test SetPreferredNetwork NetworkType is automatic
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetPreferredNetwork001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SetPreferredNetwork(
        SLOTID_1, GetSerialId(), static_cast<int32_t>(PreferredNetworkMode::CORE_NETWORK_MODE_AUTO));
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_NETWORK_SET_PREFERRED_NETWORK));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetPreferredNetwork_0400
 * @tc.name  : testV1SetPreferredNetwork002
 * @tc.desc  : test SetPreferredNetwork NetworkType is automatic
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetPreferredNetwork002, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t ret = g_rilInterface->SetPreferredNetwork(
        SLOTID_2, GetSerialId(), static_cast<int32_t>(PreferredNetworkMode::CORE_NETWORK_MODE_AUTO));
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_NETWORK_SET_PREFERRED_NETWORK));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetPreferredNetwork_0500
 * @tc.name  : testV1SetPreferredNetwork003
 * @tc.desc  : test SetPreferredNetwork NetworkType is GSM
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetPreferredNetwork003, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SetPreferredNetwork(
        SLOTID_1, GetSerialId(), static_cast<int32_t>(PreferredNetworkMode::CORE_NETWORK_MODE_GSM));
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_NETWORK_SET_PREFERRED_NETWORK));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetPreferredNetwork_0600
 * @tc.name  : testV1SetPreferredNetwork004
 * @tc.desc  : test SetPreferredNetwork NetworkType is GSM
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetPreferredNetwork004, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t ret = g_rilInterface->SetPreferredNetwork(
        SLOTID_2, GetSerialId(), static_cast<int32_t>(PreferredNetworkMode::CORE_NETWORK_MODE_GSM));
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_NETWORK_SET_PREFERRED_NETWORK));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetPreferredNetwork_0700
 * @tc.name  : testV1SetPreferredNetwork005
 * @tc.desc  : test SetPreferredNetwork NetworkType is WCDMA
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetPreferredNetwork005, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SetPreferredNetwork(
        SLOTID_1, GetSerialId(), static_cast<int32_t>(PreferredNetworkMode::CORE_NETWORK_MODE_WCDMA));
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_NETWORK_SET_PREFERRED_NETWORK));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetPreferredNetwork_0800
 * @tc.name  : testV1SetPreferredNetwork006
 * @tc.desc  : test SetPreferredNetwork NetworkType is WCDMA
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetPreferredNetwork006, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t ret = g_rilInterface->SetPreferredNetwork(
        SLOTID_2, GetSerialId(), static_cast<int32_t>(PreferredNetworkMode::CORE_NETWORK_MODE_WCDMA));
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_NETWORK_SET_PREFERRED_NETWORK));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetPreferredNetwork_0900
 * @tc.name  : testV1SetPreferredNetwork007
 * @tc.desc  : test SetPreferredNetwork NetworkType is LTE and WCDMA
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetPreferredNetwork007, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SetPreferredNetwork(
        SLOTID_1, GetSerialId(), static_cast<int32_t>(PreferredNetworkMode::CORE_NETWORK_MODE_LTE_WCDMA));
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_NETWORK_SET_PREFERRED_NETWORK));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetPreferredNetwork_1000
 * @tc.name  : testV1SetPreferredNetwork008
 * @tc.desc  : test SetPreferredNetwork NetworkType is LTE and WCDMA
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetPreferredNetwork008, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t ret = g_rilInterface->SetPreferredNetwork(
        SLOTID_2, GetSerialId(), static_cast<int32_t>(PreferredNetworkMode::CORE_NETWORK_MODE_LTE_WCDMA));
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_NETWORK_SET_PREFERRED_NETWORK));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetPreferredNetwork_1100
 * @tc.name  : testV1SetPreferredNetwork009
 * @tc.desc  : test SetPreferredNetwork NetworkType is LTE, WCDMA, and GSM
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetPreferredNetwork009, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SetPreferredNetwork(
        SLOTID_1, GetSerialId(), static_cast<int32_t>(PreferredNetworkMode::CORE_NETWORK_MODE_LTE_WCDMA_GSM));
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_NETWORK_SET_PREFERRED_NETWORK));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetPreferredNetwork_1200
 * @tc.name  : testV1SetPreferredNetwork010
 * @tc.desc  : test SetPreferredNetwork NetworkType is LTE, WCDMA, and GSM
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetPreferredNetwork010, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t ret = g_rilInterface->SetPreferredNetwork(
        SLOTID_2, GetSerialId(), static_cast<int32_t>(PreferredNetworkMode::CORE_NETWORK_MODE_LTE_WCDMA_GSM));
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_NETWORK_SET_PREFERRED_NETWORK));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetPreferredNetwork_1300
 * @tc.name  : testV1SetPreferredNetwork011
 * @tc.desc  : test SetPreferredNetwork NetworkType is WCDMA and GSM
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetPreferredNetwork011, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SetPreferredNetwork(
        SLOTID_1, GetSerialId(), static_cast<int32_t>(PreferredNetworkMode::CORE_NETWORK_MODE_WCDMA_GSM));
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_NETWORK_SET_PREFERRED_NETWORK));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetPreferredNetwork_1400
 * @tc.name  : testV1SetPreferredNetwork012
 * @tc.desc  : test SetPreferredNetwork NetworkType is WCDMA and GSM
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetPreferredNetwork012, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t ret = g_rilInterface->SetPreferredNetwork(
        SLOTID_2, GetSerialId(), static_cast<int32_t>(PreferredNetworkMode::CORE_NETWORK_MODE_WCDMA_GSM));
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_NETWORK_SET_PREFERRED_NETWORK));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetPreferredNetwork_1500
 * @tc.name  : testV1SetPreferredNetwork013
 * @tc.desc  : test SetPreferredNetwork NetworkType is CDMA
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetPreferredNetwork013, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SetPreferredNetwork(
        SLOTID_1, GetSerialId(), static_cast<int32_t>(PreferredNetworkMode::CORE_NETWORK_MODE_CDMA));
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_NETWORK_SET_PREFERRED_NETWORK));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetPreferredNetwork_1600
 * @tc.name  : testV1SetPreferredNetwork014
 * @tc.desc  : test SetPreferredNetwork NetworkType is CDMA
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetPreferredNetwork014, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t ret = g_rilInterface->SetPreferredNetwork(
        SLOTID_2, GetSerialId(), static_cast<int32_t>(PreferredNetworkMode::CORE_NETWORK_MODE_CDMA));
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_NETWORK_SET_PREFERRED_NETWORK));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetPreferredNetwork_1700
 * @tc.name  : testV1SetPreferredNetwork015
 * @tc.desc  : test SetPreferredNetwork NetworkType is EV-DO
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetPreferredNetwork015, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SetPreferredNetwork(
        SLOTID_1, GetSerialId(), static_cast<int32_t>(PreferredNetworkMode::CORE_NETWORK_MODE_EVDO));
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_NETWORK_SET_PREFERRED_NETWORK));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetPreferredNetwork_1800
 * @tc.name  : testV1SetPreferredNetwork016
 * @tc.desc  : test SetPreferredNetwork NetworkType is EV-DO
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetPreferredNetwork016, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t ret = g_rilInterface->SetPreferredNetwork(
        SLOTID_2, GetSerialId(), static_cast<int32_t>(PreferredNetworkMode::CORE_NETWORK_MODE_EVDO));
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_NETWORK_SET_PREFERRED_NETWORK));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetPreferredNetwork_1900
 * @tc.name  : testV1SetPreferredNetwork017
 * @tc.desc  : test SetPreferredNetwork NetworkType is EV-DO and CDMA
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetPreferredNetwork017, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SetPreferredNetwork(
        SLOTID_1, GetSerialId(), static_cast<int32_t>(PreferredNetworkMode::CORE_NETWORK_MODE_EVDO_CDMA));
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_NETWORK_SET_PREFERRED_NETWORK));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetPreferredNetwork_2000
 * @tc.name  : testV1SetPreferredNetwork018
 * @tc.desc  : test SetPreferredNetwork NetworkType is EV-DO and CDMA
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetPreferredNetwork018, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t ret = g_rilInterface->SetPreferredNetwork(
        SLOTID_2, GetSerialId(), static_cast<int32_t>(PreferredNetworkMode::CORE_NETWORK_MODE_EVDO_CDMA));
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_NETWORK_SET_PREFERRED_NETWORK));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetPreferredNetwork_2100
 * @tc.name  : testV1SetPreferredNetwork019
 * @tc.desc  : test SetPreferredNetwork NetworkType is WCDMA, GSM, EV-DO, and CDMA
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetPreferredNetwork019, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SetPreferredNetwork(
        SLOTID_1, GetSerialId(), static_cast<int32_t>(PreferredNetworkMode::CORE_NETWORK_MODE_WCDMA_GSM_EVDO_CDMA));
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_NETWORK_SET_PREFERRED_NETWORK));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetPreferredNetwork_2200
 * @tc.name  : testV1SetPreferredNetwork020
 * @tc.desc  : test SetPreferredNetwork NetworkType is WCDMA, GSM, EV-DO, and CDMA
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetPreferredNetwork020, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t ret = g_rilInterface->SetPreferredNetwork(
        SLOTID_2, GetSerialId(), static_cast<int32_t>(PreferredNetworkMode::CORE_NETWORK_MODE_WCDMA_GSM_EVDO_CDMA));
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_NETWORK_SET_PREFERRED_NETWORK));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetPreferredNetwork_2300
 * @tc.name  : testV1SetPreferredNetwork021
 * @tc.desc  : test SetPreferredNetwork NetworkType is LTE, EV-DO, and CDMA
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetPreferredNetwork021, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SetPreferredNetwork(
        SLOTID_1, GetSerialId(), static_cast<int32_t>(PreferredNetworkMode::CORE_NETWORK_MODE_LTE_EVDO_CDMA));
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_NETWORK_SET_PREFERRED_NETWORK));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetPreferredNetwork_2400
 * @tc.name  : testV1SetPreferredNetwork022
 * @tc.desc  : test SetPreferredNetwork NetworkType is LTE, EV-DO, and CDMA
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetPreferredNetwork022, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t ret = g_rilInterface->SetPreferredNetwork(
        SLOTID_2, GetSerialId(), static_cast<int32_t>(PreferredNetworkMode::CORE_NETWORK_MODE_LTE_EVDO_CDMA));
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_NETWORK_SET_PREFERRED_NETWORK));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetPreferredNetwork_2500
 * @tc.name  : testV1SetPreferredNetwork023
 * @tc.desc  : test SetPreferredNetwork NetworkType is LTE, WCDMA, GSM, EV-DO, and CDMA
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetPreferredNetwork023, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SetPreferredNetwork(
        SLOTID_1, GetSerialId(), static_cast<int32_t>(PreferredNetworkMode::CORE_NETWORK_MODE_LTE_WCDMA_GSM_EVDO_CDMA));
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_NETWORK_SET_PREFERRED_NETWORK));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetPreferredNetwork_2600
 * @tc.name  : testV1SetPreferredNetwork024
 * @tc.desc  : test SetPreferredNetwork NetworkType is LTE, WCDMA, GSM, EV-DO, and CDMA
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetPreferredNetwork024, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t ret = g_rilInterface->SetPreferredNetwork(
        SLOTID_2, GetSerialId(), static_cast<int32_t>(PreferredNetworkMode::CORE_NETWORK_MODE_LTE_WCDMA_GSM_EVDO_CDMA));
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_NETWORK_SET_PREFERRED_NETWORK));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetPreferredNetwork_2700
 * @tc.name  : testV1SetPreferredNetwork025
 * @tc.desc  : test SetPreferredNetwork NetworkType is TD-SCDMA
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetPreferredNetwork025, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SetPreferredNetwork(
        SLOTID_1, GetSerialId(), static_cast<int32_t>(PreferredNetworkMode::CORE_NETWORK_MODE_TDSCDMA));
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_NETWORK_SET_PREFERRED_NETWORK));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetPreferredNetwork_2800
 * @tc.name  : testV1SetPreferredNetwork026
 * @tc.desc  : test SetPreferredNetwork NetworkType is TD-SCDMA
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetPreferredNetwork026, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t ret = g_rilInterface->SetPreferredNetwork(
        SLOTID_2, GetSerialId(), static_cast<int32_t>(PreferredNetworkMode::CORE_NETWORK_MODE_TDSCDMA));
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_NETWORK_SET_PREFERRED_NETWORK));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetPreferredNetwork_2900
 * @tc.name  : testV1SetPreferredNetwork027
 * @tc.desc  : test SetPreferredNetwork NetworkType is TD-SCDMA and GSM
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetPreferredNetwork027, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SetPreferredNetwork(
        SLOTID_1, GetSerialId(), static_cast<int32_t>(PreferredNetworkMode::CORE_NETWORK_MODE_TDSCDMA_GSM));
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_NETWORK_SET_PREFERRED_NETWORK));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetPreferredNetwork_3000
 * @tc.name  : testV1SetPreferredNetwork028
 * @tc.desc  : test SetPreferredNetwork NetworkType is TD-SCDMA and GSM
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetPreferredNetwork028, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t ret = g_rilInterface->SetPreferredNetwork(
        SLOTID_2, GetSerialId(), static_cast<int32_t>(PreferredNetworkMode::CORE_NETWORK_MODE_TDSCDMA_GSM));
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_NETWORK_SET_PREFERRED_NETWORK));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetPreferredNetwork_3100
 * @tc.name  : testV1SetPreferredNetwork029
 * @tc.desc  : test SetPreferredNetwork NetworkType is TD-SCDMA and WCDMA
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetPreferredNetwork029, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SetPreferredNetwork(
        SLOTID_1, GetSerialId(), static_cast<int32_t>(PreferredNetworkMode::CORE_NETWORK_MODE_TDSCDMA_WCDMA));
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_NETWORK_SET_PREFERRED_NETWORK));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetPreferredNetwork_3200
 * @tc.name  : testV1SetPreferredNetwork030
 * @tc.desc  : test SetPreferredNetwork NetworkType is TD-SCDMA and WCDMA
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetPreferredNetwork030, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t ret = g_rilInterface->SetPreferredNetwork(
        SLOTID_2, GetSerialId(), static_cast<int32_t>(PreferredNetworkMode::CORE_NETWORK_MODE_TDSCDMA_WCDMA));
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_NETWORK_SET_PREFERRED_NETWORK));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetPreferredNetwork_3300
 * @tc.name  : testV1SetPreferredNetwork031
 * @tc.desc  : test SetPreferredNetwork NetworkType is TD-SCDMA, WCDMA, and GSM
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetPreferredNetwork031, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SetPreferredNetwork(
        SLOTID_1, GetSerialId(), static_cast<int32_t>(PreferredNetworkMode::CORE_NETWORK_MODE_TDSCDMA_WCDMA_GSM));
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_NETWORK_SET_PREFERRED_NETWORK));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetPreferredNetwork_3400
 * @tc.name  : testV1SetPreferredNetwork032
 * @tc.desc  : test SetPreferredNetwork NetworkType is TD-SCDMA, WCDMA, and GSM
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetPreferredNetwork032, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t ret = g_rilInterface->SetPreferredNetwork(
        SLOTID_2, GetSerialId(), static_cast<int32_t>(PreferredNetworkMode::CORE_NETWORK_MODE_TDSCDMA_WCDMA_GSM));
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_NETWORK_SET_PREFERRED_NETWORK));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetPreferredNetwork_3500
 * @tc.name  : testV1SetPreferredNetwork033
 * @tc.desc  : test SetPreferredNetwork NetworkType is LTE and TD-SCDMA
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetPreferredNetwork033, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SetPreferredNetwork(
        SLOTID_1, GetSerialId(), static_cast<int32_t>(PreferredNetworkMode::CORE_NETWORK_MODE_LTE_TDSCDMA));
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_NETWORK_SET_PREFERRED_NETWORK));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetPreferredNetwork_3600
 * @tc.name  : testV1SetPreferredNetwork034
 * @tc.desc  : test SetPreferredNetwork NetworkType is LTE and TD-SCDMA
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetPreferredNetwork034, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t ret = g_rilInterface->SetPreferredNetwork(
        SLOTID_2, GetSerialId(), static_cast<int32_t>(PreferredNetworkMode::CORE_NETWORK_MODE_LTE_TDSCDMA));
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_NETWORK_SET_PREFERRED_NETWORK));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetPreferredNetwork_3700
 * @tc.name  : testV1SetPreferredNetwork035
 * @tc.desc  : test SetPreferredNetwork NetworkType is LTE, TDSCDMA, and GSM
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetPreferredNetwork035, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SetPreferredNetwork(
        SLOTID_1, GetSerialId(), static_cast<int32_t>(PreferredNetworkMode::CORE_NETWORK_MODE_LTE_TDSCDMA_GSM));
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_NETWORK_SET_PREFERRED_NETWORK));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetPreferredNetwork_3800
 * @tc.name  : testV1SetPreferredNetwork036
 * @tc.desc  : test SetPreferredNetwork NetworkType is LTE, TDSCDMA, and GSM
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetPreferredNetwork036, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t ret = g_rilInterface->SetPreferredNetwork(
        SLOTID_2, GetSerialId(), static_cast<int32_t>(PreferredNetworkMode::CORE_NETWORK_MODE_LTE_TDSCDMA_GSM));
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_NETWORK_SET_PREFERRED_NETWORK));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetPreferredNetwork_3900
 * @tc.name  : testV1SetPreferredNetwork037
 * @tc.desc  : test SetPreferredNetwork NetworkType is LTE, TD-SCDMA, and WCDMA
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetPreferredNetwork037, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SetPreferredNetwork(
        SLOTID_1, GetSerialId(), static_cast<int32_t>(PreferredNetworkMode::CORE_NETWORK_MODE_LTE_TDSCDMA_WCDMA));
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_NETWORK_SET_PREFERRED_NETWORK));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetPreferredNetwork_4000
 * @tc.name  : testV1SetPreferredNetwork038
 * @tc.desc  : test SetPreferredNetwork NetworkType is LTE, TD-SCDMA, and WCDMA
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetPreferredNetwork038, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t ret = g_rilInterface->SetPreferredNetwork(
        SLOTID_2, GetSerialId(), static_cast<int32_t>(PreferredNetworkMode::CORE_NETWORK_MODE_LTE_TDSCDMA_WCDMA));
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_NETWORK_SET_PREFERRED_NETWORK));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetPreferredNetwork_4100
 * @tc.name  : testV1SetPreferredNetwork039
 * @tc.desc  : test SetPreferredNetwork NetworkType is LTE, TDSCDMA, WCDMA, and GSM
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetPreferredNetwork039, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SetPreferredNetwork(
        SLOTID_1, GetSerialId(), static_cast<int32_t>(PreferredNetworkMode::CORE_NETWORK_MODE_LTE_TDSCDMA_WCDMA_GSM));
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_NETWORK_SET_PREFERRED_NETWORK));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetPreferredNetwork_4200
 * @tc.name  : testV1SetPreferredNetwork040
 * @tc.desc  : test SetPreferredNetwork NetworkType is LTE, TDSCDMA, WCDMA, and GSM
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetPreferredNetwork040, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t ret = g_rilInterface->SetPreferredNetwork(
        SLOTID_2, GetSerialId(), static_cast<int32_t>(PreferredNetworkMode::CORE_NETWORK_MODE_LTE_TDSCDMA_WCDMA_GSM));
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_NETWORK_SET_PREFERRED_NETWORK));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetPreferredNetwork_4300
 * @tc.name  : testV1SetPreferredNetwork041
 * @tc.desc  : test SetPreferredNetwork NetworkType is TD-SCDMA, WCDMA, GSM, EV-DO, and CDMA
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetPreferredNetwork041, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SetPreferredNetwork(
        SLOTID_1, GetSerialId(),
        static_cast<int32_t>(PreferredNetworkMode::CORE_NETWORK_MODE_TDSCDMA_WCDMA_GSM_EVDO_CDMA));
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_NETWORK_SET_PREFERRED_NETWORK));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetPreferredNetwork_4400
 * @tc.name  : testV1SetPreferredNetwork042
 * @tc.desc  : test SetPreferredNetwork NetworkType is TD-SCDMA, WCDMA, GSM, EV-DO, and CDMA
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetPreferredNetwork042, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t ret = g_rilInterface->SetPreferredNetwork(
        SLOTID_2, GetSerialId(),
        static_cast<int32_t>(PreferredNetworkMode::CORE_NETWORK_MODE_TDSCDMA_WCDMA_GSM_EVDO_CDMA));
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_NETWORK_SET_PREFERRED_NETWORK));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetPreferredNetwork_4500
 * @tc.name  : testV1SetPreferredNetwork043
 * @tc.desc  : test SetPreferredNetwork NetworkType is LTE, TD-SCDMA, WCDMA, GSM, EV-DO, and CDMA
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetPreferredNetwork043, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SetPreferredNetwork(
        SLOTID_1, GetSerialId(),
        static_cast<int32_t>(PreferredNetworkMode::CORE_NETWORK_MODE_LTE_TDSCDMA_WCDMA_GSM_EVDO_CDMA));
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_NETWORK_SET_PREFERRED_NETWORK));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetPreferredNetwork_4600
 * @tc.name  : testV1SetPreferredNetwork044
 * @tc.desc  : test SetPreferredNetwork NetworkType is LTE, TD-SCDMA, WCDMA, GSM, EV-DO, and CDMA
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetPreferredNetwork044, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t ret = g_rilInterface->SetPreferredNetwork(
        SLOTID_2, GetSerialId(),
        static_cast<int32_t>(PreferredNetworkMode::CORE_NETWORK_MODE_LTE_TDSCDMA_WCDMA_GSM_EVDO_CDMA));
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_NETWORK_SET_PREFERRED_NETWORK));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetPreferredNetwork_4700
 * @tc.name  : testV1SetPreferredNetwork045
 * @tc.desc  : test SetPreferredNetwork NetworkType is NR
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetPreferredNetwork045, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SetPreferredNetwork(SLOTID_1, GetSerialId(),
                                                      static_cast<int32_t>(PreferredNetworkMode::CORE_NETWORK_MODE_NR));
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_NETWORK_SET_PREFERRED_NETWORK));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetPreferredNetwork_4800
 * @tc.name  : testV1SetPreferredNetwork046
 * @tc.desc  : test SetPreferredNetwork NetworkType is NR
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetPreferredNetwork046, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t ret = g_rilInterface->SetPreferredNetwork(SLOTID_2, GetSerialId(),
                                                      static_cast<int32_t>(PreferredNetworkMode::CORE_NETWORK_MODE_NR));
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_NETWORK_SET_PREFERRED_NETWORK));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetPreferredNetwork_4900
 * @tc.name  : testV1SetPreferredNetwork047
 * @tc.desc  : test SetPreferredNetwork NetworkType is NR and LTE
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetPreferredNetwork047, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SetPreferredNetwork(
        SLOTID_1, GetSerialId(), static_cast<int32_t>(PreferredNetworkMode::CORE_NETWORK_MODE_NR_LTE));
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_NETWORK_SET_PREFERRED_NETWORK));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetPreferredNetwork_5000
 * @tc.name  : testV1SetPreferredNetwork048
 * @tc.desc  : test SetPreferredNetwork NetworkType is NR and LTE
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetPreferredNetwork048, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t ret = g_rilInterface->SetPreferredNetwork(
        SLOTID_2, GetSerialId(), static_cast<int32_t>(PreferredNetworkMode::CORE_NETWORK_MODE_NR_LTE));
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_NETWORK_SET_PREFERRED_NETWORK));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetPreferredNetwork_5100
 * @tc.name  : testV1SetPreferredNetwork049
 * @tc.desc  : test SetPreferredNetwork NetworkType is NR, LTE, and WCDMA
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetPreferredNetwork049, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SetPreferredNetwork(
        SLOTID_1, GetSerialId(), static_cast<int32_t>(PreferredNetworkMode::CORE_NETWORK_MODE_NR_LTE_WCDMA));
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_NETWORK_SET_PREFERRED_NETWORK));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetPreferredNetwork_5200
 * @tc.name  : testV1SetPreferredNetwork050
 * @tc.desc  : test SetPreferredNetwork NetworkType is NR, LTE, and WCDMA
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetPreferredNetwork050, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t ret = g_rilInterface->SetPreferredNetwork(
        SLOTID_2, GetSerialId(), static_cast<int32_t>(PreferredNetworkMode::CORE_NETWORK_MODE_NR_LTE_WCDMA));
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_NETWORK_SET_PREFERRED_NETWORK));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetPreferredNetwork_5300
 * @tc.name  : testV1SetPreferredNetwork051
 * @tc.desc  : test SetPreferredNetwork NetworkType is NR, LTE, WCDMA, and GSM
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetPreferredNetwork051, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SetPreferredNetwork(
        SLOTID_1, GetSerialId(), static_cast<int32_t>(PreferredNetworkMode::CORE_NETWORK_MODE_NR_LTE_WCDMA_GSM));
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_NETWORK_SET_PREFERRED_NETWORK));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetPreferredNetwork_5400
 * @tc.name  : testV1SetPreferredNetwork052
 * @tc.desc  : test SetPreferredNetwork NetworkType is NR, LTE, WCDMA, and GSM
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetPreferredNetwork052, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t ret = g_rilInterface->SetPreferredNetwork(
        SLOTID_2, GetSerialId(), static_cast<int32_t>(PreferredNetworkMode::CORE_NETWORK_MODE_NR_LTE_WCDMA_GSM));
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_NETWORK_SET_PREFERRED_NETWORK));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetPreferredNetwork_5500
 * @tc.name  : testV1SetPreferredNetwork053
 * @tc.desc  : test SetPreferredNetwork NetworkType is NR, LTE, EV-DO, and CDMA
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetPreferredNetwork053, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SetPreferredNetwork(
        SLOTID_1, GetSerialId(), static_cast<int32_t>(PreferredNetworkMode::CORE_NETWORK_MODE_NR_LTE_EVDO_CDMA));
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_NETWORK_SET_PREFERRED_NETWORK));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetPreferredNetwork_5600
 * @tc.name  : testV1SetPreferredNetwork054
 * @tc.desc  : test SetPreferredNetwork NetworkType is NR, LTE, EV-DO, and CDMA
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetPreferredNetwork054, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t ret = g_rilInterface->SetPreferredNetwork(
        SLOTID_2, GetSerialId(), static_cast<int32_t>(PreferredNetworkMode::CORE_NETWORK_MODE_NR_LTE_EVDO_CDMA));
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_NETWORK_SET_PREFERRED_NETWORK));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetPreferredNetwork_5700
 * @tc.name  : testV1SetPreferredNetwork055
 * @tc.desc  : test SetPreferredNetwork NetworkType is NR, LTE, WCDMA, GSM, EV-DO, and CDMA
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetPreferredNetwork055, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SetPreferredNetwork(
        SLOTID_1, GetSerialId(),
        static_cast<int32_t>(PreferredNetworkMode::CORE_NETWORK_MODE_NR_LTE_WCDMA_GSM_EVDO_CDMA));
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_NETWORK_SET_PREFERRED_NETWORK));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetPreferredNetwork_5800
 * @tc.name  : testV1SetPreferredNetwork056
 * @tc.desc  : test SetPreferredNetwork NetworkType is NR, LTE, WCDMA, GSM, EV-DO, and CDMA
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetPreferredNetwork056, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t ret = g_rilInterface->SetPreferredNetwork(
        SLOTID_2, GetSerialId(),
        static_cast<int32_t>(PreferredNetworkMode::CORE_NETWORK_MODE_NR_LTE_WCDMA_GSM_EVDO_CDMA));
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_NETWORK_SET_PREFERRED_NETWORK));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetPreferredNetwork_5900
 * @tc.name  : testV1SetPreferredNetwork057
 * @tc.desc  : test SetPreferredNetwork NetworkType is NR, LTE, and TD-SCDMA
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetPreferredNetwork057, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SetPreferredNetwork(
        SLOTID_1, GetSerialId(), static_cast<int32_t>(PreferredNetworkMode::CORE_NETWORK_MODE_NR_LTE_TDSCDMA));
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_NETWORK_SET_PREFERRED_NETWORK));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetPreferredNetwork_6000
 * @tc.name  : testV1SetPreferredNetwork058
 * @tc.desc  : test SetPreferredNetwork NetworkType is NR, LTE, and TD-SCDMA
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetPreferredNetwork058, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t ret = g_rilInterface->SetPreferredNetwork(
        SLOTID_2, GetSerialId(), static_cast<int32_t>(PreferredNetworkMode::CORE_NETWORK_MODE_NR_LTE_TDSCDMA));
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_NETWORK_SET_PREFERRED_NETWORK));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetPreferredNetwork_6100
 * @tc.name  : testV1SetPreferredNetwork059
 * @tc.desc  : test SetPreferredNetwork NetworkType is NR, LTE, TDSCDMA, and GSM
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetPreferredNetwork059, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SetPreferredNetwork(
        SLOTID_1, GetSerialId(), static_cast<int32_t>(PreferredNetworkMode::CORE_NETWORK_MODE_NR_LTE_TDSCDMA_GSM));
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_NETWORK_SET_PREFERRED_NETWORK));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetPreferredNetwork_6200
 * @tc.name  : testV1SetPreferredNetwork060
 * @tc.desc  : test SetPreferredNetwork NetworkType is NR, LTE, TDSCDMA, and GSM
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetPreferredNetwork060, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t ret = g_rilInterface->SetPreferredNetwork(
        SLOTID_2, GetSerialId(), static_cast<int32_t>(PreferredNetworkMode::CORE_NETWORK_MODE_NR_LTE_TDSCDMA_GSM));
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_NETWORK_SET_PREFERRED_NETWORK));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetPreferredNetwork_6300
 * @tc.name  : testV1SetPreferredNetwork061
 * @tc.desc  : test SetPreferredNetwork NetworkType is NR, LTE, TD-SCDMA, and WCDMA
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetPreferredNetwork061, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SetPreferredNetwork(
        SLOTID_1, GetSerialId(), static_cast<int32_t>(PreferredNetworkMode::CORE_NETWORK_MODE_NR_LTE_TDSCDMA_WCDMA));
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_NETWORK_SET_PREFERRED_NETWORK));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetPreferredNetwork_6400
 * @tc.name  : testV1SetPreferredNetwork062
 * @tc.desc  : test SetPreferredNetwork NetworkType is NR, LTE, TD-SCDMA, and WCDMA
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetPreferredNetwork062, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t ret = g_rilInterface->SetPreferredNetwork(
        SLOTID_2, GetSerialId(), static_cast<int32_t>(PreferredNetworkMode::CORE_NETWORK_MODE_NR_LTE_TDSCDMA_WCDMA));
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_NETWORK_SET_PREFERRED_NETWORK));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetPreferredNetwork_6500
 * @tc.name  : testV1SetPreferredNetwork063
 * @tc.desc  : test SetPreferredNetwork NetworkType is NR, LTE, TD-SCDMA, WCDMA, and GSM
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetPreferredNetwork063, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SetPreferredNetwork(
        SLOTID_1, GetSerialId(),
        static_cast<int32_t>(PreferredNetworkMode::CORE_NETWORK_MODE_NR_LTE_TDSCDMA_WCDMA_GSM));
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_NETWORK_SET_PREFERRED_NETWORK));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetPreferredNetwork_6600
 * @tc.name  : testV1SetPreferredNetwork064
 * @tc.desc  : test SetPreferredNetwork NetworkType is NR, LTE, TD-SCDMA, WCDMA, and GSM
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetPreferredNetwork064, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t ret = g_rilInterface->SetPreferredNetwork(
        SLOTID_2, GetSerialId(),
        static_cast<int32_t>(PreferredNetworkMode::CORE_NETWORK_MODE_NR_LTE_TDSCDMA_WCDMA_GSM));
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_NETWORK_SET_PREFERRED_NETWORK));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetPreferredNetwork_6700
 * @tc.name  : testV1SetPreferredNetwork065
 * @tc.desc  : test SetPreferredNetwork NetworkType is NR, LTE, TD-SCDMA, WCDMA, GSM, EV-DO, and CDMA
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetPreferredNetwork065, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SetPreferredNetwork(
        SLOTID_1, GetSerialId(),
        static_cast<int32_t>(PreferredNetworkMode::CORE_NETWORK_MODE_NR_LTE_TDSCDMA_WCDMA_GSM_EVDO_CDMA));
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_NETWORK_SET_PREFERRED_NETWORK));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetPreferredNetwork_6800
 * @tc.name  : testV1SetPreferredNetwork066
 * @tc.desc  : test SetPreferredNetwork NetworkType is NR, LTE, TD-SCDMA, WCDMA, GSM, EV-DO, and CDMA
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetPreferredNetwork066, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t ret = g_rilInterface->SetPreferredNetwork(
        SLOTID_2, GetSerialId(),
        static_cast<int32_t>(PreferredNetworkMode::CORE_NETWORK_MODE_NR_LTE_TDSCDMA_WCDMA_GSM_EVDO_CDMA));
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_NETWORK_SET_PREFERRED_NETWORK));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetPreferredNetwork_0300
 * @tc.name  : testV1GetPreferredNetwork001
 * @tc.desc  : test GetPreferredNetwork Serial Id is invalid
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetPreferredNetwork001, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->GetPreferredNetwork(SLOTID_1, -1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetPreferredNetwork_0400
 * @tc.name  : testV1GetPreferredNetwork002
 * @tc.desc  : test GetPreferredNetwork Serial Id is invalid
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetPreferredNetwork002, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t ret = g_rilInterface->GetPreferredNetwork(SLOTID_2, -1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetPreferredNetworkResponse_0100
 * @tc.name  : testV1SetPreferredNetworkResponse001
 * @tc.desc  : test slot1 SetPreferredNetworkResponse is triggered
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetPreferredNetworkResponse001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    g_setPreferredNetworkResponseFlag = false;
    int32_t ret = g_rilInterface->SetPreferredNetwork(
        SLOTID_1, GetSerialId(), static_cast<int32_t>(PreferredNetworkMode::CORE_NETWORK_MODE_AUTO));
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_setPreferredNetworkResponseFlag);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_NETWORK_SET_PREFERRED_NETWORK));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetPreferredNetworkResponse_0200
 * @tc.name  : testV1SetPreferredNetworkResponse002
 * @tc.desc  : test slot2 SetPreferredNetworkResponse is triggered
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetPreferredNetworkResponse002, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    g_setPreferredNetworkResponseFlag = false;
    int32_t ret = g_rilInterface->SetPreferredNetwork(
        SLOTID_2, GetSerialId(), static_cast<int32_t>(PreferredNetworkMode::CORE_NETWORK_MODE_AUTO));
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_setPreferredNetworkResponseFlag);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_NETWORK_SET_PREFERRED_NETWORK));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetPreferredNetworkResponse_0300
 * @tc.name  : testV1SetPreferredNetworkResponse003
 * @tc.desc  : test slot1 SetPreferredNetworkResponse is not triggered
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetPreferredNetworkResponse003, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    g_setPreferredNetworkResponseFlag = false;
    int32_t ret = g_rilInterface->SetPreferredNetwork(
        SLOTID_1, -1, static_cast<int32_t>(PreferredNetworkMode::CORE_NETWORK_MODE_AUTO));
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
    EXPECT_NE(true, g_setPreferredNetworkResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetPreferredNetworkResponse_0400
 * @tc.name  : testV1SetPreferredNetworkResponse004
 * @tc.desc  : test slot2 SetPreferredNetworkResponse is not triggered
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetPreferredNetworkResponse004, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    g_setPreferredNetworkResponseFlag = false;
    int32_t ret = g_rilInterface->SetPreferredNetwork(
        SLOTID_2, -1, static_cast<int32_t>(PreferredNetworkMode::CORE_NETWORK_MODE_AUTO));
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
    EXPECT_NE(true, g_setPreferredNetworkResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetPreferredNetworkResponse_0100
 * @tc.name  : testV1GetPreferredNetworkResponse001
 * @tc.desc  : test slot1 GetPreferredNetworkResponse is triggered
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetPreferredNetworkResponse001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    g_getPreferredNetworkResponseFlag = false;
    int32_t ret = g_rilInterface->GetPreferredNetwork(SLOTID_1, GetSerialId());
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_getPreferredNetworkResponseFlag);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_NETWORK_GET_PREFERRED_NETWORK));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetPreferredNetworkResponse_0200
 * @tc.name  : testV1GetPreferredNetworkResponse002
 * @tc.desc  : test slot2 GetPreferredNetworkResponse is triggered
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetPreferredNetworkResponse002, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    g_getPreferredNetworkResponseFlag = false;
    int32_t ret = g_rilInterface->GetPreferredNetwork(SLOTID_2, GetSerialId());
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_getPreferredNetworkResponseFlag);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_NETWORK_GET_PREFERRED_NETWORK));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetPreferredNetworkResponse_0300
 * @tc.name  : testV1GetPreferredNetworkResponse003
 * @tc.desc  : test slot1 GetPreferredNetworkResponse is not triggered
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetPreferredNetworkResponse003, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    g_getPreferredNetworkResponseFlag = false;
    int32_t ret = g_rilInterface->GetPreferredNetwork(SLOTID_1, -1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
    EXPECT_NE(true, g_getPreferredNetworkResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetPreferredNetworkResponse_0400
 * @tc.name  : testV1GetPreferredNetworkResponse004
 * @tc.desc  : test slot2 GetPreferredNetworkResponse is not triggered
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetPreferredNetworkResponse004, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    g_getPreferredNetworkResponseFlag = false;
    int32_t ret = g_rilInterface->GetPreferredNetwork(SLOTID_2, -1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
    EXPECT_NE(true, g_getPreferredNetworkResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetPhysicalChannelConfigResponse_0100
 * @tc.name  : testV1GetPhysicalChannelConfigResponse001
 * @tc.desc  : test slot1 GetPhysicalChannelConfigResponse is triggered
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetPhysicalChannelConfigResponse001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    g_getPhysicalChannelConfigResponseFlag = false;
    int32_t ret = g_rilInterface->GetPhysicalChannelConfig(SLOTID_1, GetSerialId());
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_getPhysicalChannelConfigResponseFlag);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_NETWORK_GET_PHYSICAL_CHANNEL_CONFIG));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetPhysicalChannelConfigResponse_0200
 * @tc.name  : testV1GetPhysicalChannelConfigResponse002
 * @tc.desc  : test slot2 GetPhysicalChannelConfigResponse is triggered
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetPhysicalChannelConfigResponse002, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    g_getPhysicalChannelConfigResponseFlag = false;
    int32_t ret = g_rilInterface->GetPhysicalChannelConfig(SLOTID_2, GetSerialId());
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_getPhysicalChannelConfigResponseFlag);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_NETWORK_GET_PHYSICAL_CHANNEL_CONFIG));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetPhysicalChannelConfigResponse_0300
 * @tc.name  : testV1GetPhysicalChannelConfigResponse003
 * @tc.desc  : test slot1 GetPhysicalChannelConfigResponse is not triggered
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetPhysicalChannelConfigResponse003, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    g_getPhysicalChannelConfigResponseFlag = false;
    int32_t ret = g_rilInterface->GetPhysicalChannelConfig(SLOTID_1, -1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
    EXPECT_NE(true, g_getPhysicalChannelConfigResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetPhysicalChannelConfigResponse_0400
 * @tc.name  : testV1GetPhysicalChannelConfigResponse004
 * @tc.desc  : test solt2 GetPhysicalChannelConfigResponse is not triggered
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetPhysicalChannelConfigResponse004, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    g_getPhysicalChannelConfigResponseFlag = false;
    int32_t ret = g_rilInterface->GetPhysicalChannelConfig(SLOTID_2, -1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
    EXPECT_NE(true, g_getPhysicalChannelConfigResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SeparateConferenceResponse_0100
 * @tc.name  : testV1SeparateConferenceResponse001
 * @tc.desc  : test slot1 SeparateConferenceResponse is triggered
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SeparateConferenceResponse001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    g_separateConferenceResponseFlag = false;
    int32_t ret = g_rilInterface->SeparateConference(SLOTID_1, GetSerialId(), 1, 0);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_separateConferenceResponseFlag);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_SEPARATE_CONFERENCE));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SeparateConferenceResponse_0200
 * @tc.name  : testV1SeparateConferenceResponse002
 * @tc.desc  : test slot2 SeparateConferenceResponse is triggered
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SeparateConferenceResponse002, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    g_separateConferenceResponseFlag = false;
    int32_t ret = g_rilInterface->SeparateConference(SLOTID_2, GetSerialId(), 1, 0);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_separateConferenceResponseFlag);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_SEPARATE_CONFERENCE));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SeparateConferenceResponse_0300
 * @tc.name  : testV1SeparateConferenceResponse003
 * @tc.desc  : test slot1 SeparateConferenceResponse is not triggered
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SeparateConferenceResponse003, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    g_separateConferenceResponseFlag = false;
    int32_t ret = g_rilInterface->SeparateConference(SLOTID_1, -1, 1, 0);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
    EXPECT_NE(true, g_separateConferenceResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SeparateConferenceResponse_0400
 * @tc.name  : testV1SeparateConferenceResponse004
 * @tc.desc  : test slot2 SeparateConferenceResponse is not triggered
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SeparateConferenceResponse004, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    g_separateConferenceResponseFlag = false;
    int32_t ret = g_rilInterface->SeparateConference(SLOTID_2, -1, 1, 0);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
    EXPECT_NE(true, g_separateConferenceResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1CallSupplementResponse_0100
 * @tc.name  : testV1CallSupplementResponse001
 * @tc.desc  : test slot1 CallSupplementResponse is triggered
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1CallSupplementResponse001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    g_callSupplementResponseFlag = false;
    int32_t ret = g_rilInterface->CallSupplement(SLOTID_1, GetSerialId(), 1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_callSupplementResponseFlag);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_CALL_SUPPLEMENT));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1CallSupplementResponse_0200
 * @tc.name  : testV1CallSupplementResponse002
 * @tc.desc  : test slot2 CallSupplementResponse is triggered
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1CallSupplementResponse002, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    g_callSupplementResponseFlag = false;
    int32_t ret = g_rilInterface->CallSupplement(SLOTID_2, GetSerialId(), 1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_callSupplementResponseFlag);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_CALL_SUPPLEMENT));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1CallSupplementResponse_0300
 * @tc.name  : testV1CallSupplementResponse003
 * @tc.desc  : test slot1 CallSupplementResponse is not triggered
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1CallSupplementResponse003, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    g_callSupplementResponseFlag = false;
    int32_t ret = g_rilInterface->CallSupplement(SLOTID_1, -1, 1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
    EXPECT_NE(true, g_callSupplementResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1CallSupplementResponse_0400
 * @tc.name  : testV1CallSupplementResponse004
 * @tc.desc  : test slot2 CallSupplementResponse is not triggered
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1CallSupplementResponse004, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    g_callSupplementResponseFlag = false;
    int32_t ret = g_rilInterface->CallSupplement(SLOTID_2, -1, 1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
    EXPECT_NE(true, g_callSupplementResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetCallWaitingResponse_0100
 * @tc.name  : testV1GetCallWaitingResponse001
 * @tc.desc  : test slot1 GetCallWaitingResponse is triggered
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetCallWaitingResponse001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    g_getCallWaitingResponseFlag = false;
    int32_t ret = g_rilInterface->GetCallWaiting(SLOTID_1, GetSerialId());
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_getCallWaitingResponseFlag);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_GET_CALL_WAITING));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetCallWaitingResponse_0200
 * @tc.name  : testV1GetCallWaitingResponse002
 * @tc.desc  : test slot2 GetCallWaitingResponse is triggered
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetCallWaitingResponse002, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    g_getCallWaitingResponseFlag = false;
    int32_t ret = g_rilInterface->GetCallWaiting(SLOTID_2, GetSerialId());
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_getCallWaitingResponseFlag);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_GET_CALL_WAITING));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetCallWaitingResponse_0300
 * @tc.name  : testV1GetCallWaitingResponse003
 * @tc.desc  : test slot1 GetCallWaitingResponse is not triggered
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetCallWaitingResponse003, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    g_getCallWaitingResponseFlag = false;
    int32_t ret = g_rilInterface->GetCallWaiting(SLOTID_1, -1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_getCallWaitingResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetCallWaitingResponse_0400
 * @tc.name  : testV1GetCallWaitingResponse004
 * @tc.desc  : test slot2 GetCallWaitingResponse is not triggered
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetCallWaitingResponse004, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    g_getCallWaitingResponseFlag = false;
    int32_t ret = g_rilInterface->GetCallWaiting(SLOTID_2, -1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
    EXPECT_NE(true, g_getCallWaitingResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetCallWaitingResponse_0100
 * @tc.name  : testV1SetCallWaitingResponse001
 * @tc.desc  : test slot1 SetCallWaitingResponse is triggered
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetCallWaitingResponse001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    g_setCallWaitingResponseFlag = false;
    int32_t ret = g_rilInterface->SetCallWaiting(SLOTID_1, GetSerialId(), 0);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_setCallWaitingResponseFlag);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_SET_CALL_WAITING));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetCallWaitingResponse_0200
 * @tc.name  : testV1SetCallWaitingResponse002
 * @tc.desc  : test slot2 SetCallWaitingResponse is triggered
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetCallWaitingResponse002, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    g_setCallWaitingResponseFlag = false;
    int32_t ret = g_rilInterface->SetCallWaiting(SLOTID_2, GetSerialId(), 0);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_setCallWaitingResponseFlag);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_SET_CALL_WAITING));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetCallWaitingResponse_0300
 * @tc.name  : testV1SetCallWaitingResponse003
 * @tc.desc  : test slot1 SetCallWaitingResponse is not triggered
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetCallWaitingResponse003, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    g_setCallWaitingResponseFlag = false;
    int32_t ret = g_rilInterface->SetCallWaiting(SLOTID_1, -1, 0);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
    EXPECT_NE(true, g_setCallWaitingResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetCallWaitingResponse_0400
 * @tc.name  : testV1SetCallWaitingResponse004
 * @tc.desc  : test slot2 SetCallWaitingResponse is not triggered
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetCallWaitingResponse004, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    g_setCallWaitingResponseFlag = false;
    int32_t ret = g_rilInterface->SetCallWaiting(SLOTID_2, -1, 0);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
    EXPECT_NE(true, g_setCallWaitingResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetUssdResponse_0100
 * @tc.name  : testV1GetUssdResponse001
 * @tc.desc  : test slot1 GetUssdResponse is triggered
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetUssdResponse001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    g_getUssdResponseFlag = false;
    int32_t ret = g_rilInterface->GetUssd(SLOTID_1, GetSerialId());
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_getUssdResponseFlag);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_GET_USSD));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetUssdResponse_0200
 * @tc.name  : testV1GetUssdResponse002
 * @tc.desc  : test slot2 GetUssdResponse is triggered
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetUssdResponse002, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    g_getUssdResponseFlag = false;
    int32_t ret = g_rilInterface->GetUssd(SLOTID_2, GetSerialId());
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_getUssdResponseFlag);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_GET_USSD));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetUssdResponse_0300
 * @tc.name  : testV1GetUssdResponse003
 * @tc.desc  : test slot1 GetUssdResponse is not triggered
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetUssdResponse003, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    g_getUssdResponseFlag = false;
    int32_t ret = g_rilInterface->GetUssd(SLOTID_1, -1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
    EXPECT_NE(true, g_getUssdResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetUssdResponse_0400
 * @tc.name  : testV1GetUssdResponse004
 * @tc.desc  : test slot2 GetUssdResponse is not triggered
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetUssdResponse004, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    g_getUssdResponseFlag = false;
    int32_t ret = g_rilInterface->GetUssd(SLOTID_2, -1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
    EXPECT_NE(true, g_getUssdResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetMuteResponse_0100
 * @tc.name  : testV1SetMuteResponse001
 * @tc.desc  : test slot1 SetMuteResponse is triggered
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetMuteResponse001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    g_setMuteResponseFlag = false;
    int32_t ret = g_rilInterface->SetMute(SLOTID_1, GetSerialId(), 1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_setMuteResponseFlag);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_SET_MUTE));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetMuteResponse_0200
 * @tc.name  : testV1SetMuteResponse002
 * @tc.desc  : test slot2 SetMuteResponse is triggered
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetMuteResponse002, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    g_setMuteResponseFlag = false;
    int32_t ret = g_rilInterface->SetMute(SLOTID_2, GetSerialId(), 1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_setMuteResponseFlag);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_SET_MUTE));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetMuteResponse_0300
 * @tc.name  : testV1SetMuteResponse003
 * @tc.desc  : test slot1 SetMuteResponse is not triggered
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetMuteResponse003, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    g_setMuteResponseFlag = false;
    int32_t ret = g_rilInterface->SetMute(SLOTID_1, -1, 1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
    EXPECT_NE(true, g_setMuteResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetMuteResponse_0400
 * @tc.name  : testV1SetMuteResponse004
 * @tc.desc  : test slot2 SetMuteResponse is not triggered
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetMuteResponse004, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    g_setMuteResponseFlag = false;
    int32_t ret = g_rilInterface->SetMute(SLOTID_2, -1, 1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
    EXPECT_NE(true, g_setMuteResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetMuteResponse_0100
 * @tc.name  : testV1GetMuteResponse001
 * @tc.desc  : test slot1 GetMuteResponse is triggered
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetMuteResponse001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    g_getMuteResponseFlag = false;
    int32_t ret = g_rilInterface->GetMute(SLOTID_1, GetSerialId());
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_getMuteResponseFlag);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_GET_MUTE));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetMuteResponse_0200
 * @tc.name  : testV1GetMuteResponse002
 * @tc.desc  : test slot2 GetMuteResponse is triggered
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetMuteResponse002, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    g_getMuteResponseFlag = false;
    int32_t ret = g_rilInterface->GetMute(SLOTID_2, GetSerialId());
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_getMuteResponseFlag);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_GET_MUTE));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetMuteResponse_0300
 * @tc.name  : testV1GetMuteResponse003
 * @tc.desc  : test slot1 GetMuteResponse is not triggered
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetMuteResponse003, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    g_getMuteResponseFlag = false;
    int32_t ret = g_rilInterface->GetMute(SLOTID_1, -1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
    EXPECT_NE(true, g_getMuteResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetMuteResponse_0400
 * @tc.name  : testV1GetMuteResponse004
 * @tc.desc  : test slot2 GetMuteResponse is not triggered
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetMuteResponse004, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    g_getMuteResponseFlag = false;
    int32_t ret = g_rilInterface->GetMute(SLOTID_2, -1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
    EXPECT_NE(true, g_getMuteResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetDataPermittedResponse_0100
 * @tc.name  : testV1SetDataPermittedResponse001
 * @tc.desc  : test slot1 SetDataPermittedResponse is triggered
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetDataPermittedResponse001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    g_setDataPermittedResponseFlag = false;
    int32_t ret = g_rilInterface->SetDataPermitted(SLOTID_1, GetSerialId(), 1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_setDataPermittedResponseFlag);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_DATA_SET_DATA_PERMITTED));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetDataPermittedResponse_0200
 * @tc.name  : testV1SetDataPermittedResponse002
 * @tc.desc  : test slot2 SetDataPermittedResponse is triggered
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetDataPermittedResponse002, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    g_setDataPermittedResponseFlag = false;
    int32_t ret = g_rilInterface->SetDataPermitted(SLOTID_2, GetSerialId(), 1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_setDataPermittedResponseFlag);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_DATA_SET_DATA_PERMITTED));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetDataPermittedResponse_0300
 * @tc.name  : testV1SetDataPermittedResponse003
 * @tc.desc  : test slot1 SetDataPermittedResponse is not triggered
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetDataPermittedResponse003, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    g_setDataPermittedResponseFlag = false;
    int32_t ret = g_rilInterface->SetDataPermitted(SLOTID_1, -1, 1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
    EXPECT_NE(true, g_setDataPermittedResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetDataPermittedResponse_0400
 * @tc.name  : testV1SetDataPermittedResponse004
 * @tc.desc  : test slot2 SetDataPermittedResponse is not triggered
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetDataPermittedResponse004, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    g_setDataPermittedResponseFlag = false;
    int32_t ret = g_rilInterface->SetDataPermitted(SLOTID_2, -1, 1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
    EXPECT_NE(true, g_setDataPermittedResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1ShutDownResponse_0100
 * @tc.name  : testV1ShutDownResponse001
 * @tc.desc  : test slot1 ShutDownResponse is triggered
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1ShutDownResponse001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    g_shutDownResponseFlag = false;
    int32_t ret = g_rilInterface->ShutDown(SLOTID_1, GetSerialId());
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_shutDownResponseFlag);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_MODEM_SHUT_DOWN));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1ShutDownResponse_0200
 * @tc.name  : testV1ShutDownResponse002
 * @tc.desc  : test slot2 ShutDownResponse is triggered
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1ShutDownResponse002, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    g_shutDownResponseFlag = false;
    int32_t ret = g_rilInterface->ShutDown(SLOTID_2, GetSerialId());
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_shutDownResponseFlag);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_MODEM_SHUT_DOWN));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1ShutDownResponse_0300
 * @tc.name  : testV1ShutDownResponse003
 * @tc.desc  : test slot1 ShutDownResponse is not triggered
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1ShutDownResponse003, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    g_shutDownResponseFlag = false;
    int32_t ret = g_rilInterface->ShutDown(SLOTID_1, -1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
    EXPECT_NE(true, g_shutDownResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1ShutDownResponse_0400
 * @tc.name  : testV1ShutDownResponse004
 * @tc.desc  : test slot2 ShutDownResponse is not triggered
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1ShutDownResponse004, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    g_shutDownResponseFlag = false;
    int32_t ret = g_rilInterface->ShutDown(SLOTID_2, -1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
    EXPECT_NE(true, g_shutDownResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetRadioStateResponse_0100
 * @tc.name  : testV1SetRadioStateResponse001
 * @tc.desc  : test slot1 SetRadioStateResponse is triggered
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetRadioStateResponse001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    g_setRadioStateResponseFlag = false;
    int32_t ret = g_rilInterface->SetRadioState(SLOTID_1, GetSerialId(), 1, 0);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_setRadioStateResponseFlag);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_MODEM_SET_RADIO_STATUS));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetRadioStateResponse_0200
 * @tc.name  : testV1SetRadioStateResponse002
 * @tc.desc  : test slot2 SetRadioStateResponse is triggered
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetRadioStateResponse002, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    g_setRadioStateResponseFlag = false;
    int32_t ret = g_rilInterface->SetRadioState(SLOTID_2, GetSerialId(), 1, 0);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_setRadioStateResponseFlag);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_MODEM_SET_RADIO_STATUS));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetRadioStateResponse_0300
 * @tc.name  : testV1SetRadioStateResponse003
 * @tc.desc  : test slot1 SetRadioStateResponse is not triggered
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetRadioStateResponse003, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    g_setRadioStateResponseFlag = false;
    int32_t ret = g_rilInterface->SetRadioState(SLOTID_1, -1, 1, 0);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
    EXPECT_NE(true, g_setRadioStateResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetRadioStateResponse_0400
 * @tc.name  : testV1SetRadioStateResponse004
 * @tc.desc  : test slot2 SetRadioStateResponse is not triggered
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetRadioStateResponse004, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    g_setRadioStateResponseFlag = false;
    int32_t ret = g_rilInterface->SetRadioState(SLOTID_2, -1, 1, 0);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
    EXPECT_NE(true, g_setRadioStateResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetRadioStateResponse_0100
 * @tc.name  : testV1GetRadioStateResponse001
 * @tc.desc  : test slot1 GetRadioStateResponse is triggered
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetRadioStateResponse001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    g_getRadioStateResponseFlag = false;
    int32_t ret = g_rilInterface->GetRadioState(SLOTID_1, GetSerialId());
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_getRadioStateResponseFlag);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_MODEM_GET_RADIO_STATUS));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetRadioStateResponse_0200
 * @tc.name  : testV1GetRadioStateResponse002
 * @tc.desc  : test slot2 GetRadioStateResponse is triggered
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetRadioStateResponse002, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    g_getRadioStateResponseFlag = false;
    int32_t ret = g_rilInterface->GetRadioState(SLOTID_2, GetSerialId());
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_getRadioStateResponseFlag);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_MODEM_GET_RADIO_STATUS));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetRadioStateResponse_0300
 * @tc.name  : testV1GetRadioStateResponse003
 * @tc.desc  : test slot1 GetRadioStateResponse is not triggered
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetRadioStateResponse003, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    g_getRadioStateResponseFlag = false;
    int32_t ret = g_rilInterface->GetRadioState(SLOTID_1, -1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
    EXPECT_NE(true, g_getRadioStateResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetRadioStateResponse_0400
 * @tc.name  : testV1GetRadioStateResponse004
 * @tc.desc  : test slot2 GetRadioStateResponse is not triggered
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetRadioStateResponse004, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    g_getRadioStateResponseFlag = false;
    int32_t ret = g_rilInterface->GetRadioState(SLOTID_2, -1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
    EXPECT_NE(true, g_getRadioStateResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetImeiResponse_0100
 * @tc.name  : testV1GetImeiResponse001
 * @tc.desc  : test slot1 GetImeiResponse is triggered
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetImeiResponse001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    g_getImeiResponseFlag = false;
    int32_t ret = g_rilInterface->GetImei(SLOTID_1, GetSerialId());
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_getImeiResponseFlag);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_MODEM_GET_IMEI));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetImeiResponse_0200
 * @tc.name  : testV1GetImeiResponse002
 * @tc.desc  : test slot2 GetImeiResponse is triggered
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetImeiResponse002, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    g_getImeiResponseFlag = false;
    int32_t ret = g_rilInterface->GetImei(SLOTID_2, GetSerialId());
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_getImeiResponseFlag);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_MODEM_GET_IMEI));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetImeiResponse_0300
 * @tc.name  : testV1GetImeiResponse003
 * @tc.desc  : test slot1 GetImeiResponse is not triggered
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetImeiResponse003, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    g_getImeiResponseFlag = false;
    int32_t ret = g_rilInterface->GetImei(SLOTID_1, -1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
    EXPECT_NE(true, g_getImeiResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetImeiResponse_0400
 * @tc.name  : testV1GetImeiResponse004
 * @tc.desc  : test slot2 GetImeiResponse is not triggered
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetImeiResponse004, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    g_getImeiResponseFlag = false;
    int32_t ret = g_rilInterface->GetImei(SLOTID_2, GetSerialId());
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
    EXPECT_NE(true, g_getImeiResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetMeidResponse_0100
 * @tc.name  : testV1GetMeidResponse001
 * @tc.desc  : test slot1 GetMeidResponse is triggered
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetMeidResponse001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    g_getMeidResponseFlag = false;
    int32_t ret = g_rilInterface->GetMeid(SLOTID_1, GetSerialId());
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_getMeidResponseFlag);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_MODEM_GET_MEID));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetMeidResponse_0200
 * @tc.name  : testV1GetMeidResponse002
 * @tc.desc  : test slot2 GetMeidResponse is triggered
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetMeidResponse002, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    g_getMeidResponseFlag = false;
    int32_t ret = g_rilInterface->GetMeid(SLOTID_2, GetSerialId());
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_getMeidResponseFlag);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_MODEM_GET_MEID));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetMeidResponse_0300
 * @tc.name  : testV1GetMeidResponse003
 * @tc.desc  : test slot1 GetMeidResponse is not triggered
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetMeidResponse003, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    g_getMeidResponseFlag = false;
    int32_t ret = g_rilInterface->GetMeid(SLOTID_1, -1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
    EXPECT_NE(true, g_getMeidResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetMeidResponse_0400
 * @tc.name  : testV1GetMeidResponse004
 * @tc.desc  : test slot2 GetMeidResponse is not triggered
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetMeidResponse004, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    g_getMeidResponseFlag = false;
    int32_t ret = g_rilInterface->GetMeid(SLOTID_2, -1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
    EXPECT_NE(true, g_getMeidResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetBasebandVersionResponse_0100
 * @tc.name  : testV1GetBasebandVersionResponse001
 * @tc.desc  : test slot1 GetBasebandVersionResponse is triggered
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetBasebandVersionResponse001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    g_getBasebandVersionResponseFlag = false;
    int32_t ret = g_rilInterface->GetBasebandVersion(SLOTID_1, GetSerialId());
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_getBasebandVersionResponseFlag);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_MODEM_GET_BASEBAND_VERSION));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetBasebandVersionResponse_0200
 * @tc.name  : testV1GetBasebandVersionResponse002
 * @tc.desc  : test slot2 GetBasebandVersionResponse is triggered
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetBasebandVersionResponse002, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    g_getBasebandVersionResponseFlag = false;
    int32_t ret = g_rilInterface->GetBasebandVersion(SLOTID_2, GetSerialId());
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_getBasebandVersionResponseFlag);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_MODEM_GET_BASEBAND_VERSION));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetBasebandVersionResponse_0300
 * @tc.name  : testV1GetBasebandVersionResponse003
 * @tc.desc  : test slot1 GetBasebandVersionResponse is not triggered
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetBasebandVersionResponse003, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    g_getBasebandVersionResponseFlag = false;
    int32_t ret = g_rilInterface->GetBasebandVersion(SLOTID_1, -1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
    EXPECT_NE(true, g_getBasebandVersionResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetBasebandVersionResponse_0400
 * @tc.name  : testV1GetBasebandVersionResponse004
 * @tc.desc  : test slot2 GetBasebandVersionResponse is not triggered
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetBasebandVersionResponse004, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    g_getBasebandVersionResponseFlag = false;
    int32_t ret = g_rilInterface->GetBasebandVersion(SLOTID_2, -1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
    EXPECT_NE(true, g_getBasebandVersionResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetImsiResponse_0100
 * @tc.name  : testV1GetImsiResponse001
 * @tc.desc  : test slot1 GetImsiResponse is triggered
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetImsiResponse001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    g_getImsiResponseFlag = false;
    int32_t ret = g_rilInterface->GetImsi(SLOTID_1, GetSerialId());
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_getImsiResponseFlag);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_GET_IMSI));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetImsiResponse_0200
 * @tc.name  : testV1GetImsiResponse002
 * @tc.desc  : test slot2 GetImsiResponse is triggered
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetImsiResponse002, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    g_getImsiResponseFlag = false;
    int32_t ret = g_rilInterface->GetImsi(SLOTID_2, GetSerialId());
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_getImsiResponseFlag);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_GET_IMSI));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetImsiResponse_0300
 * @tc.name  : testV1GetImsiResponse003
 * @tc.desc  : test slot1 GetImsiResponse is not triggered
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetImsiResponse003, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    g_getImsiResponseFlag = false;
    int32_t ret = g_rilInterface->GetImsi(SLOTID_1, -1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
    EXPECT_NE(true, g_getImsiResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetImsiResponse_0400
 * @tc.name  : testV1GetImsiResponse004
 * @tc.desc  : test slot2 GetImsiResponse is not triggered
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetImsiResponse004, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    g_getImsiResponseFlag = false;
    int32_t ret = g_rilInterface->GetImsi(SLOTID_2, -1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
    EXPECT_NE(true, g_getImsiResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetActiveSimResponse_0100
 * @tc.name  : testV1SetActiveSimResponse001
 * @tc.desc  : test slot1 SetActiveSimResponse is triggered
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetActiveSimResponse001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    g_setActiveSimResponseFlag = false;
    int32_t ret = g_rilInterface->SetActiveSim(SLOTID_1, GetSerialId(), 1, 1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_setActiveSimResponseFlag);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_SET_ACTIVE_SIM));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetActiveSimResponse_0200
 * @tc.name  : testV1SetActiveSimResponse002
 * @tc.desc  : test slot2 SetActiveSimResponse is triggered
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetActiveSimResponse002, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    g_setActiveSimResponseFlag = false;
    int32_t ret = g_rilInterface->SetActiveSim(SLOTID_2, GetSerialId(), 1, 1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_setActiveSimResponseFlag);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_SET_ACTIVE_SIM));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetActiveSimResponse_0300
 * @tc.name  : testV1SetActiveSimResponse003
 * @tc.desc  : test slot1 SetActiveSimResponse is not triggered
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetActiveSimResponse003, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    g_setActiveSimResponseFlag = false;
    int32_t ret = g_rilInterface->SetActiveSim(SLOTID_1, -1, 1, 1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
    EXPECT_NE(true, g_setActiveSimResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetActiveSimResponse_0400
 * @tc.name  : testV1SetActiveSimResponse004
 * @tc.desc  : test slot2 SetActiveSimResponse is not triggered
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetActiveSimResponse004, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    g_setActiveSimResponseFlag = false;
    int32_t ret = g_rilInterface->SetActiveSim(SLOTID_2, -1, 1, 1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
    EXPECT_NE(true, g_setActiveSimResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1AddSimMessage_0100
 * @tc.name: testV1AddSimMessage001
 * @tc.desc: Call function V1 AddSimMessage, stability test
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1AddSimMessage001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = 0;
    int32_t ret1 = 0;
    for (int i = 0; i < 100; i++) {
        SmsMessageIOInfo msgIoInfo;
        msgIoInfo.smscPdu = TEST_SMSC_PDU;
        msgIoInfo.pdu = TEST_STORAGE_PDU;
        msgIoInfo.state = static_cast<int32_t>(SimMessageStatus::SIM_MESSAGE_STATUS_SENT);
        msgIoInfo.index = 100;
        ret = g_rilInterface->AddSimMessage(SLOTID_1, 100, msgIoInfo);
        EXPECT_EQ(SUCCESS, ret);

        ret1 = g_rilInterface->DelSimMessage(SLOTID_1, 100, msgIoInfo.index);
        EXPECT_EQ(SUCCESS, ret1);
    }
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1AddSimMessage_0200
 * @tc.name: testV1AddSimMessage002
 * @tc.desc: Call function V1 AddSimMessage, slotId is 0, pdu is ""
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1AddSimMessage002, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SmsMessageIOInfo msgIoInfo;
    msgIoInfo.smscPdu = TEST_SMSC_PDU;
    msgIoInfo.pdu = "";
    msgIoInfo.state = static_cast<int32_t>(SimMessageStatus::SIM_MESSAGE_STATUS_SENT);
    msgIoInfo.index = 100;
    int32_t ret = g_rilInterface->AddSimMessage(SLOTID_1, 100, msgIoInfo);
    EXPECT_NE(SUCCESS, ret);

    int32_t ret1 = g_rilInterface->DelSimMessage(SLOTID_1, 100, msgIoInfo.index);
    EXPECT_NE(SUCCESS, ret1);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1AddSimMessage_0300
 * @tc.name: testV1AddSimMessage003
 * @tc.desc: Call function V1 AddSimMessage, slotId is 0, smscPdu is "!&#"
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1AddSimMessage003, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SmsMessageIOInfo msgIoInfo;
    msgIoInfo.smscPdu = "!&#";
    msgIoInfo.pdu = TEST_STORAGE_PDU;
    msgIoInfo.state = static_cast<int32_t>(SimMessageStatus::SIM_MESSAGE_STATUS_SENT);
    msgIoInfo.index = 100;
    int32_t ret = g_rilInterface->AddSimMessage(SLOTID_1, 100, msgIoInfo);
    EXPECT_EQ(SUCCESS, ret);

    int32_t ret1 = g_rilInterface->DelSimMessage(SLOTID_1, 100, msgIoInfo.index);
    EXPECT_EQ(SUCCESS, ret1);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1AddSimMessage_0400
 * @tc.name: testV1AddSimMessage004
 * @tc.desc: Call function V1 AddSimMessage, slotId is 0, pdu is "!&#"
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1AddSimMessage004, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SmsMessageIOInfo msgIoInfo;
    msgIoInfo.smscPdu = TEST_SMSC_PDU;
    msgIoInfo.pdu = "!&#";
    msgIoInfo.state = static_cast<int32_t>(SimMessageStatus::SIM_MESSAGE_STATUS_SENT);
    msgIoInfo.index = 100;
    int32_t ret = g_rilInterface->AddSimMessage(SLOTID_1, 100, msgIoInfo);
    EXPECT_EQ(SUCCESS, ret);

    int32_t ret1 = g_rilInterface->DelSimMessage(SLOTID_1, 100, msgIoInfo.index);
    EXPECT_EQ(SUCCESS, ret1);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1AddSimMessage_0500
 * @tc.name: testV1AddSimMessage005
 * @tc.desc: Call function V1 AddSimMessage, slotId is 0, serialId is -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1AddSimMessage005, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SmsMessageIOInfo msgIoInfo;
    msgIoInfo.smscPdu = TEST_SMSC_PDU;
    msgIoInfo.pdu = TEST_STORAGE_PDU;
    msgIoInfo.state = static_cast<int32_t>(SimMessageStatus::SIM_MESSAGE_STATUS_SENT);
    msgIoInfo.index = 100;
    int32_t ret = g_rilInterface->AddSimMessage(SLOTID_1, -1, msgIoInfo);
    EXPECT_EQ(SUCCESS, ret);

    int32_t ret1 = g_rilInterface->DelSimMessage(SLOTID_1, -1, msgIoInfo.index);
    EXPECT_EQ(SUCCESS, ret1);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1AddSimMessage_0600
 * @tc.name: testV1AddSimMessage006
 * @tc.desc: Call function V1 AddSimMessage, slotId is 0, serialId is 0
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1AddSimMessage006, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SmsMessageIOInfo msgIoInfo;
    msgIoInfo.smscPdu = TEST_SMSC_PDU;
    msgIoInfo.pdu = TEST_STORAGE_PDU;
    msgIoInfo.state = static_cast<int32_t>(SimMessageStatus::SIM_MESSAGE_STATUS_SENT);
    msgIoInfo.index = 100;
    int32_t ret = g_rilInterface->AddSimMessage(SLOTID_1, 0, msgIoInfo);
    EXPECT_EQ(SUCCESS, ret);

    int32_t ret1 = g_rilInterface->DelSimMessage(SLOTID_1, 0, msgIoInfo.index);
    EXPECT_EQ(SUCCESS, ret1);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1AddSimMessage_0700
 * @tc.name: testV1AddSimMessage007
 * @tc.desc: Call function V1 AddSimMessage, slotId is 1, serialId is 1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1AddSimMessage007, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    SmsMessageIOInfo msgIoInfo;
    msgIoInfo.smscPdu = TEST_SMSC_PDU;
    msgIoInfo.pdu = TEST_STORAGE_PDU;
    msgIoInfo.state = static_cast<int32_t>(SimMessageStatus::SIM_MESSAGE_STATUS_SENT);
    msgIoInfo.index = 100;
    int32_t ret = g_rilInterface->AddSimMessage(SLOTID_2, 1, msgIoInfo);
    EXPECT_EQ(SUCCESS, ret);

    int32_t ret1 = g_rilInterface->DelSimMessage(SLOTID_2, 1, msgIoInfo.index);
    EXPECT_EQ(SUCCESS, ret1);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1AddSimMessage_0800
 * @tc.name: testV1AddSimMessage008
 * @tc.desc: Call function V1 AddSimMessage, slotId is 1, serialId is 2
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1AddSimMessage008, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    SmsMessageIOInfo msgIoInfo;
    msgIoInfo.smscPdu = TEST_SMSC_PDU;
    msgIoInfo.pdu = TEST_STORAGE_PDU;
    msgIoInfo.state = static_cast<int32_t>(SimMessageStatus::SIM_MESSAGE_STATUS_SENT);
    msgIoInfo.index = 100;
    int32_t ret = g_rilInterface->AddSimMessage(SLOTID_2, 2, msgIoInfo);
    EXPECT_EQ(SUCCESS, ret);

    int32_t ret1 = g_rilInterface->DelSimMessage(SLOTID_2, 2, msgIoInfo.index);
    EXPECT_EQ(SUCCESS, ret1);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1AddSimMessage_0900
 * @tc.name: testV1AddSimMessage009
 * @tc.desc: Call function V1 AddSimMessage, slotId is 1, serialId is 3
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1AddSimMessage009, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    SmsMessageIOInfo msgIoInfo;
    msgIoInfo.smscPdu = TEST_SMSC_PDU;
    msgIoInfo.pdu = TEST_STORAGE_PDU;
    msgIoInfo.state = static_cast<int32_t>(SimMessageStatus::SIM_MESSAGE_STATUS_SENT);
    msgIoInfo.index = 100;
    int32_t ret = g_rilInterface->AddSimMessage(SLOTID_2, 3, msgIoInfo);
    EXPECT_EQ(SUCCESS, ret);

    int32_t ret1 = g_rilInterface->DelSimMessage(SLOTID_2, 3, msgIoInfo.index);
    EXPECT_EQ(SUCCESS, ret1);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1AddSimMessage_1000
 * @tc.name: testV1AddSimMessage010
 * @tc.desc: Call function V1 AddSimMessage, slotId is 1, serialId is -2147483648
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1AddSimMessage010, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    SmsMessageIOInfo msgIoInfo;
    msgIoInfo.smscPdu = TEST_SMSC_PDU;
    msgIoInfo.pdu = TEST_STORAGE_PDU;
    msgIoInfo.state = static_cast<int32_t>(SimMessageStatus::SIM_MESSAGE_STATUS_SENT);
    msgIoInfo.index = 100;
    int32_t ret = g_rilInterface->AddSimMessage(SLOTID_2, -2147483648, msgIoInfo);
    EXPECT_EQ(SUCCESS, ret);

    int32_t ret1 = g_rilInterface->DelSimMessage(SLOTID_2, -2147483648, msgIoInfo.index);
    EXPECT_EQ(SUCCESS, ret1);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1AddSimMessage_1100
 * @tc.name: testV1AddSimMessage011
 * @tc.desc: Call function V1 AddSimMessage, slotId is 1, serialId is 2147483647
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1AddSimMessage011, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    SmsMessageIOInfo msgIoInfo;
    msgIoInfo.smscPdu = TEST_SMSC_PDU;
    msgIoInfo.pdu = TEST_STORAGE_PDU;
    msgIoInfo.state = static_cast<int32_t>(SimMessageStatus::SIM_MESSAGE_STATUS_SENT);
    msgIoInfo.index = 100;
    int32_t ret = g_rilInterface->AddSimMessage(SLOTID_2, 2147483647, msgIoInfo);
    EXPECT_EQ(SUCCESS, ret);

    int32_t ret1 = g_rilInterface->DelSimMessage(SLOTID_2, 2147483647, msgIoInfo.index);
    EXPECT_EQ(SUCCESS, ret1);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1AddSimMessage_1200
 * @tc.name: testV1AddSimMessage012
 * @tc.desc: Call function V1 AddSimMessage, slotId is 0, serial is -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1AddSimMessage012, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SmsMessageIOInfo msgIoInfo;
    msgIoInfo.serial = -1;
    msgIoInfo.smscPdu = TEST_SMSC_PDU;
    msgIoInfo.pdu = TEST_STORAGE_PDU;
    msgIoInfo.state = static_cast<int32_t>(SimMessageStatus::SIM_MESSAGE_STATUS_SENT);
    msgIoInfo.index = 100;
    int32_t ret = g_rilInterface->AddSimMessage(SLOTID_1, 100, msgIoInfo);
    EXPECT_EQ(SUCCESS, ret);

    int32_t ret1 = g_rilInterface->DelSimMessage(SLOTID_1, 100, msgIoInfo.index);
    EXPECT_EQ(SUCCESS, ret1);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1AddSimMessage_1300
 * @tc.name: testV1AddSimMessage013
 * @tc.desc: Call function V1 AddSimMessage, slotId is 0, serial is 0
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1AddSimMessage013, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SmsMessageIOInfo msgIoInfo;
    msgIoInfo.serial = 0;
    msgIoInfo.smscPdu = TEST_SMSC_PDU;
    msgIoInfo.pdu = TEST_STORAGE_PDU;
    msgIoInfo.state = static_cast<int32_t>(SimMessageStatus::SIM_MESSAGE_STATUS_SENT);
    msgIoInfo.index = 100;
    int32_t ret = g_rilInterface->AddSimMessage(SLOTID_1, 100, msgIoInfo);
    EXPECT_EQ(SUCCESS, ret);

    int32_t ret1 = g_rilInterface->DelSimMessage(SLOTID_1, 100, msgIoInfo.index);
    EXPECT_EQ(SUCCESS, ret1);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1AddSimMessage_1400
 * @tc.name: testV1AddSimMessage014
 * @tc.desc: Call function V1 AddSimMessage, slotId is 1, serial is 1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1AddSimMessage014, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    SmsMessageIOInfo msgIoInfo;
    msgIoInfo.serial = 1;
    msgIoInfo.smscPdu = TEST_SMSC_PDU;
    msgIoInfo.pdu = TEST_STORAGE_PDU;
    msgIoInfo.state = static_cast<int32_t>(SimMessageStatus::SIM_MESSAGE_STATUS_SENT);
    msgIoInfo.index = 100;
    int32_t ret = g_rilInterface->AddSimMessage(SLOTID_2, 100, msgIoInfo);
    EXPECT_EQ(SUCCESS, ret);

    int32_t ret1 = g_rilInterface->DelSimMessage(SLOTID_2, 100, msgIoInfo.index);
    EXPECT_EQ(SUCCESS, ret1);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1AddSimMessage_1500
 * @tc.name: testV1AddSimMessage015
 * @tc.desc: Call function V1 AddSimMessage, slotId is 1, serial is 2
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1AddSimMessage015, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    SmsMessageIOInfo msgIoInfo;
    msgIoInfo.serial = 2;
    msgIoInfo.smscPdu = TEST_SMSC_PDU;
    msgIoInfo.pdu = TEST_STORAGE_PDU;
    msgIoInfo.state = static_cast<int32_t>(SimMessageStatus::SIM_MESSAGE_STATUS_SENT);
    msgIoInfo.index = 100;
    int32_t ret = g_rilInterface->AddSimMessage(SLOTID_2, 100, msgIoInfo);
    EXPECT_EQ(SUCCESS, ret);

    int32_t ret1 = g_rilInterface->DelSimMessage(SLOTID_2, 100, msgIoInfo.index);
    EXPECT_EQ(SUCCESS, ret1);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1AddSimMessage_1600
 * @tc.name: testV1AddSimMessage016
 * @tc.desc: Call function V1 AddSimMessage, slotId is 1, serial is 3
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1AddSimMessage016, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    SmsMessageIOInfo msgIoInfo;
    msgIoInfo.serial = 3;
    msgIoInfo.smscPdu = TEST_SMSC_PDU;
    msgIoInfo.pdu = TEST_STORAGE_PDU;
    msgIoInfo.state = static_cast<int32_t>(SimMessageStatus::SIM_MESSAGE_STATUS_SENT);
    msgIoInfo.index = 100;
    int32_t ret = g_rilInterface->AddSimMessage(SLOTID_2, 100, msgIoInfo);
    EXPECT_EQ(SUCCESS, ret);

    int32_t ret1 = g_rilInterface->DelSimMessage(SLOTID_2, 100, msgIoInfo.index);
    EXPECT_EQ(SUCCESS, ret1);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1AddSimMessage_1700
 * @tc.name: testV1AddSimMessage017
 * @tc.desc: Call function V1 AddSimMessage, slotId is 1, serial is -2147483648
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1AddSimMessage017, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    SmsMessageIOInfo msgIoInfo;
    msgIoInfo.serial = -2147483648;
    msgIoInfo.smscPdu = TEST_SMSC_PDU;
    msgIoInfo.pdu = TEST_STORAGE_PDU;
    msgIoInfo.state = static_cast<int32_t>(SimMessageStatus::SIM_MESSAGE_STATUS_SENT);
    msgIoInfo.index = 100;
    int32_t ret = g_rilInterface->AddSimMessage(SLOTID_2, 100, msgIoInfo);
    EXPECT_EQ(SUCCESS, ret);

    int32_t ret1 = g_rilInterface->DelSimMessage(SLOTID_2, 100, msgIoInfo.index);
    EXPECT_EQ(SUCCESS, ret1);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1AddSimMessage_1800
 * @tc.name: testV1AddSimMessage018
 * @tc.desc: Call function V1 AddSimMessage, slotId is 1, serial is 2147483647
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1AddSimMessage018, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    SmsMessageIOInfo msgIoInfo;
    msgIoInfo.serial = 2147483647;
    msgIoInfo.smscPdu = TEST_SMSC_PDU;
    msgIoInfo.pdu = TEST_STORAGE_PDU;
    msgIoInfo.state = static_cast<int32_t>(SimMessageStatus::SIM_MESSAGE_STATUS_SENT);
    msgIoInfo.index = 100;
    int32_t ret = g_rilInterface->AddSimMessage(SLOTID_2, 100, msgIoInfo);
    EXPECT_EQ(SUCCESS, ret);

    int32_t ret1 = g_rilInterface->DelSimMessage(SLOTID_2, 100, msgIoInfo.index);
    EXPECT_EQ(SUCCESS, ret1);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1AddSimMessage_1900
 * @tc.name: testV1AddSimMessage019
 * @tc.desc: Call function V1 AddSimMessage, slotId is 0, smscPdu is "abc"
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1AddSimMessage019, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SmsMessageIOInfo msgIoInfo;
    msgIoInfo.smscPdu = "abc";
    msgIoInfo.pdu = TEST_STORAGE_PDU;
    msgIoInfo.state = static_cast<int32_t>(SimMessageStatus::SIM_MESSAGE_STATUS_SENT);
    msgIoInfo.index = 100;
    int32_t ret = g_rilInterface->AddSimMessage(SLOTID_1, 100, msgIoInfo);
    EXPECT_EQ(SUCCESS, ret);

    int32_t ret1 = g_rilInterface->DelSimMessage(SLOTID_1, 100, msgIoInfo.index);
    EXPECT_EQ(SUCCESS, ret1);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1AddSimMessage_2000
 * @tc.name: testV1AddSimMessage020
 * @tc.desc: Call function V1 AddSimMessage, slotId is 0, smscPdu is "+-*%"
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1AddSimMessage020, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SmsMessageIOInfo msgIoInfo;
    msgIoInfo.smscPdu = "+-*%";
    msgIoInfo.pdu = TEST_STORAGE_PDU;
    msgIoInfo.state = static_cast<int32_t>(SimMessageStatus::SIM_MESSAGE_STATUS_SENT);
    msgIoInfo.index = 100;
    int32_t ret = g_rilInterface->AddSimMessage(SLOTID_1, 100, msgIoInfo);
    EXPECT_EQ(SUCCESS, ret);

    int32_t ret1 = g_rilInterface->DelSimMessage(SLOTID_1, 100, msgIoInfo.index);
    EXPECT_EQ(SUCCESS, ret1);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1AddSimMessage_2100
 * @tc.name: testV1AddSimMessage021
 * @tc.desc: Call function V1 AddSimMessage, slotId is 0, pdu is "abc"
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1AddSimMessage021, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SmsMessageIOInfo msgIoInfo;
    msgIoInfo.smscPdu = TEST_SMSC_PDU;
    msgIoInfo.pdu = "abc";
    msgIoInfo.state = static_cast<int32_t>(SimMessageStatus::SIM_MESSAGE_STATUS_SENT);
    msgIoInfo.index = 100;
    int32_t ret = g_rilInterface->AddSimMessage(SLOTID_1, 100, msgIoInfo);
    EXPECT_EQ(SUCCESS, ret);

    int32_t ret1 = g_rilInterface->DelSimMessage(SLOTID_1, 100, msgIoInfo.index);
    EXPECT_EQ(SUCCESS, ret1);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1AddSimMessage_2200
 * @tc.name: testV1AddSimMessage022
 * @tc.desc: Call function V1 AddSimMessage, slotId is 0, pdu is "+-*%"
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1AddSimMessage022, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SmsMessageIOInfo msgIoInfo;
    msgIoInfo.smscPdu = TEST_SMSC_PDU;
    msgIoInfo.pdu = "+-*%";
    msgIoInfo.state = static_cast<int32_t>(SimMessageStatus::SIM_MESSAGE_STATUS_SENT);
    msgIoInfo.index = 100;
    int32_t ret = g_rilInterface->AddSimMessage(SLOTID_1, 100, msgIoInfo);
    EXPECT_EQ(SUCCESS, ret);

    int32_t ret1 = g_rilInterface->DelSimMessage(SLOTID_1, 100, msgIoInfo.index);
    EXPECT_EQ(SUCCESS, ret1);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1AddSimMessage_2300
 * @tc.name: testV1AddSimMessage023
 * @tc.desc: Call function V1 AddSimMessage, slotId is 1, state is -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1AddSimMessage023, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    SmsMessageIOInfo msgIoInfo;
    msgIoInfo.smscPdu = TEST_SMSC_PDU;
    msgIoInfo.pdu = TEST_STORAGE_PDU;
    msgIoInfo.state = -1;
    msgIoInfo.index = 100;
    int32_t ret = g_rilInterface->AddSimMessage(SLOTID_2, 100, msgIoInfo);
    EXPECT_EQ(SUCCESS, ret);

    int32_t ret1 = g_rilInterface->DelSimMessage(SLOTID_2, 100, msgIoInfo.index);
    EXPECT_EQ(SUCCESS, ret1);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1AddSimMessage_2400
 * @tc.name: testV1AddSimMessage024
 * @tc.desc: Call function V1 AddSimMessage, slotId is 1, state is 0
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1AddSimMessage024, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    SmsMessageIOInfo msgIoInfo;
    msgIoInfo.smscPdu = TEST_SMSC_PDU;
    msgIoInfo.pdu = TEST_STORAGE_PDU;
    msgIoInfo.state = static_cast<int32_t>(SimMessageStatus::SIM_MESSAGE_STATUS_UNREAD);
    msgIoInfo.index = 100;
    int32_t ret = g_rilInterface->AddSimMessage(SLOTID_2, 100, msgIoInfo);
    EXPECT_EQ(SUCCESS, ret);

    int32_t ret1 = g_rilInterface->DelSimMessage(SLOTID_2, 100, msgIoInfo.index);
    EXPECT_EQ(SUCCESS, ret1);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1AddSimMessage_2500
 * @tc.name: testV1AddSimMessage025
 * @tc.desc: Call function V1 AddSimMessage, slotId is 0, state is 1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1AddSimMessage025, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SmsMessageIOInfo msgIoInfo;
    msgIoInfo.smscPdu = TEST_SMSC_PDU;
    msgIoInfo.pdu = TEST_STORAGE_PDU;
    msgIoInfo.state = static_cast<int32_t>(SimMessageStatus::SIM_MESSAGE_STATUS_READ);
    msgIoInfo.index = 100;
    int32_t ret = g_rilInterface->AddSimMessage(SLOTID_1, 100, msgIoInfo);
    EXPECT_EQ(SUCCESS, ret);

    int32_t ret1 = g_rilInterface->DelSimMessage(SLOTID_1, 100, msgIoInfo.index);
    EXPECT_EQ(SUCCESS, ret1);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1AddSimMessage_2600
 * @tc.name: testV1AddSimMessage026
 * @tc.desc: Call function V1 AddSimMessage, slotId is 0, state is 2
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1AddSimMessage026, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SmsMessageIOInfo msgIoInfo;
    msgIoInfo.smscPdu = TEST_SMSC_PDU;
    msgIoInfo.pdu = TEST_STORAGE_PDU;
    msgIoInfo.state = static_cast<int32_t>(SimMessageStatus::SIM_MESSAGE_STATUS_UNSENT);
    msgIoInfo.index = 100;
    int32_t ret = g_rilInterface->AddSimMessage(SLOTID_1, 100, msgIoInfo);
    EXPECT_EQ(SUCCESS, ret);

    int32_t ret1 = g_rilInterface->DelSimMessage(SLOTID_1, 100, msgIoInfo.index);
    EXPECT_EQ(SUCCESS, ret1);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1AddSimMessage_2700
 * @tc.name: testV1AddSimMessage027
 * @tc.desc: Call function V1 AddSimMessage, slotId is 1, state is -2147483648
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1AddSimMessage027, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    SmsMessageIOInfo msgIoInfo;
    msgIoInfo.smscPdu = TEST_SMSC_PDU;
    msgIoInfo.pdu = TEST_STORAGE_PDU;
    msgIoInfo.state = -2147483648;
    msgIoInfo.index = 100;
    int32_t ret = g_rilInterface->AddSimMessage(SLOTID_2, 100, msgIoInfo);
    EXPECT_EQ(SUCCESS, ret);

    int32_t ret1 = g_rilInterface->DelSimMessage(SLOTID_2, 100, msgIoInfo.index);
    EXPECT_EQ(SUCCESS, ret1);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1AddSimMessage_2800
 * @tc.name: testV1AddSimMessage028
 * @tc.desc: Call function V1 AddSimMessage, slotId is 1, state is 2147483647
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1AddSimMessage028, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    SmsMessageIOInfo msgIoInfo;
    msgIoInfo.smscPdu = TEST_SMSC_PDU;
    msgIoInfo.pdu = TEST_STORAGE_PDU;
    msgIoInfo.state = 2147483647;
    msgIoInfo.index = 100;
    int32_t ret = g_rilInterface->AddSimMessage(SLOTID_2, 100, msgIoInfo);
    EXPECT_EQ(SUCCESS, ret);

    int32_t ret1 = g_rilInterface->DelSimMessage(SLOTID_2, 100, msgIoInfo.index);
    EXPECT_EQ(SUCCESS, ret1);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1AddSimMessage_2900
 * @tc.name: testV1AddSimMessage029
 * @tc.desc: Call function V1 AddSimMessage, slotId is 1, index is -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1AddSimMessage029, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    SmsMessageIOInfo msgIoInfo;
    msgIoInfo.smscPdu = TEST_SMSC_PDU;
    msgIoInfo.pdu = TEST_STORAGE_PDU;
    msgIoInfo.state = static_cast<int32_t>(SimMessageStatus::SIM_MESSAGE_STATUS_SENT);
    msgIoInfo.index = -1;
    int32_t ret = g_rilInterface->AddSimMessage(SLOTID_2, 100, msgIoInfo);
    EXPECT_NE(SUCCESS, ret);

    int32_t ret1 = g_rilInterface->DelSimMessage(SLOTID_2, 100, msgIoInfo.index);
    EXPECT_NE(SUCCESS, ret1);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1AddSimMessage_3000
 * @tc.name: testV1AddSimMessage030
 * @tc.desc: Call function V1 AddSimMessage, slotId is 1, index is 0
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1AddSimMessage030, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    SmsMessageIOInfo msgIoInfo;
    msgIoInfo.smscPdu = TEST_SMSC_PDU;
    msgIoInfo.pdu = TEST_STORAGE_PDU;
    msgIoInfo.state = static_cast<int32_t>(SimMessageStatus::SIM_MESSAGE_STATUS_SENT);
    msgIoInfo.index = 0;
    int32_t ret = g_rilInterface->AddSimMessage(SLOTID_2, 100, msgIoInfo);
    EXPECT_EQ(SUCCESS, ret);

    int32_t ret1 = g_rilInterface->DelSimMessage(SLOTID_2, 100, msgIoInfo.index);
    EXPECT_EQ(SUCCESS, ret1);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1AddSimMessage_3100
 * @tc.name: testV1AddSimMessage031
 * @tc.desc: Call function V1 AddSimMessage, slotId is 0, index is 1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1AddSimMessage031, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SmsMessageIOInfo msgIoInfo;
    msgIoInfo.smscPdu = TEST_SMSC_PDU;
    msgIoInfo.pdu = TEST_STORAGE_PDU;
    msgIoInfo.state = static_cast<int32_t>(SimMessageStatus::SIM_MESSAGE_STATUS_SENT);
    msgIoInfo.index = 1;
    int32_t ret = g_rilInterface->AddSimMessage(SLOTID_1, 100, msgIoInfo);
    EXPECT_EQ(SUCCESS, ret);

    int32_t ret1 = g_rilInterface->DelSimMessage(SLOTID_1, 100, msgIoInfo.index);
    EXPECT_EQ(SUCCESS, ret1);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1AddSimMessage_3200
 * @tc.name: testV1AddSimMessage032
 * @tc.desc: Call function V1 AddSimMessage, slotId is 0, index is 2
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1AddSimMessage032, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SmsMessageIOInfo msgIoInfo;
    msgIoInfo.smscPdu = TEST_SMSC_PDU;
    msgIoInfo.pdu = TEST_STORAGE_PDU;
    msgIoInfo.state = static_cast<int32_t>(SimMessageStatus::SIM_MESSAGE_STATUS_SENT);
    msgIoInfo.index = 2;
    int32_t ret = g_rilInterface->AddSimMessage(SLOTID_1, 100, msgIoInfo);
    EXPECT_EQ(SUCCESS, ret);

    int32_t ret1 = g_rilInterface->DelSimMessage(SLOTID_1, 100, msgIoInfo.index);
    EXPECT_EQ(SUCCESS, ret1);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1AddSimMessage_3300
 * @tc.name: testV1AddSimMessage033
 * @tc.desc: Call function V1 AddSimMessage, slotId is 1, index is 3
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1AddSimMessage033, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    SmsMessageIOInfo msgIoInfo;
    msgIoInfo.smscPdu = TEST_SMSC_PDU;
    msgIoInfo.pdu = TEST_STORAGE_PDU;
    msgIoInfo.state = static_cast<int32_t>(SimMessageStatus::SIM_MESSAGE_STATUS_SENT);
    msgIoInfo.index = 3;
    int32_t ret = g_rilInterface->AddSimMessage(SLOTID_2, 100, msgIoInfo);
    EXPECT_EQ(SUCCESS, ret);

    int32_t ret1 = g_rilInterface->DelSimMessage(SLOTID_2, 100, msgIoInfo.index);
    EXPECT_EQ(SUCCESS, ret1);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1AddSimMessage_3400
 * @tc.name: testV1AddSimMessage034
 * @tc.desc: Call function V1 AddSimMessage, slotId is 1, index is -2147483648
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1AddSimMessage034, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    SmsMessageIOInfo msgIoInfo;
    msgIoInfo.smscPdu = TEST_SMSC_PDU;
    msgIoInfo.pdu = TEST_STORAGE_PDU;
    msgIoInfo.state = static_cast<int32_t>(SimMessageStatus::SIM_MESSAGE_STATUS_SENT);
    msgIoInfo.index = -2147483648;
    int32_t ret = g_rilInterface->AddSimMessage(SLOTID_2, 100, msgIoInfo);
    EXPECT_NE(SUCCESS, ret);

    int32_t ret1 = g_rilInterface->DelSimMessage(SLOTID_2, 100, msgIoInfo.index);
    EXPECT_NE(SUCCESS, ret1);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1AddSimMessage_3500
 * @tc.name: testV1AddSimMessage035
 * @tc.desc: Call function V1 AddSimMessage, slotId is 1, index is 2147483647
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1AddSimMessage035, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    SmsMessageIOInfo msgIoInfo;
    msgIoInfo.smscPdu = TEST_SMSC_PDU;
    msgIoInfo.pdu = TEST_STORAGE_PDU;
    msgIoInfo.state = static_cast<int32_t>(SimMessageStatus::SIM_MESSAGE_STATUS_SENT);
    msgIoInfo.index = 2147483647;
    int32_t ret = g_rilInterface->AddSimMessage(SLOTID_2, 100, msgIoInfo);
    EXPECT_EQ(SUCCESS, ret);

    int32_t ret1 = g_rilInterface->DelSimMessage(SLOTID_2, 100, msgIoInfo.index);
    EXPECT_EQ(SUCCESS, ret1);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1AddSimMessage_3600
 * @tc.name: testV1AddSimMessage036
 * @tc.desc: Call function V1 AddSimMessage, slotId is 0, smscPdu is ""
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1AddSimMessage036, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SmsMessageIOInfo msgIoInfo;
    msgIoInfo.smscPdu = "";
    msgIoInfo.pdu = TEST_STORAGE_PDU;
    msgIoInfo.state = static_cast<int32_t>(SimMessageStatus::SIM_MESSAGE_STATUS_SENT);
    msgIoInfo.index = 100;
    int32_t ret = g_rilInterface->AddSimMessage(SLOTID_1, 100, msgIoInfo);
    EXPECT_NE(SUCCESS, ret);

    int32_t ret1 = g_rilInterface->DelSimMessage(SLOTID_1, 100, msgIoInfo.index);
    EXPECT_NE(SUCCESS, ret1);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1DelSimMessage_0100
 * @tc.name: testV1DelSimMessage001
 * @tc.desc: Call function V1 DelSimMessage, AddSimMessage.slotId is 0, DelSimMessage.serialId is 1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1DelSimMessage001, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SmsMessageIOInfo msgIoInfo;
    msgIoInfo.smscPdu = TEST_SMSC_PDU;
    msgIoInfo.pdu = TEST_STORAGE_PDU;
    msgIoInfo.state = static_cast<int32_t>(SimMessageStatus::SIM_MESSAGE_STATUS_SENT);
    msgIoInfo.index = 0;
    int32_t ret = g_rilInterface->AddSimMessage(SLOTID_1, 100, msgIoInfo);
    EXPECT_EQ(SUCCESS, ret);

    int32_t ret1 = g_rilInterface->DelSimMessage(SLOTID_2, 100, msgIoInfo.index);
    EXPECT_NE(SUCCESS, ret1);

    int32_t ret2 = g_rilInterface->DelSimMessage(SLOTID_1, 100, msgIoInfo.index);
    EXPECT_EQ(SUCCESS, ret2);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1DelSimMessage_0200
 * @tc.name: testV1DelSimMessage002
 * @tc.desc: Call function V1 DelSimMessage, AddSimMessage.serialId is 100, DelSimMessage.serialId is 10
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1DelSimMessage002, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SmsMessageIOInfo msgIoInfo;
    msgIoInfo.smscPdu = TEST_SMSC_PDU;
    msgIoInfo.pdu = TEST_STORAGE_PDU;
    msgIoInfo.state = static_cast<int32_t>(SimMessageStatus::SIM_MESSAGE_STATUS_SENT);
    msgIoInfo.index = 0;
    int32_t ret = g_rilInterface->AddSimMessage(SLOTID_1, 100, msgIoInfo);
    EXPECT_EQ(SUCCESS, ret);

    int32_t ret1 = g_rilInterface->DelSimMessage(SLOTID_1, 10, msgIoInfo.index);
    EXPECT_NE(SUCCESS, ret1);

    int32_t ret2 = g_rilInterface->DelSimMessage(SLOTID_1, 100, msgIoInfo.index);
    EXPECT_EQ(SUCCESS, ret2);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1DelSimMessage_0300
 * @tc.name: testV1DelSimMessage003
 * @tc.desc: Call function V1 DelSimMessage, AddSimMessage.index is 0, DelSimMessage.index is 10
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1DelSimMessage003, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SmsMessageIOInfo msgIoInfo;
    msgIoInfo.smscPdu = TEST_SMSC_PDU;
    msgIoInfo.pdu = TEST_STORAGE_PDU;
    msgIoInfo.state = static_cast<int32_t>(SimMessageStatus::SIM_MESSAGE_STATUS_SENT);
    msgIoInfo.index = 0;
    int32_t ret = g_rilInterface->AddSimMessage(SLOTID_1, 100, msgIoInfo);
    EXPECT_EQ(SUCCESS, ret);

    int32_t ret1 = g_rilInterface->DelSimMessage(SLOTID_1, 10, 10);
    EXPECT_NE(SUCCESS, ret1);

    int32_t ret2 = g_rilInterface->DelSimMessage(SLOTID_1, 100, msgIoInfo.index);
    EXPECT_EQ(SUCCESS, ret2);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetNrOptionMode_0100
 * @tc.name: testV1SetNrOptionMode001
 * @tc.desc: V1SetNrOptionMode, slotId is SLOTID_1, serialId is normal, mode is NR_MODE_UNKNOWN
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetNrOptionMode001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret =
        g_rilInterface->SetNrOptionMode(SLOTID_1, GetSerialId(), static_cast<int32_t>(NrMode::NR_MODE_UNKNOWN));
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetNrOptionMode_0200
 * @tc.name: testV1SetNrOptionMode002
 * @tc.desc: V1SetNrOptionMode, slotId is SLOTID_1, serialId is normal, mode is NR_MODE_NSA_ONLY
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetNrOptionMode002, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret =
        g_rilInterface->SetNrOptionMode(SLOTID_1, GetSerialId(), static_cast<int32_t>(NrMode::NR_MODE_NSA_ONLY));
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetNrOptionMode_0300
 * @tc.name: testV1SetNrOptionMode003
 * @tc.desc: V1SetNrOptionMode, slotId is SLOTID_1, serialId is normal, mode is NR_MODE_SA_ONLY
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetNrOptionMode003, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret =
        g_rilInterface->SetNrOptionMode(SLOTID_1, GetSerialId(), static_cast<int32_t>(NrMode::NR_MODE_SA_ONLY));
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetNrOptionMode_0400
 * @tc.name: testV1SetNrOptionMode004
 * @tc.desc: V1SetNrOptionMode, slotId is SLOTID_2, serialId is normal, mode is NR_MODE_UNKNOWN
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetNrOptionMode004, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t ret =
        g_rilInterface->SetNrOptionMode(SLOTID_2, GetSerialId(), static_cast<int32_t>(NrMode::NR_MODE_UNKNOWN));
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetNrOptionMode_0500
 * @tc.name: testV1SetNrOptionMode005
 * @tc.desc: V1SetNrOptionMode, slotId is SLOTID_2, serialId is normal, mode is NR_MODE_NSA_ONLY
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetNrOptionMode005, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t ret =
        g_rilInterface->SetNrOptionMode(SLOTID_2, GetSerialId(), static_cast<int32_t>(NrMode::NR_MODE_NSA_ONLY));
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetNrOptionMode_0600
 * @tc.name: testV1SetNrOptionMode006
 * @tc.desc: V1SetNrOptionMode, slotId is SLOTID_2, serialId is normal, mode is NR_MODE_SA_ONLY
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetNrOptionMode006, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t ret =
        g_rilInterface->SetNrOptionMode(SLOTID_2, GetSerialId(), static_cast<int32_t>(NrMode::NR_MODE_SA_ONLY));
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetNrOptionMode_0700
 * @tc.name: testV1SetNrOptionMode007
 * @tc.desc: V1SetNrOptionMode, slotId is SLOTID_1, serialId is -1, mode is NR_MODE_SA_ONLY
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetNrOptionMode007, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SetNrOptionMode(SLOTID_1, -1, static_cast<int32_t>(NrMode::NR_MODE_SA_ONLY));
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetNrOptionMode_0800
 * @tc.name: testV1SetNrOptionMode008
 * @tc.desc: V1SetNrOptionMode, stability test
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetNrOptionMode008, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = 0;
    for (int i = 0; i < 100; i++) {
        ret = g_rilInterface->SetNrOptionMode(SLOTID_1, GetSerialId(), static_cast<int32_t>(NrMode::NR_MODE_NSA_ONLY));
        EXPECT_EQ(SUCCESS, ret);
    }
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetNrOptionMode_0100
 * @tc.name: testV1GetNrOptionMode001
 * @tc.desc: V1GetNrOptionMode, stability test
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetNrOptionMode001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t ret = 0;
    for (int i = 0; i < 100; i++) {
        ret = g_rilInterface->GetNrOptionMode(SLOTID_2, GetSerialId());
        EXPECT_EQ(SUCCESS, ret);
    }
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1UpdateSimMessage_0300
 * @tc.name: testV1UpdateSimMessage001
 * @tc.desc: UpdateSimMessage, smscPdu is TEST_CDMA_PDU
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1UpdateSimMessage001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SmsMessageIOInfo msgIoInfo;
    msgIoInfo.smscPdu = TEST_CDMA_PDU;
    msgIoInfo.pdu = TEST_STORAGE_PDU;
    msgIoInfo.state = static_cast<int32_t>(SimMessageStatus::SIM_MESSAGE_STATUS_SENT);
    msgIoInfo.index = 0;
    int32_t ret = g_rilInterface->UpdateSimMessage(SLOTID_1, GetSerialId(), msgIoInfo);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1UpdateSimMessage_0400
 * @tc.name: testV1UpdateSimMessage002
 * @tc.desc: UpdateSimMessage, smscPdu is ""
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1UpdateSimMessage002, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SmsMessageIOInfo msgIoInfo;
    msgIoInfo.smscPdu = "";
    msgIoInfo.pdu = TEST_STORAGE_PDU;
    msgIoInfo.state = static_cast<int32_t>(SimMessageStatus::SIM_MESSAGE_STATUS_SENT);
    msgIoInfo.index = 0;
    int32_t ret = g_rilInterface->UpdateSimMessage(SLOTID_1, GetSerialId(), msgIoInfo);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1UpdateSimMessage_0500
 * @tc.name: testV1UpdateSimMessage003
 * @tc.desc: UpdateSimMessage, smscPdu is "@"
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1UpdateSimMessage003, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SmsMessageIOInfo msgIoInfo;
    msgIoInfo.smscPdu = "@";
    msgIoInfo.pdu = TEST_STORAGE_PDU;
    msgIoInfo.state = static_cast<int32_t>(SimMessageStatus::SIM_MESSAGE_STATUS_SENT);
    msgIoInfo.index = 0;
    int32_t ret = g_rilInterface->UpdateSimMessage(SLOTID_1, GetSerialId(), msgIoInfo);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1UpdateSimMessage_0600
 * @tc.name: testV1UpdateSimMessage004
 * @tc.desc: UpdateSimMessage, pdu is TEST_SEND_PDU
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1UpdateSimMessage004, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SmsMessageIOInfo msgIoInfo;
    msgIoInfo.smscPdu = TEST_SMSC_PDU;
    msgIoInfo.pdu = TEST_SEND_PDU;
    msgIoInfo.state = static_cast<int32_t>(SimMessageStatus::SIM_MESSAGE_STATUS_SENT);
    msgIoInfo.index = 0;
    int32_t ret = g_rilInterface->UpdateSimMessage(SLOTID_1, GetSerialId(), msgIoInfo);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1UpdateSimMessage_0700
 * @tc.name: testV1UpdateSimMessage005
 * @tc.desc: UpdateSimMessage, pdu is ""
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1UpdateSimMessage005, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SmsMessageIOInfo msgIoInfo;
    msgIoInfo.smscPdu = TEST_SMSC_PDU;
    msgIoInfo.pdu = "";
    msgIoInfo.state = static_cast<int32_t>(SimMessageStatus::SIM_MESSAGE_STATUS_SENT);
    msgIoInfo.index = 0;
    int32_t ret = g_rilInterface->UpdateSimMessage(SLOTID_1, GetSerialId(), msgIoInfo);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1UpdateSimMessage_0800
 * @tc.name: testV1UpdateSimMessage006
 * @tc.desc: UpdateSimMessage, pdu is "@"
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1UpdateSimMessage006, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SmsMessageIOInfo msgIoInfo;
    msgIoInfo.smscPdu = TEST_SMSC_PDU;
    msgIoInfo.pdu = "@";
    msgIoInfo.state = static_cast<int32_t>(SimMessageStatus::SIM_MESSAGE_STATUS_SENT);
    msgIoInfo.index = 0;
    int32_t ret = g_rilInterface->UpdateSimMessage(SLOTID_1, GetSerialId(), msgIoInfo);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1UpdateSimMessage_0900
 * @tc.name: testV1UpdateSimMessage007
 * @tc.desc: UpdateSimMessage, state is SIM_MESSAGE_STATUS_UNREAD
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1UpdateSimMessage007, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SmsMessageIOInfo msgIoInfo;
    msgIoInfo.smscPdu = TEST_CDMA_PDU;
    msgIoInfo.pdu = TEST_STORAGE_PDU;
    msgIoInfo.state = static_cast<int32_t>(SimMessageStatus::SIM_MESSAGE_STATUS_UNREAD);
    msgIoInfo.index = 0;
    int32_t ret = g_rilInterface->UpdateSimMessage(SLOTID_1, GetSerialId(), msgIoInfo);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1UpdateSimMessage_1000
 * @tc.name: testV1UpdateSimMessage008
 * @tc.desc: UpdateSimMessage, state is SIM_MESSAGE_STATUS_READ
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1UpdateSimMessage008, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SmsMessageIOInfo msgIoInfo;
    msgIoInfo.smscPdu = TEST_CDMA_PDU;
    msgIoInfo.pdu = TEST_STORAGE_PDU;
    msgIoInfo.state = static_cast<int32_t>(SimMessageStatus::SIM_MESSAGE_STATUS_READ);
    msgIoInfo.index = 0;
    int32_t ret = g_rilInterface->UpdateSimMessage(SLOTID_1, GetSerialId(), msgIoInfo);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1UpdateSimMessage_1100
 * @tc.name: testV1UpdateSimMessage009
 * @tc.desc: UpdateSimMessage, state is SIM_MESSAGE_STATUS_UNSENT
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1UpdateSimMessage009, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SmsMessageIOInfo msgIoInfo;
    msgIoInfo.smscPdu = TEST_CDMA_PDU;
    msgIoInfo.pdu = TEST_STORAGE_PDU;
    msgIoInfo.state = static_cast<int32_t>(SimMessageStatus::SIM_MESSAGE_STATUS_UNSENT);
    msgIoInfo.index = 0;
    int32_t ret = g_rilInterface->UpdateSimMessage(SLOTID_1, GetSerialId(), msgIoInfo);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1UpdateSimMessage_1200
 * @tc.name: testV1UpdateSimMessage010
 * @tc.desc: UpdateSimMessage, state is SIM_MESSAGE_STATUS_UNSENT
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1UpdateSimMessage010, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SmsMessageIOInfo msgIoInfo;
    msgIoInfo.smscPdu = TEST_CDMA_PDU;
    msgIoInfo.pdu = TEST_STORAGE_PDU;
    msgIoInfo.state = static_cast<int32_t>(SimMessageStatus::SIM_MESSAGE_STATUS_UNSENT);
    msgIoInfo.index = 255;
    int32_t ret = g_rilInterface->UpdateSimMessage(SLOTID_1, GetSerialId(), msgIoInfo);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1UpdateSimMessage_1300
 * @tc.name: testV1UpdateSimMessage011
 * @tc.desc: UpdateSimMessage, smscPdu is TEST_CDMA_PDU
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1UpdateSimMessage011, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    SmsMessageIOInfo msgIoInfo;
    msgIoInfo.smscPdu = TEST_CDMA_PDU;
    msgIoInfo.pdu = TEST_STORAGE_PDU;
    msgIoInfo.state = static_cast<int32_t>(SimMessageStatus::SIM_MESSAGE_STATUS_SENT);
    msgIoInfo.index = 0;
    int32_t ret = g_rilInterface->UpdateSimMessage(SLOTID_2, GetSerialId(), msgIoInfo);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1UpdateSimMessage_1400
 * @tc.name: testV1UpdateSimMessage012
 * @tc.desc: UpdateSimMessage, smscPdu is ""
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1UpdateSimMessage012, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    SmsMessageIOInfo msgIoInfo;
    msgIoInfo.smscPdu = "";
    msgIoInfo.pdu = TEST_STORAGE_PDU;
    msgIoInfo.state = static_cast<int32_t>(SimMessageStatus::SIM_MESSAGE_STATUS_SENT);
    msgIoInfo.index = 0;
    int32_t ret = g_rilInterface->UpdateSimMessage(SLOTID_2, GetSerialId(), msgIoInfo);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1UpdateSimMessage_1500
 * @tc.name: testV1UpdateSimMessage013
 * @tc.desc: UpdateSimMessage, smscPdu is "@"
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1UpdateSimMessage013, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    SmsMessageIOInfo msgIoInfo;
    msgIoInfo.smscPdu = "@";
    msgIoInfo.pdu = TEST_STORAGE_PDU;
    msgIoInfo.state = static_cast<int32_t>(SimMessageStatus::SIM_MESSAGE_STATUS_SENT);
    msgIoInfo.index = 0;
    int32_t ret = g_rilInterface->UpdateSimMessage(SLOTID_2, GetSerialId(), msgIoInfo);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1UpdateSimMessage_1600
 * @tc.name: testV1UpdateSimMessage014
 * @tc.desc: UpdateSimMessage, pdu is TEST_SEND_PDU
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1UpdateSimMessage014, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    SmsMessageIOInfo msgIoInfo;
    msgIoInfo.smscPdu = TEST_SMSC_PDU;
    msgIoInfo.pdu = TEST_SEND_PDU;
    msgIoInfo.state = static_cast<int32_t>(SimMessageStatus::SIM_MESSAGE_STATUS_SENT);
    msgIoInfo.index = 0;
    int32_t ret = g_rilInterface->UpdateSimMessage(SLOTID_2, GetSerialId(), msgIoInfo);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1UpdateSimMessage_1700
 * @tc.name: testV1UpdateSimMessage015
 * @tc.desc: UpdateSimMessage, pdu is ""
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1UpdateSimMessage015, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    SmsMessageIOInfo msgIoInfo;
    msgIoInfo.smscPdu = TEST_SMSC_PDU;
    msgIoInfo.pdu = "";
    msgIoInfo.state = static_cast<int32_t>(SimMessageStatus::SIM_MESSAGE_STATUS_SENT);
    msgIoInfo.index = 0;
    int32_t ret = g_rilInterface->UpdateSimMessage(SLOTID_2, GetSerialId(), msgIoInfo);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1UpdateSimMessage_1800
 * @tc.name: testV1UpdateSimMessage016
 * @tc.desc: UpdateSimMessage, pdu is "@"
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1UpdateSimMessage016, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    SmsMessageIOInfo msgIoInfo;
    msgIoInfo.smscPdu = TEST_SMSC_PDU;
    msgIoInfo.pdu = "@";
    msgIoInfo.state = static_cast<int32_t>(SimMessageStatus::SIM_MESSAGE_STATUS_SENT);
    msgIoInfo.index = 0;
    int32_t ret = g_rilInterface->UpdateSimMessage(SLOTID_2, GetSerialId(), msgIoInfo);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1UpdateSimMessage_1900
 * @tc.name: testV1UpdateSimMessage017
 * @tc.desc: UpdateSimMessage, state is SIM_MESSAGE_STATUS_UNREAD
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1UpdateSimMessage017, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    SmsMessageIOInfo msgIoInfo;
    msgIoInfo.smscPdu = TEST_CDMA_PDU;
    msgIoInfo.pdu = TEST_STORAGE_PDU;
    msgIoInfo.state = static_cast<int32_t>(SimMessageStatus::SIM_MESSAGE_STATUS_UNREAD);
    msgIoInfo.index = 0;
    int32_t ret = g_rilInterface->UpdateSimMessage(SLOTID_2, GetSerialId(), msgIoInfo);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1UpdateSimMessage_2000
 * @tc.name: testV1UpdateSimMessage018
 * @tc.desc: UpdateSimMessage, state is SIM_MESSAGE_STATUS_READ
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1UpdateSimMessage018, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    SmsMessageIOInfo msgIoInfo;
    msgIoInfo.smscPdu = TEST_CDMA_PDU;
    msgIoInfo.pdu = TEST_STORAGE_PDU;
    msgIoInfo.state = static_cast<int32_t>(SimMessageStatus::SIM_MESSAGE_STATUS_READ);
    msgIoInfo.index = 0;
    int32_t ret = g_rilInterface->UpdateSimMessage(SLOTID_2, GetSerialId(), msgIoInfo);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1UpdateSimMessage_2100
 * @tc.name: testV1UpdateSimMessage019
 * @tc.desc: UpdateSimMessage, state is SIM_MESSAGE_STATUS_UNSENT
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1UpdateSimMessage019, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    SmsMessageIOInfo msgIoInfo;
    msgIoInfo.smscPdu = TEST_CDMA_PDU;
    msgIoInfo.pdu = TEST_STORAGE_PDU;
    msgIoInfo.state = static_cast<int32_t>(SimMessageStatus::SIM_MESSAGE_STATUS_UNSENT);
    msgIoInfo.index = 0;
    int32_t ret = g_rilInterface->UpdateSimMessage(SLOTID_2, GetSerialId(), msgIoInfo);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1UpdateSimMessage_2200
 * @tc.name: testV1UpdateSimMessage020
 * @tc.desc: UpdateSimMessage, state is SIM_MESSAGE_STATUS_UNSENT
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1UpdateSimMessage020, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    SmsMessageIOInfo msgIoInfo;
    msgIoInfo.smscPdu = TEST_CDMA_PDU;
    msgIoInfo.pdu = TEST_STORAGE_PDU;
    msgIoInfo.state = static_cast<int32_t>(SimMessageStatus::SIM_MESSAGE_STATUS_UNSENT);
    msgIoInfo.index = 255;
    int32_t ret = g_rilInterface->UpdateSimMessage(SLOTID_2, GetSerialId(), msgIoInfo);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1UpdateSimMessage_2300
 * @tc.name: testV1UpdateSimMessage021
 * @tc.desc: UpdateSimMessage, stability test
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1UpdateSimMessage021, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SmsMessageIOInfo msgIoInfo;
    msgIoInfo.smscPdu = TEST_CDMA_PDU;
    msgIoInfo.pdu = TEST_STORAGE_PDU;
    msgIoInfo.state = static_cast<int32_t>(SimMessageStatus::SIM_MESSAGE_STATUS_SENT);
    msgIoInfo.index = 0;
    int32_t ret = 0;
    for (int i = 0; i < 100; i++) {
        ret = g_rilInterface->UpdateSimMessage(SLOTID_1, GetSerialId(), msgIoInfo);
        EXPECT_EQ(SUCCESS, ret);
    }
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1UpdateSimMessage_2400
 * @tc.name: testV1UpdateSimMessage022
 * @tc.desc: UpdateSimMessage, SerialId is -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1UpdateSimMessage022, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SmsMessageIOInfo msgIoInfo;
    msgIoInfo.smscPdu = TEST_CDMA_PDU;
    msgIoInfo.pdu = TEST_STORAGE_PDU;
    msgIoInfo.state = static_cast<int32_t>(SimMessageStatus::SIM_MESSAGE_STATUS_SENT);
    msgIoInfo.index = 0;
    int32_t ret = g_rilInterface->UpdateSimMessage(SLOTID_1, -1, msgIoInfo);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1UpdateSimMessage_2500
 * @tc.name: testV1UpdateSimMessage023
 * @tc.desc: UpdateSimMessage, SerialId is -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1UpdateSimMessage023, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    SmsMessageIOInfo msgIoInfo;
    msgIoInfo.smscPdu = TEST_CDMA_PDU;
    msgIoInfo.pdu = TEST_STORAGE_PDU;
    msgIoInfo.state = static_cast<int32_t>(SimMessageStatus::SIM_MESSAGE_STATUS_SENT);
    msgIoInfo.index = 0;
    int32_t ret = g_rilInterface->UpdateSimMessage(SLOTID_2, -1, msgIoInfo);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1AddCdmaSimMessage_0300
 * @tc.name: testV1AddCdmaSimMessage001
 * @tc.desc: AddCdmaSimMessage, smscPdu is TEST_CDMA_PDU
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1AddCdmaSimMessage001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SmsMessageIOInfo msgIoInfo;
    msgIoInfo.smscPdu = TEST_CDMA_PDU;
    msgIoInfo.pdu = TEST_STORAGE_PDU;
    msgIoInfo.state = static_cast<int32_t>(SimMessageStatus::SIM_MESSAGE_STATUS_SENT);
    msgIoInfo.index = 0;
    int32_t ret = g_rilInterface->AddCdmaSimMessage(SLOTID_1, GetSerialId(), msgIoInfo);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1AddCdmaSimMessage_0400
 * @tc.name: testV1AddCdmaSimMessage002
 * @tc.desc: AddCdmaSimMessage, smscPdu is ""
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1AddCdmaSimMessage002, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SmsMessageIOInfo msgIoInfo;
    msgIoInfo.smscPdu = "";
    msgIoInfo.pdu = TEST_STORAGE_PDU;
    msgIoInfo.state = static_cast<int32_t>(SimMessageStatus::SIM_MESSAGE_STATUS_SENT);
    msgIoInfo.index = 0;
    int32_t ret = g_rilInterface->AddCdmaSimMessage(SLOTID_1, GetSerialId(), msgIoInfo);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1AddCdmaSimMessage_0500
 * @tc.name: testV1AddCdmaSimMessage003
 * @tc.desc: AddCdmaSimMessage, smscPdu is "@"
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1AddCdmaSimMessage003, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SmsMessageIOInfo msgIoInfo;
    msgIoInfo.smscPdu = "@";
    msgIoInfo.pdu = TEST_STORAGE_PDU;
    msgIoInfo.state = static_cast<int32_t>(SimMessageStatus::SIM_MESSAGE_STATUS_SENT);
    msgIoInfo.index = 0;
    int32_t ret = g_rilInterface->AddCdmaSimMessage(SLOTID_1, GetSerialId(), msgIoInfo);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1AddCdmaSimMessage_0600
 * @tc.name: testV1AddCdmaSimMessage004
 * @tc.desc: AddCdmaSimMessage, pdu is TEST_SEND_PDU
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1AddCdmaSimMessage004, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SmsMessageIOInfo msgIoInfo;
    msgIoInfo.smscPdu = TEST_SMSC_PDU;
    msgIoInfo.pdu = TEST_SEND_PDU;
    msgIoInfo.state = static_cast<int32_t>(SimMessageStatus::SIM_MESSAGE_STATUS_SENT);
    msgIoInfo.index = 0;
    int32_t ret = g_rilInterface->AddCdmaSimMessage(SLOTID_1, GetSerialId(), msgIoInfo);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1AddCdmaSimMessage_0700
 * @tc.name: testV1AddCdmaSimMessage005
 * @tc.desc: AddCdmaSimMessage, pdu is ""
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1AddCdmaSimMessage005, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SmsMessageIOInfo msgIoInfo;
    msgIoInfo.smscPdu = TEST_SMSC_PDU;
    msgIoInfo.pdu = "";
    msgIoInfo.state = static_cast<int32_t>(SimMessageStatus::SIM_MESSAGE_STATUS_SENT);
    msgIoInfo.index = 0;
    int32_t ret = g_rilInterface->AddCdmaSimMessage(SLOTID_1, GetSerialId(), msgIoInfo);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1AddCdmaSimMessage_0800
 * @tc.name: testV1AddCdmaSimMessage006
 * @tc.desc: AddCdmaSimMessage, pdu is "@"
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1AddCdmaSimMessage006, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SmsMessageIOInfo msgIoInfo;
    msgIoInfo.smscPdu = TEST_SMSC_PDU;
    msgIoInfo.pdu = "@";
    msgIoInfo.state = static_cast<int32_t>(SimMessageStatus::SIM_MESSAGE_STATUS_SENT);
    msgIoInfo.index = 0;
    int32_t ret = g_rilInterface->AddCdmaSimMessage(SLOTID_1, GetSerialId(), msgIoInfo);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1AddCdmaSimMessage_0900
 * @tc.name: testV1AddCdmaSimMessage007
 * @tc.desc: AddCdmaSimMessage, state is SIM_MESSAGE_STATUS_UNREAD
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1AddCdmaSimMessage007, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SmsMessageIOInfo msgIoInfo;
    msgIoInfo.smscPdu = TEST_CDMA_PDU;
    msgIoInfo.pdu = TEST_STORAGE_PDU;
    msgIoInfo.state = static_cast<int32_t>(SimMessageStatus::SIM_MESSAGE_STATUS_UNREAD);
    msgIoInfo.index = 0;
    int32_t ret = g_rilInterface->AddCdmaSimMessage(SLOTID_1, GetSerialId(), msgIoInfo);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1AddCdmaSimMessage_1000
 * @tc.name: testV1AddCdmaSimMessage008
 * @tc.desc: AddCdmaSimMessage, state is SIM_MESSAGE_STATUS_READ
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1AddCdmaSimMessage008, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SmsMessageIOInfo msgIoInfo;
    msgIoInfo.smscPdu = TEST_CDMA_PDU;
    msgIoInfo.pdu = TEST_STORAGE_PDU;
    msgIoInfo.state = static_cast<int32_t>(SimMessageStatus::SIM_MESSAGE_STATUS_READ);
    msgIoInfo.index = 0;
    int32_t ret = g_rilInterface->AddCdmaSimMessage(SLOTID_1, GetSerialId(), msgIoInfo);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1AddCdmaSimMessage_1100
 * @tc.name: testV1AddCdmaSimMessage009
 * @tc.desc: AddCdmaSimMessage, state is SIM_MESSAGE_STATUS_UNSENT
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1AddCdmaSimMessage009, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SmsMessageIOInfo msgIoInfo;
    msgIoInfo.smscPdu = TEST_CDMA_PDU;
    msgIoInfo.pdu = TEST_STORAGE_PDU;
    msgIoInfo.state = static_cast<int32_t>(SimMessageStatus::SIM_MESSAGE_STATUS_UNSENT);
    msgIoInfo.index = 0;
    int32_t ret = g_rilInterface->AddCdmaSimMessage(SLOTID_1, GetSerialId(), msgIoInfo);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1AddCdmaSimMessage_1200
 * @tc.name: testV1AddCdmaSimMessage010
 * @tc.desc: AddCdmaSimMessage, state is SIM_MESSAGE_STATUS_UNSENT
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1AddCdmaSimMessage010, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SmsMessageIOInfo msgIoInfo;
    msgIoInfo.smscPdu = TEST_CDMA_PDU;
    msgIoInfo.pdu = TEST_STORAGE_PDU;
    msgIoInfo.state = static_cast<int32_t>(SimMessageStatus::SIM_MESSAGE_STATUS_UNSENT);
    msgIoInfo.index = 255;
    int32_t ret = g_rilInterface->AddCdmaSimMessage(SLOTID_1, GetSerialId(), msgIoInfo);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1AddCdmaSimMessage_1300
 * @tc.name: testV1AddCdmaSimMessage011
 * @tc.desc: AddCdmaSimMessage, smscPdu is TEST_CDMA_PDU
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1AddCdmaSimMessage011, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    SmsMessageIOInfo msgIoInfo;
    msgIoInfo.smscPdu = TEST_CDMA_PDU;
    msgIoInfo.pdu = TEST_STORAGE_PDU;
    msgIoInfo.state = static_cast<int32_t>(SimMessageStatus::SIM_MESSAGE_STATUS_SENT);
    msgIoInfo.index = 0;
    int32_t ret = g_rilInterface->AddCdmaSimMessage(SLOTID_2, GetSerialId(), msgIoInfo);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1AddCdmaSimMessage_1400
 * @tc.name: testV1AddCdmaSimMessage012
 * @tc.desc: AddCdmaSimMessage, smscPdu is ""
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1AddCdmaSimMessage012, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    SmsMessageIOInfo msgIoInfo;
    msgIoInfo.smscPdu = "";
    msgIoInfo.pdu = TEST_STORAGE_PDU;
    msgIoInfo.state = static_cast<int32_t>(SimMessageStatus::SIM_MESSAGE_STATUS_SENT);
    msgIoInfo.index = 0;
    int32_t ret = g_rilInterface->AddCdmaSimMessage(SLOTID_2, GetSerialId(), msgIoInfo);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1AddCdmaSimMessage_1500
 * @tc.name: testV1AddCdmaSimMessage013
 * @tc.desc: AddCdmaSimMessage, smscPdu is "@"
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1AddCdmaSimMessage013, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    SmsMessageIOInfo msgIoInfo;
    msgIoInfo.smscPdu = "@";
    msgIoInfo.pdu = TEST_STORAGE_PDU;
    msgIoInfo.state = static_cast<int32_t>(SimMessageStatus::SIM_MESSAGE_STATUS_SENT);
    msgIoInfo.index = 0;
    int32_t ret = g_rilInterface->AddCdmaSimMessage(SLOTID_2, GetSerialId(), msgIoInfo);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1AddCdmaSimMessage_1600
 * @tc.name: testV1AddCdmaSimMessage014
 * @tc.desc: AddCdmaSimMessage, pdu is TEST_SEND_PDU
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1AddCdmaSimMessage014, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    SmsMessageIOInfo msgIoInfo;
    msgIoInfo.smscPdu = TEST_SMSC_PDU;
    msgIoInfo.pdu = TEST_SEND_PDU;
    msgIoInfo.state = static_cast<int32_t>(SimMessageStatus::SIM_MESSAGE_STATUS_SENT);
    msgIoInfo.index = 0;
    int32_t ret = g_rilInterface->AddCdmaSimMessage(SLOTID_2, GetSerialId(), msgIoInfo);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1AddCdmaSimMessage_1700
 * @tc.name: testV1AddCdmaSimMessage015
 * @tc.desc: AddCdmaSimMessage, pdu is ""
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1AddCdmaSimMessage015, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    SmsMessageIOInfo msgIoInfo;
    msgIoInfo.smscPdu = TEST_SMSC_PDU;
    msgIoInfo.pdu = "";
    msgIoInfo.state = static_cast<int32_t>(SimMessageStatus::SIM_MESSAGE_STATUS_SENT);
    msgIoInfo.index = 0;
    int32_t ret = g_rilInterface->AddCdmaSimMessage(SLOTID_2, GetSerialId(), msgIoInfo);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1AddCdmaSimMessage_1800
 * @tc.name: testV1AddCdmaSimMessage016
 * @tc.desc: AddCdmaSimMessage, pdu is "@"
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1AddCdmaSimMessage016, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    SmsMessageIOInfo msgIoInfo;
    msgIoInfo.smscPdu = TEST_SMSC_PDU;
    msgIoInfo.pdu = "@";
    msgIoInfo.state = static_cast<int32_t>(SimMessageStatus::SIM_MESSAGE_STATUS_SENT);
    msgIoInfo.index = 0;
    int32_t ret = g_rilInterface->AddCdmaSimMessage(SLOTID_2, GetSerialId(), msgIoInfo);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1AddCdmaSimMessage_1900
 * @tc.name: testV1AddCdmaSimMessage017
 * @tc.desc: AddCdmaSimMessage, state is SIM_MESSAGE_STATUS_UNREAD
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1AddCdmaSimMessage017, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    SmsMessageIOInfo msgIoInfo;
    msgIoInfo.smscPdu = TEST_CDMA_PDU;
    msgIoInfo.pdu = TEST_STORAGE_PDU;
    msgIoInfo.state = static_cast<int32_t>(SimMessageStatus::SIM_MESSAGE_STATUS_UNREAD);
    msgIoInfo.index = 0;
    int32_t ret = g_rilInterface->AddCdmaSimMessage(SLOTID_2, GetSerialId(), msgIoInfo);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1AddCdmaSimMessage_2000
 * @tc.name: testV1AddCdmaSimMessage018
 * @tc.desc: AddCdmaSimMessage, state is SIM_MESSAGE_STATUS_READ
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1AddCdmaSimMessage018, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    SmsMessageIOInfo msgIoInfo;
    msgIoInfo.smscPdu = TEST_CDMA_PDU;
    msgIoInfo.pdu = TEST_STORAGE_PDU;
    msgIoInfo.state = static_cast<int32_t>(SimMessageStatus::SIM_MESSAGE_STATUS_READ);
    msgIoInfo.index = 0;
    int32_t ret = g_rilInterface->AddCdmaSimMessage(SLOTID_2, GetSerialId(), msgIoInfo);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1AddCdmaSimMessage_2100
 * @tc.name: testV1AddCdmaSimMessage019
 * @tc.desc: AddCdmaSimMessage, state is SIM_MESSAGE_STATUS_UNSENT
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1AddCdmaSimMessage019, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    SmsMessageIOInfo msgIoInfo;
    msgIoInfo.smscPdu = TEST_CDMA_PDU;
    msgIoInfo.pdu = TEST_STORAGE_PDU;
    msgIoInfo.state = static_cast<int32_t>(SimMessageStatus::SIM_MESSAGE_STATUS_UNSENT);
    msgIoInfo.index = 0;
    int32_t ret = g_rilInterface->AddCdmaSimMessage(SLOTID_2, GetSerialId(), msgIoInfo);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1AddCdmaSimMessage_2200
 * @tc.name: testV1AddCdmaSimMessage020
 * @tc.desc: AddCdmaSimMessage, state is SIM_MESSAGE_STATUS_UNSENT
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1AddCdmaSimMessage020, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    SmsMessageIOInfo msgIoInfo;
    msgIoInfo.smscPdu = TEST_CDMA_PDU;
    msgIoInfo.pdu = TEST_STORAGE_PDU;
    msgIoInfo.state = static_cast<int32_t>(SimMessageStatus::SIM_MESSAGE_STATUS_UNSENT);
    msgIoInfo.index = 255;
    int32_t ret = g_rilInterface->AddCdmaSimMessage(SLOTID_2, GetSerialId(), msgIoInfo);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1AddCdmaSimMessage_2300
 * @tc.name: testV1AddCdmaSimMessage021
 * @tc.desc: AddCdmaSimMessage, stability test
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1AddCdmaSimMessage021, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SmsMessageIOInfo msgIoInfo;
    msgIoInfo.smscPdu = TEST_CDMA_PDU;
    msgIoInfo.pdu = TEST_STORAGE_PDU;
    msgIoInfo.state = static_cast<int32_t>(SimMessageStatus::SIM_MESSAGE_STATUS_SENT);
    msgIoInfo.index = 0;
    int32_t ret = 0;
    for (int i = 0; i < 100; i++) {
        ret = g_rilInterface->AddCdmaSimMessage(SLOTID_1, GetSerialId(), msgIoInfo);
        EXPECT_EQ(SUCCESS, ret);
    }
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1AddCdmaSimMessage_2400
 * @tc.name: testV1AddCdmaSimMessage022
 * @tc.desc: AddCdmaSimMessage, SerialId is -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1AddCdmaSimMessage022, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SmsMessageIOInfo msgIoInfo;
    msgIoInfo.smscPdu = TEST_CDMA_PDU;
    msgIoInfo.pdu = TEST_STORAGE_PDU;
    msgIoInfo.state = static_cast<int32_t>(SimMessageStatus::SIM_MESSAGE_STATUS_SENT);
    msgIoInfo.index = 0;
    int32_t ret = g_rilInterface->AddCdmaSimMessage(SLOTID_1, -1, msgIoInfo);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1AddCdmaSimMessage_2500
 * @tc.name: testV1AddCdmaSimMessage023
 * @tc.desc: AddCdmaSimMessage, SerialId is -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1AddCdmaSimMessage023, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    SmsMessageIOInfo msgIoInfo;
    msgIoInfo.smscPdu = TEST_CDMA_PDU;
    msgIoInfo.pdu = TEST_STORAGE_PDU;
    msgIoInfo.state = static_cast<int32_t>(SimMessageStatus::SIM_MESSAGE_STATUS_SENT);
    msgIoInfo.index = 0;
    int32_t ret = g_rilInterface->AddCdmaSimMessage(SLOTID_2, -1, msgIoInfo);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1DelCdmaSimMessage_0300
 * @tc.name: testV1DelCdmaSimMessage001
 * @tc.desc: DelCdmaSimMessage, SerialId is -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1DelCdmaSimMessage001, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t index = 0;
    int32_t ret = g_rilInterface->DelCdmaSimMessage(SLOTID_1, -1, index);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1DelCdmaSimMessage_0400
 * @tc.name: testV1DelCdmaSimMessage002
 * @tc.desc: DelCdmaSimMessage, index is 255
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1DelCdmaSimMessage002, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t index = 255;
    int32_t ret = g_rilInterface->DelCdmaSimMessage(SLOTID_1, GetSerialId(), index);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1DelCdmaSimMessage_0500
 * @tc.name: testV1DelCdmaSimMessage003
 * @tc.desc: DelCdmaSimMessage, index is -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1DelCdmaSimMessage003, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t index = -1;
    int32_t ret = g_rilInterface->DelCdmaSimMessage(SLOTID_1, GetSerialId(), index);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1DelCdmaSimMessage_0600
 * @tc.name: testV1DelCdmaSimMessage004
 * @tc.desc: DelCdmaSimMessage, SerialId is -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1DelCdmaSimMessage004, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t index = 0;
    int32_t ret = g_rilInterface->DelCdmaSimMessage(SLOTID_2, -1, index);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1DelCdmaSimMessage_0700
 * @tc.name: testV1DelCdmaSimMessage005
 * @tc.desc: DelCdmaSimMessage, index is 255
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1DelCdmaSimMessage005, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t index = 255;
    int32_t ret = g_rilInterface->DelCdmaSimMessage(SLOTID_2, GetSerialId(), index);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1DelCdmaSimMessage_0800
 * @tc.name: testV1DelCdmaSimMessage006
 * @tc.desc: DelCdmaSimMessage, index is -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1DelCdmaSimMessage006, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t index = -1;
    int32_t ret = g_rilInterface->DelCdmaSimMessage(SLOTID_2, GetSerialId(), index);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1DelCdmaSimMessage_0900
 * @tc.name: testV1DelCdmaSimMessage007
 * @tc.desc: DelCdmaSimMessage, stability test
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1DelCdmaSimMessage007, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t index = 0;
    int32_t ret = 0;
    for (int i = 0; i < 100; i++) {
        ret = g_rilInterface->DelCdmaSimMessage(SLOTID_1, GetSerialId(), index);
        EXPECT_EQ(SUCCESS, ret);
    }
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1UpdateCdmaSimMessage_0300
 * @tc.name: testV1UpdateCdmaSimMessage001
 * @tc.desc: UpdateCdmaSimMessage, smscPdu is TEST_CDMA_PDU
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1UpdateCdmaSimMessage001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SmsMessageIOInfo msgIoInfo;
    msgIoInfo.smscPdu = TEST_CDMA_PDU;
    msgIoInfo.pdu = TEST_STORAGE_PDU;
    msgIoInfo.state = static_cast<int32_t>(SimMessageStatus::SIM_MESSAGE_STATUS_SENT);
    msgIoInfo.index = 0;
    int32_t ret = g_rilInterface->UpdateCdmaSimMessage(SLOTID_1, GetSerialId(), msgIoInfo);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1UpdateCdmaSimMessage_0400
 * @tc.name: testV1UpdateCdmaSimMessage002
 * @tc.desc: UpdateCdmaSimMessage, smscPdu is ""
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1UpdateCdmaSimMessage002, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SmsMessageIOInfo msgIoInfo;
    msgIoInfo.smscPdu = "";
    msgIoInfo.pdu = TEST_STORAGE_PDU;
    msgIoInfo.state = static_cast<int32_t>(SimMessageStatus::SIM_MESSAGE_STATUS_SENT);
    msgIoInfo.index = 0;
    int32_t ret = g_rilInterface->UpdateCdmaSimMessage(SLOTID_1, GetSerialId(), msgIoInfo);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1UpdateCdmaSimMessage_0500
 * @tc.name: testV1UpdateCdmaSimMessage003
 * @tc.desc: UpdateCdmaSimMessage, smscPdu is "@"
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1UpdateCdmaSimMessage003, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SmsMessageIOInfo msgIoInfo;
    msgIoInfo.smscPdu = "@";
    msgIoInfo.pdu = TEST_STORAGE_PDU;
    msgIoInfo.state = static_cast<int32_t>(SimMessageStatus::SIM_MESSAGE_STATUS_SENT);
    msgIoInfo.index = 0;
    int32_t ret = g_rilInterface->UpdateCdmaSimMessage(SLOTID_1, GetSerialId(), msgIoInfo);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1UpdateCdmaSimMessage_0600
 * @tc.name: testV1UpdateCdmaSimMessage004
 * @tc.desc: UpdateCdmaSimMessage, pdu is TEST_SEND_PDU
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1UpdateCdmaSimMessage004, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SmsMessageIOInfo msgIoInfo;
    msgIoInfo.smscPdu = TEST_SMSC_PDU;
    msgIoInfo.pdu = TEST_SEND_PDU;
    msgIoInfo.state = static_cast<int32_t>(SimMessageStatus::SIM_MESSAGE_STATUS_SENT);
    msgIoInfo.index = 0;
    int32_t ret = g_rilInterface->UpdateCdmaSimMessage(SLOTID_1, GetSerialId(), msgIoInfo);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1UpdateCdmaSimMessage_0700
 * @tc.name: testV1UpdateCdmaSimMessage005
 * @tc.desc: UpdateCdmaSimMessage, pdu is ""
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1UpdateCdmaSimMessage005, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SmsMessageIOInfo msgIoInfo;
    msgIoInfo.smscPdu = TEST_SMSC_PDU;
    msgIoInfo.pdu = "";
    msgIoInfo.state = static_cast<int32_t>(SimMessageStatus::SIM_MESSAGE_STATUS_SENT);
    msgIoInfo.index = 0;
    int32_t ret = g_rilInterface->UpdateCdmaSimMessage(SLOTID_1, GetSerialId(), msgIoInfo);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1UpdateCdmaSimMessage_0800
 * @tc.name: testV1UpdateCdmaSimMessage006
 * @tc.desc: UpdateCdmaSimMessage, pdu is "@"
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1UpdateCdmaSimMessage006, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SmsMessageIOInfo msgIoInfo;
    msgIoInfo.smscPdu = TEST_SMSC_PDU;
    msgIoInfo.pdu = "@";
    msgIoInfo.state = static_cast<int32_t>(SimMessageStatus::SIM_MESSAGE_STATUS_SENT);
    msgIoInfo.index = 0;
    int32_t ret = g_rilInterface->UpdateCdmaSimMessage(SLOTID_1, GetSerialId(), msgIoInfo);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1UpdateCdmaSimMessage_0900
 * @tc.name: testV1UpdateCdmaSimMessage007
 * @tc.desc: UpdateCdmaSimMessage, state is SIM_MESSAGE_STATUS_UNREAD
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1UpdateCdmaSimMessage007, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SmsMessageIOInfo msgIoInfo;
    msgIoInfo.smscPdu = TEST_CDMA_PDU;
    msgIoInfo.pdu = TEST_STORAGE_PDU;
    msgIoInfo.state = static_cast<int32_t>(SimMessageStatus::SIM_MESSAGE_STATUS_UNREAD);
    msgIoInfo.index = 0;
    int32_t ret = g_rilInterface->UpdateCdmaSimMessage(SLOTID_1, GetSerialId(), msgIoInfo);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1UpdateCdmaSimMessage_1000
 * @tc.name: testV1UpdateCdmaSimMessage008
 * @tc.desc: UpdateCdmaSimMessage, state is SIM_MESSAGE_STATUS_READ
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1UpdateCdmaSimMessage008, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SmsMessageIOInfo msgIoInfo;
    msgIoInfo.smscPdu = TEST_CDMA_PDU;
    msgIoInfo.pdu = TEST_STORAGE_PDU;
    msgIoInfo.state = static_cast<int32_t>(SimMessageStatus::SIM_MESSAGE_STATUS_READ);
    msgIoInfo.index = 0;
    int32_t ret = g_rilInterface->UpdateCdmaSimMessage(SLOTID_1, GetSerialId(), msgIoInfo);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1UpdateCdmaSimMessage_1100
 * @tc.name: testV1UpdateCdmaSimMessage009
 * @tc.desc: UpdateCdmaSimMessage, state is SIM_MESSAGE_STATUS_UNSENT
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1UpdateCdmaSimMessage009, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SmsMessageIOInfo msgIoInfo;
    msgIoInfo.smscPdu = TEST_CDMA_PDU;
    msgIoInfo.pdu = TEST_STORAGE_PDU;
    msgIoInfo.state = static_cast<int32_t>(SimMessageStatus::SIM_MESSAGE_STATUS_UNSENT);
    msgIoInfo.index = 0;
    int32_t ret = g_rilInterface->UpdateCdmaSimMessage(SLOTID_1, GetSerialId(), msgIoInfo);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1UpdateCdmaSimMessage_1200
 * @tc.name: testV1UpdateCdmaSimMessage010
 * @tc.desc: UpdateCdmaSimMessage, state is SIM_MESSAGE_STATUS_UNSENT
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1UpdateCdmaSimMessage010, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SmsMessageIOInfo msgIoInfo;
    msgIoInfo.smscPdu = TEST_CDMA_PDU;
    msgIoInfo.pdu = TEST_STORAGE_PDU;
    msgIoInfo.state = static_cast<int32_t>(SimMessageStatus::SIM_MESSAGE_STATUS_UNSENT);
    msgIoInfo.index = 255;
    int32_t ret = g_rilInterface->UpdateCdmaSimMessage(SLOTID_1, GetSerialId(), msgIoInfo);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1UpdateCdmaSimMessage_1300
 * @tc.name: testV1UpdateCdmaSimMessage011
 * @tc.desc: UpdateCdmaSimMessage, smscPdu is TEST_CDMA_PDU
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1UpdateCdmaSimMessage011, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    SmsMessageIOInfo msgIoInfo;
    msgIoInfo.smscPdu = TEST_CDMA_PDU;
    msgIoInfo.pdu = TEST_STORAGE_PDU;
    msgIoInfo.state = static_cast<int32_t>(SimMessageStatus::SIM_MESSAGE_STATUS_SENT);
    msgIoInfo.index = 0;
    int32_t ret = g_rilInterface->UpdateCdmaSimMessage(SLOTID_2, GetSerialId(), msgIoInfo);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1UpdateCdmaSimMessage_1400
 * @tc.name: testV1UpdateCdmaSimMessage012
 * @tc.desc: UpdateCdmaSimMessage, smscPdu is ""
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1UpdateCdmaSimMessage012, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    SmsMessageIOInfo msgIoInfo;
    msgIoInfo.smscPdu = "";
    msgIoInfo.pdu = TEST_STORAGE_PDU;
    msgIoInfo.state = static_cast<int32_t>(SimMessageStatus::SIM_MESSAGE_STATUS_SENT);
    msgIoInfo.index = 0;
    int32_t ret = g_rilInterface->UpdateCdmaSimMessage(SLOTID_2, GetSerialId(), msgIoInfo);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1UpdateCdmaSimMessage_1500
 * @tc.name: testV1UpdateCdmaSimMessage013
 * @tc.desc: UpdateCdmaSimMessage, smscPdu is "@"
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1UpdateCdmaSimMessage013, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    SmsMessageIOInfo msgIoInfo;
    msgIoInfo.smscPdu = "@";
    msgIoInfo.pdu = TEST_STORAGE_PDU;
    msgIoInfo.state = static_cast<int32_t>(SimMessageStatus::SIM_MESSAGE_STATUS_SENT);
    msgIoInfo.index = 0;
    int32_t ret = g_rilInterface->UpdateCdmaSimMessage(SLOTID_2, GetSerialId(), msgIoInfo);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1UpdateCdmaSimMessage_1600
 * @tc.name: testV1UpdateCdmaSimMessage014
 * @tc.desc: UpdateCdmaSimMessage, pdu is TEST_SEND_PDU
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1UpdateCdmaSimMessage014, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    SmsMessageIOInfo msgIoInfo;
    msgIoInfo.smscPdu = TEST_SMSC_PDU;
    msgIoInfo.pdu = TEST_SEND_PDU;
    msgIoInfo.state = static_cast<int32_t>(SimMessageStatus::SIM_MESSAGE_STATUS_SENT);
    msgIoInfo.index = 0;
    int32_t ret = g_rilInterface->UpdateCdmaSimMessage(SLOTID_2, GetSerialId(), msgIoInfo);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1UpdateCdmaSimMessage_1700
 * @tc.name: testV1UpdateCdmaSimMessage015
 * @tc.desc: UpdateCdmaSimMessage, pdu is ""
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1UpdateCdmaSimMessage015, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    SmsMessageIOInfo msgIoInfo;
    msgIoInfo.smscPdu = TEST_SMSC_PDU;
    msgIoInfo.pdu = "";
    msgIoInfo.state = static_cast<int32_t>(SimMessageStatus::SIM_MESSAGE_STATUS_SENT);
    msgIoInfo.index = 0;
    int32_t ret = g_rilInterface->UpdateCdmaSimMessage(SLOTID_2, GetSerialId(), msgIoInfo);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1UpdateCdmaSimMessage_1800
 * @tc.name: testV1UpdateCdmaSimMessage016
 * @tc.desc: UpdateCdmaSimMessage, pdu is "@"
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1UpdateCdmaSimMessage016, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    SmsMessageIOInfo msgIoInfo;
    msgIoInfo.smscPdu = TEST_SMSC_PDU;
    msgIoInfo.pdu = "@";
    msgIoInfo.state = static_cast<int32_t>(SimMessageStatus::SIM_MESSAGE_STATUS_SENT);
    msgIoInfo.index = 0;
    int32_t ret = g_rilInterface->UpdateCdmaSimMessage(SLOTID_2, GetSerialId(), msgIoInfo);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1UpdateCdmaSimMessage_1900
 * @tc.name: testV1UpdateCdmaSimMessage017
 * @tc.desc: UpdateCdmaSimMessage, state is SIM_MESSAGE_STATUS_UNREAD
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1UpdateCdmaSimMessage017, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    SmsMessageIOInfo msgIoInfo;
    msgIoInfo.smscPdu = TEST_CDMA_PDU;
    msgIoInfo.pdu = TEST_STORAGE_PDU;
    msgIoInfo.state = static_cast<int32_t>(SimMessageStatus::SIM_MESSAGE_STATUS_UNREAD);
    msgIoInfo.index = 0;
    int32_t ret = g_rilInterface->UpdateCdmaSimMessage(SLOTID_2, GetSerialId(), msgIoInfo);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1UpdateCdmaSimMessage_2000
 * @tc.name: testV1UpdateCdmaSimMessage018
 * @tc.desc: UpdateCdmaSimMessage, state is SIM_MESSAGE_STATUS_READ
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1UpdateCdmaSimMessage018, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    SmsMessageIOInfo msgIoInfo;
    msgIoInfo.smscPdu = TEST_CDMA_PDU;
    msgIoInfo.pdu = TEST_STORAGE_PDU;
    msgIoInfo.state = static_cast<int32_t>(SimMessageStatus::SIM_MESSAGE_STATUS_READ);
    msgIoInfo.index = 0;
    int32_t ret = g_rilInterface->UpdateCdmaSimMessage(SLOTID_2, GetSerialId(), msgIoInfo);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1UpdateCdmaSimMessage_2100
 * @tc.name: testV1UpdateCdmaSimMessage019
 * @tc.desc: UpdateCdmaSimMessage, state is SIM_MESSAGE_STATUS_UNSENT
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1UpdateCdmaSimMessage019, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    SmsMessageIOInfo msgIoInfo;
    msgIoInfo.smscPdu = TEST_CDMA_PDU;
    msgIoInfo.pdu = TEST_STORAGE_PDU;
    msgIoInfo.state = static_cast<int32_t>(SimMessageStatus::SIM_MESSAGE_STATUS_UNSENT);
    msgIoInfo.index = 0;
    int32_t ret = g_rilInterface->UpdateCdmaSimMessage(SLOTID_2, GetSerialId(), msgIoInfo);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1UpdateCdmaSimMessage_2200
 * @tc.name: testV1UpdateCdmaSimMessage020
 * @tc.desc: UpdateCdmaSimMessage, state is SIM_MESSAGE_STATUS_UNSENT
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1UpdateCdmaSimMessage020, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    SmsMessageIOInfo msgIoInfo;
    msgIoInfo.smscPdu = TEST_CDMA_PDU;
    msgIoInfo.pdu = TEST_STORAGE_PDU;
    msgIoInfo.state = static_cast<int32_t>(SimMessageStatus::SIM_MESSAGE_STATUS_UNSENT);
    msgIoInfo.index = 255;
    int32_t ret = g_rilInterface->UpdateCdmaSimMessage(SLOTID_2, GetSerialId(), msgIoInfo);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1UpdateCdmaSimMessage_2300
 * @tc.name: testV1UpdateCdmaSimMessage021
 * @tc.desc: UpdateCdmaSimMessage, stability test
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1UpdateCdmaSimMessage021, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SmsMessageIOInfo msgIoInfo;
    msgIoInfo.smscPdu = TEST_CDMA_PDU;
    msgIoInfo.pdu = TEST_STORAGE_PDU;
    msgIoInfo.state = static_cast<int32_t>(SimMessageStatus::SIM_MESSAGE_STATUS_SENT);
    msgIoInfo.index = 0;
    int32_t ret = 0;
    for (int i = 0; i < 100; i++) {
        ret = g_rilInterface->UpdateCdmaSimMessage(SLOTID_1, GetSerialId(), msgIoInfo);
        EXPECT_EQ(SUCCESS, ret);
    }
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1UpdateCdmaSimMessage_2400
 * @tc.name: testV1UpdateCdmaSimMessage022
 * @tc.desc: UpdateCdmaSimMessage, SerialId is -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1UpdateCdmaSimMessage022, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SmsMessageIOInfo msgIoInfo;
    msgIoInfo.smscPdu = TEST_CDMA_PDU;
    msgIoInfo.pdu = TEST_STORAGE_PDU;
    msgIoInfo.state = static_cast<int32_t>(SimMessageStatus::SIM_MESSAGE_STATUS_SENT);
    msgIoInfo.index = 0;
    int32_t ret = g_rilInterface->UpdateCdmaSimMessage(SLOTID_1, -1, msgIoInfo);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1UpdateCdmaSimMessage_2500
 * @tc.name: testV1UpdateCdmaSimMessage023
 * @tc.desc: UpdateCdmaSimMessage, SerialId is -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1UpdateCdmaSimMessage023, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    SmsMessageIOInfo msgIoInfo;
    msgIoInfo.smscPdu = TEST_CDMA_PDU;
    msgIoInfo.pdu = TEST_STORAGE_PDU;
    msgIoInfo.state = static_cast<int32_t>(SimMessageStatus::SIM_MESSAGE_STATUS_SENT);
    msgIoInfo.index = 0;
    int32_t ret = g_rilInterface->UpdateCdmaSimMessage(SLOTID_2, -1, msgIoInfo);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetNetworkSearchInformation_0300
 * @tc.name: testV1GetNetworkSearchInformation001
 * @tc.desc: GetNetworkSearchInformation, SerialId is -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetNetworkSearchInformation001, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->GetNetworkSearchInformation(SLOTID_1, -1);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetNetworkSearchInformation_0400
 * @tc.name: testV1GetNetworkSearchInformation002
 * @tc.desc: GetNetworkSearchInformation, SerialId is -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetNetworkSearchInformation002, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t ret = g_rilInterface->GetNetworkSearchInformation(SLOTID_2, -1);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetNetworkSearchInformation_0500
 * @tc.name: testV1GetNetworkSearchInformation003
 * @tc.desc: GetNetworkSearchInformation, stability test
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetNetworkSearchInformation003, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = 0;
    for (int i = 0; i < 100; i++) {
        ret = g_rilInterface->GetNetworkSearchInformation(SLOTID_1, GetSerialId());
        EXPECT_EQ(SUCCESS, ret);
    }
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetNetworkSelectionMode_0300
 * @tc.name: testV1GetNetworkSelectionMode001
 * @tc.desc: GetNetworkSelectionMode, SerialId is -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetNetworkSelectionMode001, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->GetNetworkSelectionMode(SLOTID_1, -1);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetNetworkSelectionMode_0400
 * @tc.name: testV1GetNetworkSelectionMode002
 * @tc.desc: GetNetworkSelectionMode, SerialId is -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetNetworkSelectionMode002, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t ret = g_rilInterface->GetNetworkSelectionMode(SLOTID_2, -1);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetNetworkSelectionMode_0500
 * @tc.name: testV1GetNetworkSelectionMode003
 * @tc.desc: GetNetworkSelectionMode, stability test
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetNetworkSelectionMode003, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = 0;
    for (int i = 0; i < 100; i++) {
        ret = g_rilInterface->GetNetworkSelectionMode(SLOTID_1, GetSerialId());
        EXPECT_EQ(SUCCESS, ret);
    }
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetNetworkSelectionMode_0300
 * @tc.name: testV1SetNetworkSelectionMode001
 * @tc.desc: SetNetworkSelectionMode, selectMode is CORE_NETWORK_MODE_AUTO
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetNetworkSelectionMode001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SetNetworkModeInfo setNetworkModeInfo;
    setNetworkModeInfo.selectMode = static_cast<int32_t>(PreferredNetworkMode::CORE_NETWORK_MODE_AUTO);
    setNetworkModeInfo.oper = "46000";
    int32_t ret = g_rilInterface->SetNetworkSelectionMode(SLOTID_1, GetSerialId(), setNetworkModeInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetNetworkSelectionMode_0400
 * @tc.name: testV1SetNetworkSelectionMode002
 * @tc.desc: SetNetworkSelectionMode, selectMode is CORE_NETWORK_MODE_GSM
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetNetworkSelectionMode002, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SetNetworkModeInfo setNetworkModeInfo;
    setNetworkModeInfo.selectMode = static_cast<int32_t>(PreferredNetworkMode::CORE_NETWORK_MODE_GSM);
    setNetworkModeInfo.oper = "46000";
    int32_t ret = g_rilInterface->SetNetworkSelectionMode(SLOTID_1, GetSerialId(), setNetworkModeInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetNetworkSelectionMode_0500
 * @tc.name: testV1SetNetworkSelectionMode003
 * @tc.desc: SetNetworkSelectionMode, selectMode is CORE_NETWORK_MODE_WCDMA
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetNetworkSelectionMode003, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SetNetworkModeInfo setNetworkModeInfo;
    setNetworkModeInfo.selectMode = static_cast<int32_t>(PreferredNetworkMode::CORE_NETWORK_MODE_WCDMA);
    setNetworkModeInfo.oper = "46000";
    int32_t ret = g_rilInterface->SetNetworkSelectionMode(SLOTID_1, GetSerialId(), setNetworkModeInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetNetworkSelectionMode_0600
 * @tc.name: testV1SetNetworkSelectionMode004
 * @tc.desc: SetNetworkSelectionMode, selectMode is CORE_NETWORK_MODE_LTE
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetNetworkSelectionMode004, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SetNetworkModeInfo setNetworkModeInfo;
    setNetworkModeInfo.selectMode = static_cast<int32_t>(PreferredNetworkMode::CORE_NETWORK_MODE_LTE);
    setNetworkModeInfo.oper = "46000";
    int32_t ret = g_rilInterface->SetNetworkSelectionMode(SLOTID_1, GetSerialId(), setNetworkModeInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetNetworkSelectionMode_0700
 * @tc.name: testV1SetNetworkSelectionMode005
 * @tc.desc: SetNetworkSelectionMode, selectMode is CORE_NETWORK_MODE_LTE_WCDMA
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetNetworkSelectionMode005, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SetNetworkModeInfo setNetworkModeInfo;
    setNetworkModeInfo.selectMode = static_cast<int32_t>(PreferredNetworkMode::CORE_NETWORK_MODE_LTE_WCDMA);
    setNetworkModeInfo.oper = "46000";
    int32_t ret = g_rilInterface->SetNetworkSelectionMode(SLOTID_1, GetSerialId(), setNetworkModeInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetNetworkSelectionMode_0800
 * @tc.name: testV1SetNetworkSelectionMode006
 * @tc.desc: SetNetworkSelectionMode, selectMode is CORE_NETWORK_MODE_LTE_WCDMA_GSM
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetNetworkSelectionMode006, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SetNetworkModeInfo setNetworkModeInfo;
    setNetworkModeInfo.selectMode = static_cast<int32_t>(PreferredNetworkMode::CORE_NETWORK_MODE_LTE_WCDMA_GSM);
    setNetworkModeInfo.oper = "46000";
    int32_t ret = g_rilInterface->SetNetworkSelectionMode(SLOTID_1, GetSerialId(), setNetworkModeInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetNetworkSelectionMode_0900
 * @tc.name: testV1SetNetworkSelectionMode007
 * @tc.desc: SetNetworkSelectionMode, selectMode is CORE_NETWORK_MODE_WCDMA_GSM
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetNetworkSelectionMode007, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SetNetworkModeInfo setNetworkModeInfo;
    setNetworkModeInfo.selectMode = static_cast<int32_t>(PreferredNetworkMode::CORE_NETWORK_MODE_WCDMA_GSM);
    setNetworkModeInfo.oper = "46000";
    int32_t ret = g_rilInterface->SetNetworkSelectionMode(SLOTID_1, GetSerialId(), setNetworkModeInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetNetworkSelectionMode_1000
 * @tc.name: testV1SetNetworkSelectionMode008
 * @tc.desc: SetNetworkSelectionMode, selectMode is CORE_NETWORK_MODE_CDMA
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetNetworkSelectionMode008, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SetNetworkModeInfo setNetworkModeInfo;
    setNetworkModeInfo.selectMode = static_cast<int32_t>(PreferredNetworkMode::CORE_NETWORK_MODE_CDMA);
    setNetworkModeInfo.oper = "46000";
    int32_t ret = g_rilInterface->SetNetworkSelectionMode(SLOTID_1, GetSerialId(), setNetworkModeInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetNetworkSelectionMode_1100
 * @tc.name: testV1SetNetworkSelectionMode009
 * @tc.desc: SetNetworkSelectionMode, selectMode is CORE_NETWORK_MODE_EVDO
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetNetworkSelectionMode009, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SetNetworkModeInfo setNetworkModeInfo;
    setNetworkModeInfo.selectMode = static_cast<int32_t>(PreferredNetworkMode::CORE_NETWORK_MODE_EVDO);
    setNetworkModeInfo.oper = "46000";
    int32_t ret = g_rilInterface->SetNetworkSelectionMode(SLOTID_1, GetSerialId(), setNetworkModeInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetNetworkSelectionMode_1200
 * @tc.name: testV1SetNetworkSelectionMode010
 * @tc.desc: SetNetworkSelectionMode, selectMode is CORE_NETWORK_MODE_EVDO_CDMA
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetNetworkSelectionMode010, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SetNetworkModeInfo setNetworkModeInfo;
    setNetworkModeInfo.selectMode = static_cast<int32_t>(PreferredNetworkMode::CORE_NETWORK_MODE_EVDO_CDMA);
    setNetworkModeInfo.oper = "46000";
    int32_t ret = g_rilInterface->SetNetworkSelectionMode(SLOTID_1, GetSerialId(), setNetworkModeInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetNetworkSelectionMode_1300
 * @tc.name: testV1SetNetworkSelectionMode011
 * @tc.desc: SetNetworkSelectionMode, selectMode is CORE_NETWORK_MODE_WCDMA_GSM_EVDO_CDMA
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetNetworkSelectionMode011, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SetNetworkModeInfo setNetworkModeInfo;
    setNetworkModeInfo.selectMode = static_cast<int32_t>(PreferredNetworkMode::CORE_NETWORK_MODE_WCDMA_GSM_EVDO_CDMA);
    setNetworkModeInfo.oper = "46000";
    int32_t ret = g_rilInterface->SetNetworkSelectionMode(SLOTID_1, GetSerialId(), setNetworkModeInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetNetworkSelectionMode_1400
 * @tc.name: testV1SetNetworkSelectionMode012
 * @tc.desc: SetNetworkSelectionMode, selectMode is CORE_NETWORK_MODE_LTE_EVDO_CDMA
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetNetworkSelectionMode012, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SetNetworkModeInfo setNetworkModeInfo;
    setNetworkModeInfo.selectMode = static_cast<int32_t>(PreferredNetworkMode::CORE_NETWORK_MODE_LTE_EVDO_CDMA);
    setNetworkModeInfo.oper = "46000";
    int32_t ret = g_rilInterface->SetNetworkSelectionMode(SLOTID_1, GetSerialId(), setNetworkModeInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetNetworkSelectionMode_1500
 * @tc.name: testV1SetNetworkSelectionMode013
 * @tc.desc: SetNetworkSelectionMode, selectMode is CORE_NETWORK_MODE_LTE_WCDMA_GSM_EVDO_CDMA
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetNetworkSelectionMode013, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SetNetworkModeInfo setNetworkModeInfo;
    setNetworkModeInfo.selectMode =
        static_cast<int32_t>(PreferredNetworkMode::CORE_NETWORK_MODE_LTE_WCDMA_GSM_EVDO_CDMA);
    setNetworkModeInfo.oper = "46000";
    int32_t ret = g_rilInterface->SetNetworkSelectionMode(SLOTID_1, GetSerialId(), setNetworkModeInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetNetworkSelectionMode_1600
 * @tc.name: testV1SetNetworkSelectionMode014
 * @tc.desc: SetNetworkSelectionMode, selectMode is CORE_NETWORK_MODE_TDSCDMA
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetNetworkSelectionMode014, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SetNetworkModeInfo setNetworkModeInfo;
    setNetworkModeInfo.selectMode = static_cast<int32_t>(PreferredNetworkMode::CORE_NETWORK_MODE_TDSCDMA);
    setNetworkModeInfo.oper = "46000";
    int32_t ret = g_rilInterface->SetNetworkSelectionMode(SLOTID_1, GetSerialId(), setNetworkModeInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetNetworkSelectionMode_1700
 * @tc.name: testV1SetNetworkSelectionMode015
 * @tc.desc: SetNetworkSelectionMode, selectMode is CORE_NETWORK_MODE_TDSCDMA_GSM
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetNetworkSelectionMode015, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SetNetworkModeInfo setNetworkModeInfo;
    setNetworkModeInfo.selectMode = static_cast<int32_t>(PreferredNetworkMode::CORE_NETWORK_MODE_TDSCDMA_GSM);
    setNetworkModeInfo.oper = "46000";
    int32_t ret = g_rilInterface->SetNetworkSelectionMode(SLOTID_1, GetSerialId(), setNetworkModeInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetNetworkSelectionMode_1800
 * @tc.name: testV1SetNetworkSelectionMode016
 * @tc.desc: SetNetworkSelectionMode, selectMode is CORE_NETWORK_MODE_TDSCDMA_WCDMA
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetNetworkSelectionMode016, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SetNetworkModeInfo setNetworkModeInfo;
    setNetworkModeInfo.selectMode = static_cast<int32_t>(PreferredNetworkMode::CORE_NETWORK_MODE_TDSCDMA_WCDMA);
    setNetworkModeInfo.oper = "46000";
    int32_t ret = g_rilInterface->SetNetworkSelectionMode(SLOTID_1, GetSerialId(), setNetworkModeInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetNetworkSelectionMode_1900
 * @tc.name: testV1SetNetworkSelectionMode017
 * @tc.desc: SetNetworkSelectionMode, selectMode is CORE_NETWORK_MODE_TDSCDMA_WCDMA_GSM
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetNetworkSelectionMode017, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SetNetworkModeInfo setNetworkModeInfo;
    setNetworkModeInfo.selectMode = static_cast<int32_t>(PreferredNetworkMode::CORE_NETWORK_MODE_TDSCDMA_WCDMA_GSM);
    setNetworkModeInfo.oper = "46000";
    int32_t ret = g_rilInterface->SetNetworkSelectionMode(SLOTID_1, GetSerialId(), setNetworkModeInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetNetworkSelectionMode_2000
 * @tc.name: testV1SetNetworkSelectionMode018
 * @tc.desc: SetNetworkSelectionMode, selectMode is CORE_NETWORK_MODE_LTE_TDSCDMA
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetNetworkSelectionMode018, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SetNetworkModeInfo setNetworkModeInfo;
    setNetworkModeInfo.selectMode = static_cast<int32_t>(PreferredNetworkMode::CORE_NETWORK_MODE_LTE_TDSCDMA);
    setNetworkModeInfo.oper = "46000";
    int32_t ret = g_rilInterface->SetNetworkSelectionMode(SLOTID_1, GetSerialId(), setNetworkModeInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetNetworkSelectionMode_2100
 * @tc.name: testV1SetNetworkSelectionMode019
 * @tc.desc: SetNetworkSelectionMode, selectMode is CORE_NETWORK_MODE_LTE_TDSCDMA_GSM
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetNetworkSelectionMode019, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SetNetworkModeInfo setNetworkModeInfo;
    setNetworkModeInfo.selectMode = static_cast<int32_t>(PreferredNetworkMode::CORE_NETWORK_MODE_LTE_TDSCDMA_GSM);
    setNetworkModeInfo.oper = "46000";
    int32_t ret = g_rilInterface->SetNetworkSelectionMode(SLOTID_1, GetSerialId(), setNetworkModeInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetNetworkSelectionMode_2200
 * @tc.name: testV1SetNetworkSelectionMode020
 * @tc.desc: SetNetworkSelectionMode, selectMode is CORE_NETWORK_MODE_LTE_TDSCDMA_WCDMA
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetNetworkSelectionMode020, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SetNetworkModeInfo setNetworkModeInfo;
    setNetworkModeInfo.selectMode = static_cast<int32_t>(PreferredNetworkMode::CORE_NETWORK_MODE_LTE_TDSCDMA_WCDMA);
    setNetworkModeInfo.oper = "46000";
    int32_t ret = g_rilInterface->SetNetworkSelectionMode(SLOTID_1, GetSerialId(), setNetworkModeInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetNetworkSelectionMode_2300
 * @tc.name: testV1SetNetworkSelectionMode021
 * @tc.desc: SetNetworkSelectionMode, selectMode is CORE_NETWORK_MODE_LTE_TDSCDMA_WCDMA_GSM
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetNetworkSelectionMode021, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SetNetworkModeInfo setNetworkModeInfo;
    setNetworkModeInfo.selectMode = static_cast<int32_t>(PreferredNetworkMode::CORE_NETWORK_MODE_LTE_TDSCDMA_WCDMA_GSM);
    setNetworkModeInfo.oper = "46000";
    int32_t ret = g_rilInterface->SetNetworkSelectionMode(SLOTID_1, GetSerialId(), setNetworkModeInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetNetworkSelectionMode_2400
 * @tc.name: testV1SetNetworkSelectionMode022
 * @tc.desc: SetNetworkSelectionMode, selectMode is CORE_NETWORK_MODE_TDSCDMA_WCDMA_GSM_EVDO_CDMA
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetNetworkSelectionMode022, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SetNetworkModeInfo setNetworkModeInfo;
    setNetworkModeInfo.selectMode =
        static_cast<int32_t>(PreferredNetworkMode::CORE_NETWORK_MODE_TDSCDMA_WCDMA_GSM_EVDO_CDMA);
    setNetworkModeInfo.oper = "46000";
    int32_t ret = g_rilInterface->SetNetworkSelectionMode(SLOTID_1, GetSerialId(), setNetworkModeInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetNetworkSelectionMode_2500
 * @tc.name: testV1SetNetworkSelectionMode023
 * @tc.desc: SetNetworkSelectionMode, selectMode is CORE_NETWORK_MODE_LTE_TDSCDMA_WCDMA_GSM_EVDO_CDMA
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetNetworkSelectionMode023, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SetNetworkModeInfo setNetworkModeInfo;
    setNetworkModeInfo.selectMode =
        static_cast<int32_t>(PreferredNetworkMode::CORE_NETWORK_MODE_LTE_TDSCDMA_WCDMA_GSM_EVDO_CDMA);
    setNetworkModeInfo.oper = "46000";
    int32_t ret = g_rilInterface->SetNetworkSelectionMode(SLOTID_1, GetSerialId(), setNetworkModeInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetNetworkSelectionMode_2600
 * @tc.name: testV1SetNetworkSelectionMode024
 * @tc.desc: SetNetworkSelectionMode, selectMode is CORE_NETWORK_MODE_NR
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetNetworkSelectionMode024, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SetNetworkModeInfo setNetworkModeInfo;
    setNetworkModeInfo.selectMode = static_cast<int32_t>(PreferredNetworkMode::CORE_NETWORK_MODE_NR);
    setNetworkModeInfo.oper = "46000";
    int32_t ret = g_rilInterface->SetNetworkSelectionMode(SLOTID_1, GetSerialId(), setNetworkModeInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetNetworkSelectionMode_2700
 * @tc.name: testV1SetNetworkSelectionMode025
 * @tc.desc: SetNetworkSelectionMode, selectMode is CORE_NETWORK_MODE_NR_LTE
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetNetworkSelectionMode025, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SetNetworkModeInfo setNetworkModeInfo;
    setNetworkModeInfo.selectMode = static_cast<int32_t>(PreferredNetworkMode::CORE_NETWORK_MODE_NR_LTE);
    setNetworkModeInfo.oper = "46000";
    int32_t ret = g_rilInterface->SetNetworkSelectionMode(SLOTID_1, GetSerialId(), setNetworkModeInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetNetworkSelectionMode_2800
 * @tc.name: testV1SetNetworkSelectionMode026
 * @tc.desc: SetNetworkSelectionMode, selectMode is CORE_NETWORK_MODE_NR_LTE_WCDMA
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetNetworkSelectionMode026, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SetNetworkModeInfo setNetworkModeInfo;
    setNetworkModeInfo.selectMode = static_cast<int32_t>(PreferredNetworkMode::CORE_NETWORK_MODE_NR_LTE_WCDMA);
    setNetworkModeInfo.oper = "46000";
    int32_t ret = g_rilInterface->SetNetworkSelectionMode(SLOTID_1, GetSerialId(), setNetworkModeInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetNetworkSelectionMode_2900
 * @tc.name: testV1SetNetworkSelectionMode027
 * @tc.desc: SetNetworkSelectionMode, selectMode is CORE_NETWORK_MODE_NR_LTE_WCDMA_GSM
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetNetworkSelectionMode027, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SetNetworkModeInfo setNetworkModeInfo;
    setNetworkModeInfo.selectMode = static_cast<int32_t>(PreferredNetworkMode::CORE_NETWORK_MODE_NR_LTE_WCDMA_GSM);
    setNetworkModeInfo.oper = "46000";
    int32_t ret = g_rilInterface->SetNetworkSelectionMode(SLOTID_1, GetSerialId(), setNetworkModeInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetNetworkSelectionMode_3000
 * @tc.name: testV1SetNetworkSelectionMode028
 * @tc.desc: SetNetworkSelectionMode, selectMode is CORE_NETWORK_MODE_NR_LTE_EVDO_CDMA
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetNetworkSelectionMode028, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SetNetworkModeInfo setNetworkModeInfo;
    setNetworkModeInfo.selectMode = static_cast<int32_t>(PreferredNetworkMode::CORE_NETWORK_MODE_NR_LTE_EVDO_CDMA);
    setNetworkModeInfo.oper = "46000";
    int32_t ret = g_rilInterface->SetNetworkSelectionMode(SLOTID_1, GetSerialId(), setNetworkModeInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetNetworkSelectionMode_3100
 * @tc.name: testV1SetNetworkSelectionMode029
 * @tc.desc: SetNetworkSelectionMode, selectMode is CORE_NETWORK_MODE_NR_LTE_WCDMA_GSM_EVDO_CDMA
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetNetworkSelectionMode029, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SetNetworkModeInfo setNetworkModeInfo;
    setNetworkModeInfo.selectMode =
        static_cast<int32_t>(PreferredNetworkMode::CORE_NETWORK_MODE_NR_LTE_WCDMA_GSM_EVDO_CDMA);
    setNetworkModeInfo.oper = "46000";
    int32_t ret = g_rilInterface->SetNetworkSelectionMode(SLOTID_1, GetSerialId(), setNetworkModeInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetNetworkSelectionMode_3200
 * @tc.name: testV1SetNetworkSelectionMode030
 * @tc.desc: SetNetworkSelectionMode, selectMode is CORE_NETWORK_MODE_NR_LTE_TDSCDMA
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetNetworkSelectionMode030, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SetNetworkModeInfo setNetworkModeInfo;
    setNetworkModeInfo.selectMode = static_cast<int32_t>(PreferredNetworkMode::CORE_NETWORK_MODE_NR_LTE_TDSCDMA);
    setNetworkModeInfo.oper = "46000";
    int32_t ret = g_rilInterface->SetNetworkSelectionMode(SLOTID_1, GetSerialId(), setNetworkModeInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetNetworkSelectionMode_3300
 * @tc.name: testV1SetNetworkSelectionMode031
 * @tc.desc: SetNetworkSelectionMode, selectMode is CORE_NETWORK_MODE_NR_LTE_TDSCDMA_GSM
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetNetworkSelectionMode031, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SetNetworkModeInfo setNetworkModeInfo;
    setNetworkModeInfo.selectMode = static_cast<int32_t>(PreferredNetworkMode::CORE_NETWORK_MODE_NR_LTE_TDSCDMA_GSM);
    setNetworkModeInfo.oper = "46000";
    int32_t ret = g_rilInterface->SetNetworkSelectionMode(SLOTID_1, GetSerialId(), setNetworkModeInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetNetworkSelectionMode_3400
 * @tc.name: testV1SetNetworkSelectionMode032
 * @tc.desc: SetNetworkSelectionMode, selectMode is CORE_NETWORK_MODE_NR_LTE_TDSCDMA_WCDMA
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetNetworkSelectionMode032, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SetNetworkModeInfo setNetworkModeInfo;
    setNetworkModeInfo.selectMode = static_cast<int32_t>(PreferredNetworkMode::CORE_NETWORK_MODE_NR_LTE_TDSCDMA_WCDMA);
    setNetworkModeInfo.oper = "46000";
    int32_t ret = g_rilInterface->SetNetworkSelectionMode(SLOTID_1, GetSerialId(), setNetworkModeInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetNetworkSelectionMode_3500
 * @tc.name: testV1SetNetworkSelectionMode033
 * @tc.desc: SetNetworkSelectionMode, selectMode is CORE_NETWORK_MODE_NR_LTE_TDSCDMA_WCDMA_GSM
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetNetworkSelectionMode033, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SetNetworkModeInfo setNetworkModeInfo;
    setNetworkModeInfo.selectMode =
        static_cast<int32_t>(PreferredNetworkMode::CORE_NETWORK_MODE_NR_LTE_TDSCDMA_WCDMA_GSM);
    setNetworkModeInfo.oper = "46000";
    int32_t ret = g_rilInterface->SetNetworkSelectionMode(SLOTID_1, GetSerialId(), setNetworkModeInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetNetworkSelectionMode_3600
 * @tc.name: testV1SetNetworkSelectionMode034
 * @tc.desc: SetNetworkSelectionMode, selectMode is CORE_NETWORK_MODE_NR_LTE_TDSCDMA_WCDMA_GSM_EVDO_CDMA
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetNetworkSelectionMode034, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SetNetworkModeInfo setNetworkModeInfo;
    setNetworkModeInfo.selectMode =
        static_cast<int32_t>(PreferredNetworkMode::CORE_NETWORK_MODE_NR_LTE_TDSCDMA_WCDMA_GSM_EVDO_CDMA);
    setNetworkModeInfo.oper = "46000";
    int32_t ret = g_rilInterface->SetNetworkSelectionMode(SLOTID_1, GetSerialId(), setNetworkModeInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetNetworkSelectionMode_3700
 * @tc.name: testV1SetNetworkSelectionMode035
 * @tc.desc: SetNetworkSelectionMode, selectMode is CORE_NETWORK_MODE_MAX_VALUE
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetNetworkSelectionMode035, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SetNetworkModeInfo setNetworkModeInfo;
    setNetworkModeInfo.selectMode = static_cast<int32_t>(PreferredNetworkMode::CORE_NETWORK_MODE_MAX_VALUE);
    setNetworkModeInfo.oper = "46000";
    int32_t ret = g_rilInterface->SetNetworkSelectionMode(SLOTID_1, GetSerialId(), setNetworkModeInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetNetworkSelectionMode_3800
 * @tc.name: testV1SetNetworkSelectionMode036
 * @tc.desc: SetNetworkSelectionMode, selectMode is CORE_NETWORK_MODE_AUTO
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetNetworkSelectionMode036, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    SetNetworkModeInfo setNetworkModeInfo;
    setNetworkModeInfo.selectMode = static_cast<int32_t>(PreferredNetworkMode::CORE_NETWORK_MODE_AUTO);
    setNetworkModeInfo.oper = "46000";
    int32_t ret = g_rilInterface->SetNetworkSelectionMode(SLOTID_2, GetSerialId(), setNetworkModeInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetNetworkSelectionMode_3900
 * @tc.name: testV1SetNetworkSelectionMode037
 * @tc.desc: SetNetworkSelectionMode, selectMode is CORE_NETWORK_MODE_GSM
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetNetworkSelectionMode037, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    SetNetworkModeInfo setNetworkModeInfo;
    setNetworkModeInfo.selectMode = static_cast<int32_t>(PreferredNetworkMode::CORE_NETWORK_MODE_GSM);
    setNetworkModeInfo.oper = "46000";
    int32_t ret = g_rilInterface->SetNetworkSelectionMode(SLOTID_2, GetSerialId(), setNetworkModeInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetNetworkSelectionMode_4000
 * @tc.name: testV1SetNetworkSelectionMode038
 * @tc.desc: SetNetworkSelectionMode, selectMode is CORE_NETWORK_MODE_WCDMA
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetNetworkSelectionMode038, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    SetNetworkModeInfo setNetworkModeInfo;
    setNetworkModeInfo.selectMode = static_cast<int32_t>(PreferredNetworkMode::CORE_NETWORK_MODE_WCDMA);
    setNetworkModeInfo.oper = "46000";
    int32_t ret = g_rilInterface->SetNetworkSelectionMode(SLOTID_2, GetSerialId(), setNetworkModeInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetNetworkSelectionMode_4100
 * @tc.name: testV1SetNetworkSelectionMode039
 * @tc.desc: SetNetworkSelectionMode, selectMode is CORE_NETWORK_MODE_LTE
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetNetworkSelectionMode039, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    SetNetworkModeInfo setNetworkModeInfo;
    setNetworkModeInfo.selectMode = static_cast<int32_t>(PreferredNetworkMode::CORE_NETWORK_MODE_LTE);
    setNetworkModeInfo.oper = "46000";
    int32_t ret = g_rilInterface->SetNetworkSelectionMode(SLOTID_2, GetSerialId(), setNetworkModeInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetNetworkSelectionMode_4200
 * @tc.name: testV1SetNetworkSelectionMode040
 * @tc.desc: SetNetworkSelectionMode, selectMode is CORE_NETWORK_MODE_LTE_WCDMA
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetNetworkSelectionMode040, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    SetNetworkModeInfo setNetworkModeInfo;
    setNetworkModeInfo.selectMode = static_cast<int32_t>(PreferredNetworkMode::CORE_NETWORK_MODE_LTE_WCDMA);
    setNetworkModeInfo.oper = "46000";
    int32_t ret = g_rilInterface->SetNetworkSelectionMode(SLOTID_2, GetSerialId(), setNetworkModeInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetNetworkSelectionMode_4300
 * @tc.name: testV1SetNetworkSelectionMode041
 * @tc.desc: SetNetworkSelectionMode, selectMode is CORE_NETWORK_MODE_LTE_WCDMA_GSM
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetNetworkSelectionMode041, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    SetNetworkModeInfo setNetworkModeInfo;
    setNetworkModeInfo.selectMode = static_cast<int32_t>(PreferredNetworkMode::CORE_NETWORK_MODE_LTE_WCDMA_GSM);
    setNetworkModeInfo.oper = "46000";
    int32_t ret = g_rilInterface->SetNetworkSelectionMode(SLOTID_2, GetSerialId(), setNetworkModeInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetNetworkSelectionMode_4400
 * @tc.name: testV1SetNetworkSelectionMode042
 * @tc.desc: SetNetworkSelectionMode, selectMode is CORE_NETWORK_MODE_WCDMA_GSM
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetNetworkSelectionMode042, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    SetNetworkModeInfo setNetworkModeInfo;
    setNetworkModeInfo.selectMode = static_cast<int32_t>(PreferredNetworkMode::CORE_NETWORK_MODE_WCDMA_GSM);
    setNetworkModeInfo.oper = "46000";
    int32_t ret = g_rilInterface->SetNetworkSelectionMode(SLOTID_2, GetSerialId(), setNetworkModeInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetNetworkSelectionMode_4500
 * @tc.name: testV1SetNetworkSelectionMode043
 * @tc.desc: SetNetworkSelectionMode, selectMode is CORE_NETWORK_MODE_CDMA
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetNetworkSelectionMode043, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    SetNetworkModeInfo setNetworkModeInfo;
    setNetworkModeInfo.selectMode = static_cast<int32_t>(PreferredNetworkMode::CORE_NETWORK_MODE_CDMA);
    setNetworkModeInfo.oper = "46000";
    int32_t ret = g_rilInterface->SetNetworkSelectionMode(SLOTID_2, GetSerialId(), setNetworkModeInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetNetworkSelectionMode_4600
 * @tc.name: testV1SetNetworkSelectionMode044
 * @tc.desc: SetNetworkSelectionMode, selectMode is CORE_NETWORK_MODE_EVDO
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetNetworkSelectionMode044, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    SetNetworkModeInfo setNetworkModeInfo;
    setNetworkModeInfo.selectMode = static_cast<int32_t>(PreferredNetworkMode::CORE_NETWORK_MODE_EVDO);
    setNetworkModeInfo.oper = "46000";
    int32_t ret = g_rilInterface->SetNetworkSelectionMode(SLOTID_2, GetSerialId(), setNetworkModeInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetNetworkSelectionMode_4700
 * @tc.name: testV1SetNetworkSelectionMode045
 * @tc.desc: SetNetworkSelectionMode, selectMode is CORE_NETWORK_MODE_EVDO_CDMA
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetNetworkSelectionMode045, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    SetNetworkModeInfo setNetworkModeInfo;
    setNetworkModeInfo.selectMode = static_cast<int32_t>(PreferredNetworkMode::CORE_NETWORK_MODE_EVDO_CDMA);
    setNetworkModeInfo.oper = "46000";
    int32_t ret = g_rilInterface->SetNetworkSelectionMode(SLOTID_2, GetSerialId(), setNetworkModeInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetNetworkSelectionMode_4800
 * @tc.name: testV1SetNetworkSelectionMode046
 * @tc.desc: SetNetworkSelectionMode, selectMode is CORE_NETWORK_MODE_WCDMA_GSM_EVDO_CDMA
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetNetworkSelectionMode046, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    SetNetworkModeInfo setNetworkModeInfo;
    setNetworkModeInfo.selectMode = static_cast<int32_t>(PreferredNetworkMode::CORE_NETWORK_MODE_WCDMA_GSM_EVDO_CDMA);
    setNetworkModeInfo.oper = "46000";
    int32_t ret = g_rilInterface->SetNetworkSelectionMode(SLOTID_2, GetSerialId(), setNetworkModeInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetNetworkSelectionMode_4900
 * @tc.name: testV1SetNetworkSelectionMode047
 * @tc.desc: SetNetworkSelectionMode, selectMode is CORE_NETWORK_MODE_LTE_EVDO_CDMA
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetNetworkSelectionMode047, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    SetNetworkModeInfo setNetworkModeInfo;
    setNetworkModeInfo.selectMode = static_cast<int32_t>(PreferredNetworkMode::CORE_NETWORK_MODE_LTE_EVDO_CDMA);
    setNetworkModeInfo.oper = "46000";
    int32_t ret = g_rilInterface->SetNetworkSelectionMode(SLOTID_2, GetSerialId(), setNetworkModeInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetNetworkSelectionMode_5000
 * @tc.name: testV1SetNetworkSelectionMode048
 * @tc.desc: SetNetworkSelectionMode, selectMode is CORE_NETWORK_MODE_LTE_WCDMA_GSM_EVDO_CDMA
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetNetworkSelectionMode048, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    SetNetworkModeInfo setNetworkModeInfo;
    setNetworkModeInfo.selectMode =
        static_cast<int32_t>(PreferredNetworkMode::CORE_NETWORK_MODE_LTE_WCDMA_GSM_EVDO_CDMA);
    setNetworkModeInfo.oper = "46000";
    int32_t ret = g_rilInterface->SetNetworkSelectionMode(SLOTID_2, GetSerialId(), setNetworkModeInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetNetworkSelectionMode_5100
 * @tc.name: testV1SetNetworkSelectionMode049
 * @tc.desc: SetNetworkSelectionMode, selectMode is CORE_NETWORK_MODE_TDSCDMA
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetNetworkSelectionMode049, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    SetNetworkModeInfo setNetworkModeInfo;
    setNetworkModeInfo.selectMode = static_cast<int32_t>(PreferredNetworkMode::CORE_NETWORK_MODE_TDSCDMA);
    setNetworkModeInfo.oper = "46000";
    int32_t ret = g_rilInterface->SetNetworkSelectionMode(SLOTID_2, GetSerialId(), setNetworkModeInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetNetworkSelectionMode_5200
 * @tc.name: testV1SetNetworkSelectionMode050
 * @tc.desc: SetNetworkSelectionMode, selectMode is CORE_NETWORK_MODE_TDSCDMA_GSM
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetNetworkSelectionMode050, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    SetNetworkModeInfo setNetworkModeInfo;
    setNetworkModeInfo.selectMode = static_cast<int32_t>(PreferredNetworkMode::CORE_NETWORK_MODE_TDSCDMA_GSM);
    setNetworkModeInfo.oper = "46000";
    int32_t ret = g_rilInterface->SetNetworkSelectionMode(SLOTID_2, GetSerialId(), setNetworkModeInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetNetworkSelectionMode_5300
 * @tc.name: testV1SetNetworkSelectionMode051
 * @tc.desc: SetNetworkSelectionMode, selectMode is CORE_NETWORK_MODE_TDSCDMA_WCDMA
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetNetworkSelectionMode051, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    SetNetworkModeInfo setNetworkModeInfo;
    setNetworkModeInfo.selectMode = static_cast<int32_t>(PreferredNetworkMode::CORE_NETWORK_MODE_TDSCDMA_WCDMA);
    setNetworkModeInfo.oper = "46000";
    int32_t ret = g_rilInterface->SetNetworkSelectionMode(SLOTID_2, GetSerialId(), setNetworkModeInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetNetworkSelectionMode_5400
 * @tc.name: testV1SetNetworkSelectionMode052
 * @tc.desc: SetNetworkSelectionMode, selectMode is CORE_NETWORK_MODE_TDSCDMA_WCDMA_GSM
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetNetworkSelectionMode052, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    SetNetworkModeInfo setNetworkModeInfo;
    setNetworkModeInfo.selectMode = static_cast<int32_t>(PreferredNetworkMode::CORE_NETWORK_MODE_TDSCDMA_WCDMA_GSM);
    setNetworkModeInfo.oper = "46000";
    int32_t ret = g_rilInterface->SetNetworkSelectionMode(SLOTID_2, GetSerialId(), setNetworkModeInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetNetworkSelectionMode_5500
 * @tc.name: testV1SetNetworkSelectionMode053
 * @tc.desc: SetNetworkSelectionMode, selectMode is CORE_NETWORK_MODE_LTE_TDSCDMA
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetNetworkSelectionMode053, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    SetNetworkModeInfo setNetworkModeInfo;
    setNetworkModeInfo.selectMode = static_cast<int32_t>(PreferredNetworkMode::CORE_NETWORK_MODE_LTE_TDSCDMA);
    setNetworkModeInfo.oper = "46000";
    int32_t ret = g_rilInterface->SetNetworkSelectionMode(SLOTID_2, GetSerialId(), setNetworkModeInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetNetworkSelectionMode_5600
 * @tc.name: testV1SetNetworkSelectionMode054
 * @tc.desc: SetNetworkSelectionMode, selectMode is CORE_NETWORK_MODE_LTE_TDSCDMA_GSM
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetNetworkSelectionMode054, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    SetNetworkModeInfo setNetworkModeInfo;
    setNetworkModeInfo.selectMode = static_cast<int32_t>(PreferredNetworkMode::CORE_NETWORK_MODE_LTE_TDSCDMA_GSM);
    setNetworkModeInfo.oper = "46000";
    int32_t ret = g_rilInterface->SetNetworkSelectionMode(SLOTID_2, GetSerialId(), setNetworkModeInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetNetworkSelectionMode_5700
 * @tc.name: testV1SetNetworkSelectionMode055
 * @tc.desc: SetNetworkSelectionMode, selectMode is CORE_NETWORK_MODE_LTE_TDSCDMA_WCDMA
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetNetworkSelectionMode055, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    SetNetworkModeInfo setNetworkModeInfo;
    setNetworkModeInfo.selectMode = static_cast<int32_t>(PreferredNetworkMode::CORE_NETWORK_MODE_LTE_TDSCDMA_WCDMA);
    setNetworkModeInfo.oper = "46000";
    int32_t ret = g_rilInterface->SetNetworkSelectionMode(SLOTID_2, GetSerialId(), setNetworkModeInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetNetworkSelectionMode_5800
 * @tc.name: testV1SetNetworkSelectionMode056
 * @tc.desc: SetNetworkSelectionMode, selectMode is CORE_NETWORK_MODE_LTE_TDSCDMA_WCDMA_GSM
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetNetworkSelectionMode056, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    SetNetworkModeInfo setNetworkModeInfo;
    setNetworkModeInfo.selectMode = static_cast<int32_t>(PreferredNetworkMode::CORE_NETWORK_MODE_LTE_TDSCDMA_WCDMA_GSM);
    setNetworkModeInfo.oper = "46000";
    int32_t ret = g_rilInterface->SetNetworkSelectionMode(SLOTID_2, GetSerialId(), setNetworkModeInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetNetworkSelectionMode_5900
 * @tc.name: testV1SetNetworkSelectionMode057
 * @tc.desc: SetNetworkSelectionMode, selectMode is CORE_NETWORK_MODE_TDSCDMA_WCDMA_GSM_EVDO_CDMA
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetNetworkSelectionMode057, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    SetNetworkModeInfo setNetworkModeInfo;
    setNetworkModeInfo.selectMode =
        static_cast<int32_t>(PreferredNetworkMode::CORE_NETWORK_MODE_TDSCDMA_WCDMA_GSM_EVDO_CDMA);
    setNetworkModeInfo.oper = "46000";
    int32_t ret = g_rilInterface->SetNetworkSelectionMode(SLOTID_2, GetSerialId(), setNetworkModeInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetNetworkSelectionMode_6000
 * @tc.name: testV1SetNetworkSelectionMode058
 * @tc.desc: SetNetworkSelectionMode, selectMode is CORE_NETWORK_MODE_LTE_TDSCDMA_WCDMA_GSM_EVDO_CDMA
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetNetworkSelectionMode058, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    SetNetworkModeInfo setNetworkModeInfo;
    setNetworkModeInfo.selectMode =
        static_cast<int32_t>(PreferredNetworkMode::CORE_NETWORK_MODE_LTE_TDSCDMA_WCDMA_GSM_EVDO_CDMA);
    setNetworkModeInfo.oper = "46000";
    int32_t ret = g_rilInterface->SetNetworkSelectionMode(SLOTID_2, GetSerialId(), setNetworkModeInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetNetworkSelectionMode_6100
 * @tc.name: testV1SetNetworkSelectionMode059
 * @tc.desc: SetNetworkSelectionMode, selectMode is CORE_NETWORK_MODE_NR
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetNetworkSelectionMode059, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    SetNetworkModeInfo setNetworkModeInfo;
    setNetworkModeInfo.selectMode = static_cast<int32_t>(PreferredNetworkMode::CORE_NETWORK_MODE_NR);
    setNetworkModeInfo.oper = "46000";
    int32_t ret = g_rilInterface->SetNetworkSelectionMode(SLOTID_2, GetSerialId(), setNetworkModeInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetNetworkSelectionMode_6200
 * @tc.name: testV1SetNetworkSelectionMode060
 * @tc.desc: SetNetworkSelectionMode, selectMode is CORE_NETWORK_MODE_NR_LTE
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetNetworkSelectionMode060, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    SetNetworkModeInfo setNetworkModeInfo;
    setNetworkModeInfo.selectMode = static_cast<int32_t>(PreferredNetworkMode::CORE_NETWORK_MODE_NR_LTE);
    setNetworkModeInfo.oper = "46000";
    int32_t ret = g_rilInterface->SetNetworkSelectionMode(SLOTID_2, GetSerialId(), setNetworkModeInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetNetworkSelectionMode_6300
 * @tc.name: testV1SetNetworkSelectionMode061
 * @tc.desc: SetNetworkSelectionMode, selectMode is CORE_NETWORK_MODE_NR_LTE_WCDMA
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetNetworkSelectionMode061, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    SetNetworkModeInfo setNetworkModeInfo;
    setNetworkModeInfo.selectMode = static_cast<int32_t>(PreferredNetworkMode::CORE_NETWORK_MODE_NR_LTE_WCDMA);
    setNetworkModeInfo.oper = "46000";
    int32_t ret = g_rilInterface->SetNetworkSelectionMode(SLOTID_2, GetSerialId(), setNetworkModeInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetNetworkSelectionMode_6400
 * @tc.name: testV1SetNetworkSelectionMode062
 * @tc.desc: SetNetworkSelectionMode, selectMode is CORE_NETWORK_MODE_NR_LTE_WCDMA_GSM
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetNetworkSelectionMode062, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    SetNetworkModeInfo setNetworkModeInfo;
    setNetworkModeInfo.selectMode = static_cast<int32_t>(PreferredNetworkMode::CORE_NETWORK_MODE_NR_LTE_WCDMA_GSM);
    setNetworkModeInfo.oper = "46000";
    int32_t ret = g_rilInterface->SetNetworkSelectionMode(SLOTID_2, GetSerialId(), setNetworkModeInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetNetworkSelectionMode_6500
 * @tc.name: testV1SetNetworkSelectionMode063
 * @tc.desc: SetNetworkSelectionMode, selectMode is CORE_NETWORK_MODE_NR_LTE_EVDO_CDMA
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetNetworkSelectionMode063, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    SetNetworkModeInfo setNetworkModeInfo;
    setNetworkModeInfo.selectMode = static_cast<int32_t>(PreferredNetworkMode::CORE_NETWORK_MODE_NR_LTE_EVDO_CDMA);
    setNetworkModeInfo.oper = "46000";
    int32_t ret = g_rilInterface->SetNetworkSelectionMode(SLOTID_2, GetSerialId(), setNetworkModeInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetNetworkSelectionMode_6600
 * @tc.name: testV1SetNetworkSelectionMode064
 * @tc.desc: SetNetworkSelectionMode, selectMode is CORE_NETWORK_MODE_NR_LTE_WCDMA_GSM_EVDO_CDMA
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetNetworkSelectionMode064, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    SetNetworkModeInfo setNetworkModeInfo;
    setNetworkModeInfo.selectMode =
        static_cast<int32_t>(PreferredNetworkMode::CORE_NETWORK_MODE_NR_LTE_WCDMA_GSM_EVDO_CDMA);
    setNetworkModeInfo.oper = "46000";
    int32_t ret = g_rilInterface->SetNetworkSelectionMode(SLOTID_2, GetSerialId(), setNetworkModeInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetNetworkSelectionMode_6700
 * @tc.name: testV1SetNetworkSelectionMode065
 * @tc.desc: SetNetworkSelectionMode, selectMode is CORE_NETWORK_MODE_NR_LTE_TDSCDMA
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetNetworkSelectionMode065, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    SetNetworkModeInfo setNetworkModeInfo;
    setNetworkModeInfo.selectMode = static_cast<int32_t>(PreferredNetworkMode::CORE_NETWORK_MODE_NR_LTE_TDSCDMA);
    setNetworkModeInfo.oper = "46000";
    int32_t ret = g_rilInterface->SetNetworkSelectionMode(SLOTID_2, GetSerialId(), setNetworkModeInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetNetworkSelectionMode_6800
 * @tc.name: testV1SetNetworkSelectionMode066
 * @tc.desc: SetNetworkSelectionMode, selectMode is CORE_NETWORK_MODE_NR_LTE_TDSCDMA_GSM
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetNetworkSelectionMode066, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    SetNetworkModeInfo setNetworkModeInfo;
    setNetworkModeInfo.selectMode = static_cast<int32_t>(PreferredNetworkMode::CORE_NETWORK_MODE_NR_LTE_TDSCDMA_GSM);
    setNetworkModeInfo.oper = "46000";
    int32_t ret = g_rilInterface->SetNetworkSelectionMode(SLOTID_2, GetSerialId(), setNetworkModeInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetNetworkSelectionMode_6900
 * @tc.name: testV1SetNetworkSelectionMode067
 * @tc.desc: SetNetworkSelectionMode, selectMode is CORE_NETWORK_MODE_NR_LTE_TDSCDMA_WCDMA
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetNetworkSelectionMode067, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    SetNetworkModeInfo setNetworkModeInfo;
    setNetworkModeInfo.selectMode = static_cast<int32_t>(PreferredNetworkMode::CORE_NETWORK_MODE_NR_LTE_TDSCDMA_WCDMA);
    setNetworkModeInfo.oper = "46000";
    int32_t ret = g_rilInterface->SetNetworkSelectionMode(SLOTID_2, GetSerialId(), setNetworkModeInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetNetworkSelectionMode_7000
 * @tc.name: testV1SetNetworkSelectionMode068
 * @tc.desc: SetNetworkSelectionMode, selectMode is CORE_NETWORK_MODE_NR_LTE_TDSCDMA_WCDMA_GSM
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetNetworkSelectionMode068, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    SetNetworkModeInfo setNetworkModeInfo;
    setNetworkModeInfo.selectMode =
        static_cast<int32_t>(PreferredNetworkMode::CORE_NETWORK_MODE_NR_LTE_TDSCDMA_WCDMA_GSM);
    setNetworkModeInfo.oper = "46000";
    int32_t ret = g_rilInterface->SetNetworkSelectionMode(SLOTID_2, GetSerialId(), setNetworkModeInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetNetworkSelectionMode_7100
 * @tc.name: testV1SetNetworkSelectionMode069
 * @tc.desc: SetNetworkSelectionMode, selectMode is CORE_NETWORK_MODE_NR_LTE_TDSCDMA_WCDMA_GSM_EVDO_CDMA
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetNetworkSelectionMode069, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    SetNetworkModeInfo setNetworkModeInfo;
    setNetworkModeInfo.selectMode =
        static_cast<int32_t>(PreferredNetworkMode::CORE_NETWORK_MODE_NR_LTE_TDSCDMA_WCDMA_GSM_EVDO_CDMA);
    setNetworkModeInfo.oper = "46000";
    int32_t ret = g_rilInterface->SetNetworkSelectionMode(SLOTID_2, GetSerialId(), setNetworkModeInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetNetworkSelectionMode_7200
 * @tc.name: testV1SetNetworkSelectionMode070
 * @tc.desc: SetNetworkSelectionMode, selectMode is CORE_NETWORK_MODE_MAX_VALUE
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetNetworkSelectionMode070, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    SetNetworkModeInfo setNetworkModeInfo;
    setNetworkModeInfo.selectMode = static_cast<int32_t>(PreferredNetworkMode::CORE_NETWORK_MODE_MAX_VALUE);
    setNetworkModeInfo.oper = "46000";
    int32_t ret = g_rilInterface->SetNetworkSelectionMode(SLOTID_2, GetSerialId(), setNetworkModeInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetNetworkSelectionMode_7300
 * @tc.name: testV1SetNetworkSelectionMode071
 * @tc.desc: SetNetworkSelectionMode, SerialId is -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetNetworkSelectionMode071, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SetNetworkModeInfo setNetworkModeInfo;
    setNetworkModeInfo.selectMode = static_cast<int32_t>(PreferredNetworkMode::CORE_NETWORK_MODE_AUTO);
    setNetworkModeInfo.oper = "46000";
    int32_t ret = g_rilInterface->SetNetworkSelectionMode(SLOTID_1, -1, setNetworkModeInfo);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetNetworkSelectionMode_7400
 * @tc.name: testV1SetNetworkSelectionMode072
 * @tc.desc: SetNetworkSelectionMode, SerialId is -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetNetworkSelectionMode072, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    SetNetworkModeInfo setNetworkModeInfo;
    setNetworkModeInfo.selectMode = static_cast<int32_t>(PreferredNetworkMode::CORE_NETWORK_MODE_AUTO);
    setNetworkModeInfo.oper = "46000";
    int32_t ret = g_rilInterface->SetNetworkSelectionMode(SLOTID_2, -1, setNetworkModeInfo);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetNetworkSelectionMode_7500
 * @tc.name: testV1SetNetworkSelectionMode073
 * @tc.desc: SetNetworkSelectionMode, stability test
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetNetworkSelectionMode073, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SetNetworkModeInfo setNetworkModeInfo;
    setNetworkModeInfo.selectMode = static_cast<int32_t>(PreferredNetworkMode::CORE_NETWORK_MODE_AUTO);
    setNetworkModeInfo.oper = "46000";
    int32_t ret = 0;
    for (int i = 0; i < 100; i++) {
        ret = g_rilInterface->SetNetworkSelectionMode(SLOTID_1, GetSerialId(), setNetworkModeInfo);
        EXPECT_EQ(SUCCESS, ret);
    }
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetNeighboringCellInfoList_0300
 * @tc.name: testV1GetNeighboringCellInfoList001
 * @tc.desc: GetNeighboringCellInfoList, SerialId is -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetNeighboringCellInfoList001, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->GetNeighboringCellInfoList(SLOTID_1, -1);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetNeighboringCellInfoList_0400
 * @tc.name: testV1GetNeighboringCellInfoList002
 * @tc.desc: GetNeighboringCellInfoList, SerialId is -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetNeighboringCellInfoList002, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t ret = g_rilInterface->GetNeighboringCellInfoList(SLOTID_2, -1);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetNeighboringCellInfoList_0500
 * @tc.name: testV1GetNeighboringCellInfoList003
 * @tc.desc: GetNeighboringCellInfoList, stability test
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetNeighboringCellInfoList003, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = 0;
    for (int i = 0; i < 100; i++) {
        ret = g_rilInterface->GetNeighboringCellInfoList(SLOTID_1, GetSerialId());
        EXPECT_EQ(SUCCESS, ret);
    }
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetCurrentCellInfo_0300
 * @tc.name: testV1GetCurrentCellInfo001
 * @tc.desc: GetCurrentCellInfo, SerialId is -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetCurrentCellInfo001, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->GetCurrentCellInfo(SLOTID_1, -1);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetCurrentCellInfo_0400
 * @tc.name: testV1GetCurrentCellInfo002
 * @tc.desc: GetCurrentCellInfo, SerialId is -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetCurrentCellInfo002, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t ret = g_rilInterface->GetCurrentCellInfo(SLOTID_2, -1);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetCurrentCellInfo_0500
 * @tc.name: testV1GetCurrentCellInfo003
 * @tc.desc: GetCurrentCellInfo, stability test
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetCurrentCellInfo003, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = 0;
    for (int i = 0; i < 100; i++) {
        ret = g_rilInterface->GetCurrentCellInfo(SLOTID_1, GetSerialId());
        EXPECT_EQ(SUCCESS, ret);
    }
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetDataPermitted_0300
 * @tc.name: testV1SetDataPermitted001
 * @tc.desc: SetDataPermitted, dataPermitted is 0
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetDataPermitted001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SetDataPermitted(SLOTID_1, GetSerialId(), 0);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetDataPermitted_0400
 * @tc.name: testV1SetDataPermitted002
 * @tc.desc: SetDataPermitted, dataPermitted is -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetDataPermitted002, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SetDataPermitted(SLOTID_1, GetSerialId(), -1);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetDataPermitted_0500
 * @tc.name: testV1SetDataPermitted003
 * @tc.desc: SetDataPermitted, dataPermitted is 2
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetDataPermitted003, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SetDataPermitted(SLOTID_1, GetSerialId(), 2);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetDataPermitted_0600
 * @tc.name: testV1SetDataPermitted004
 * @tc.desc: SetDataPermitted, SerialId is -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetDataPermitted004, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SetDataPermitted(SLOTID_1, -1, 0);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetDataPermitted_0700
 * @tc.name: testV1SetDataPermitted005
 * @tc.desc: SetDataPermitted, SerialId is -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetDataPermitted005, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SetDataPermitted(SLOTID_1, -1, 1);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetDataPermitted_0800
 * @tc.name: testV1SetDataPermitted006
 * @tc.desc: SetDataPermitted, dataPermitted is 0
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetDataPermitted006, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t ret = g_rilInterface->SetDataPermitted(SLOTID_2, GetSerialId(), 0);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetDataPermitted_0900
 * @tc.name: testV1SetDataPermitted007
 * @tc.desc: SetDataPermitted, dataPermitted is -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetDataPermitted007, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t ret = g_rilInterface->SetDataPermitted(SLOTID_2, GetSerialId(), -1);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetDataPermitted_1000
 * @tc.name: testV1SetDataPermitted008
 * @tc.desc: SetDataPermitted, dataPermitted is 2
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetDataPermitted008, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t ret = g_rilInterface->SetDataPermitted(SLOTID_2, GetSerialId(), 2);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetDataPermitted_1100
 * @tc.name: testV1SetDataPermitted009
 * @tc.desc: SetDataPermitted, SerialId is -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetDataPermitted009, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t ret = g_rilInterface->SetDataPermitted(SLOTID_2, -1, 0);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetDataPermitted_1200
 * @tc.name: testV1SetDataPermitted010
 * @tc.desc: SetDataPermitted, SerialId is -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetDataPermitted010, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t ret = g_rilInterface->SetDataPermitted(SLOTID_2, -1, 1);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetDataPermitted_1300
 * @tc.name: testV1SetDataPermitted011
 * @tc.desc: SetDataPermitted, stability test
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetDataPermitted011, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = 0;
    for (int i = 0; i < 100; i++) {
        ret = g_rilInterface->SetDataPermitted(SLOTID_1, GetSerialId(), 1);
        EXPECT_EQ(SUCCESS, ret);
    }
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetDataProfileInfo_0300
 * @tc.name: testV1SetDataProfileInfo001
 * @tc.desc: SetDataProfileInfo, isRoaming is 0, profileId is 0, authenticationType is 0
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetDataProfileInfo001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t serialId = GetSerialId();
    DataProfilesInfo dataProfilesInfo;
    dataProfilesInfo.serial = serialId;
    dataProfilesInfo.profilesSize = 1;
    dataProfilesInfo.isRoaming = 0;
    DataProfileDataInfo dataProfileInfo;
    dataProfileInfo.profileId = 0;
    dataProfileInfo.password = "";
    dataProfileInfo.authenticationType = 0;
    dataProfileInfo.userName = "";
    dataProfileInfo.apn = "cmnet";
    dataProfileInfo.protocol = "IPV4V6";
    dataProfileInfo.roamingProtocol = "IPV4V6";
    dataProfileInfo.serial = serialId;
    dataProfilesInfo.profiles.push_back(dataProfileInfo);
    int32_t ret = g_rilInterface->SetDataProfileInfo(SLOTID_1, serialId, dataProfilesInfo);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetDataProfileInfo_0400
 * @tc.name: testV1SetDataProfileInfo002
 * @tc.desc: SetDataProfileInfo, isRoaming is 1, profileId is 1, authenticationType is 1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetDataProfileInfo002, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t serialId = GetSerialId();
    DataProfilesInfo dataProfilesInfo;
    dataProfilesInfo.serial = serialId;
    dataProfilesInfo.profilesSize = 1;
    dataProfilesInfo.isRoaming = 1;
    DataProfileDataInfo dataProfileInfo;
    dataProfileInfo.profileId = 1;
    dataProfileInfo.password = "";
    dataProfileInfo.authenticationType = 1;
    dataProfileInfo.userName = "";
    dataProfileInfo.apn = "cmnet";
    dataProfileInfo.protocol = "IPV4V6";
    dataProfileInfo.roamingProtocol = "IPV4V6";
    dataProfileInfo.serial = serialId;
    dataProfilesInfo.profiles.push_back(dataProfileInfo);
    int32_t ret = g_rilInterface->SetDataProfileInfo(SLOTID_1, serialId, dataProfilesInfo);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetDataProfileInfo_0500
 * @tc.name: testV1SetDataProfileInfo003
 * @tc.desc: SetDataProfileInfo, isRoaming is 1, profileId is 1, authenticationType is 2
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetDataProfileInfo003, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t serialId = GetSerialId();
    DataProfilesInfo dataProfilesInfo;
    dataProfilesInfo.serial = serialId;
    dataProfilesInfo.profilesSize = 1;
    dataProfilesInfo.isRoaming = 1;
    DataProfileDataInfo dataProfileInfo;
    dataProfileInfo.profileId = 1;
    dataProfileInfo.password = "";
    dataProfileInfo.authenticationType = 2;
    dataProfileInfo.userName = "";
    dataProfileInfo.apn = "cmnet";
    dataProfileInfo.protocol = "IPV4V6";
    dataProfileInfo.roamingProtocol = "IPV4V6";
    dataProfileInfo.serial = serialId;
    dataProfilesInfo.profiles.push_back(dataProfileInfo);
    int32_t ret = g_rilInterface->SetDataProfileInfo(SLOTID_1, serialId, dataProfilesInfo);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetDataProfileInfo_0600
 * @tc.name: testV1SetDataProfileInfo004
 * @tc.desc: SetDataProfileInfo, userName is "@", password is "@"
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetDataProfileInfo004, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t serialId = GetSerialId();
    DataProfilesInfo dataProfilesInfo;
    dataProfilesInfo.serial = serialId;
    dataProfilesInfo.profilesSize = 1;
    dataProfilesInfo.isRoaming = 1;
    DataProfileDataInfo dataProfileInfo;
    dataProfileInfo.profileId = 1;
    dataProfileInfo.password = "@";
    dataProfileInfo.authenticationType = 2;
    dataProfileInfo.userName = "@";
    dataProfileInfo.apn = "cmnet";
    dataProfileInfo.protocol = "IPV4V6";
    dataProfileInfo.roamingProtocol = "IPV4V6";
    dataProfileInfo.serial = serialId;
    dataProfilesInfo.profiles.push_back(dataProfileInfo);
    int32_t ret = g_rilInterface->SetDataProfileInfo(SLOTID_1, serialId, dataProfilesInfo);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetDataProfileInfo_0700
 * @tc.name: testV1SetDataProfileInfo005
 * @tc.desc: SetDataProfileInfo, SerialId is -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetDataProfileInfo005, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t serialId = GetSerialId();
    DataProfilesInfo dataProfilesInfo;
    dataProfilesInfo.serial = serialId;
    dataProfilesInfo.profilesSize = 1;
    dataProfilesInfo.isRoaming = 1;
    DataProfileDataInfo dataProfileInfo;
    dataProfileInfo.profileId = 1;
    dataProfileInfo.password = "";
    dataProfileInfo.authenticationType = 2;
    dataProfileInfo.userName = "";
    dataProfileInfo.apn = "cmnet";
    dataProfileInfo.protocol = "IPV4V6";
    dataProfileInfo.roamingProtocol = "IPV4V6";
    dataProfileInfo.serial = serialId;
    dataProfilesInfo.profiles.push_back(dataProfileInfo);
    int32_t ret = g_rilInterface->SetDataProfileInfo(SLOTID_1, -1, dataProfilesInfo);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetDataProfileInfo_0800
 * @tc.name: testV1SetDataProfileInfo006
 * @tc.desc: SetDataProfileInfo, isRoaming is 0, profileId is 0, authenticationType is 0
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetDataProfileInfo006, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t serialId = GetSerialId();
    DataProfilesInfo dataProfilesInfo;
    dataProfilesInfo.serial = serialId;
    dataProfilesInfo.profilesSize = 1;
    dataProfilesInfo.isRoaming = 0;
    DataProfileDataInfo dataProfileInfo;
    dataProfileInfo.profileId = 0;
    dataProfileInfo.password = "";
    dataProfileInfo.authenticationType = 0;
    dataProfileInfo.userName = "";
    dataProfileInfo.apn = "cmnet";
    dataProfileInfo.protocol = "IPV4V6";
    dataProfileInfo.roamingProtocol = "IPV4V6";
    dataProfileInfo.serial = serialId;
    dataProfilesInfo.profiles.push_back(dataProfileInfo);
    int32_t ret = g_rilInterface->SetDataProfileInfo(SLOTID_2, serialId, dataProfilesInfo);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetDataProfileInfo_0900
 * @tc.name: testV1SetDataProfileInfo007
 * @tc.desc: SetDataProfileInfo, isRoaming is 1, profileId is 1, authenticationType is 1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetDataProfileInfo007, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t serialId = GetSerialId();
    DataProfilesInfo dataProfilesInfo;
    dataProfilesInfo.serial = serialId;
    dataProfilesInfo.profilesSize = 1;
    dataProfilesInfo.isRoaming = 1;
    DataProfileDataInfo dataProfileInfo;
    dataProfileInfo.profileId = 1;
    dataProfileInfo.password = "";
    dataProfileInfo.authenticationType = 1;
    dataProfileInfo.userName = "";
    dataProfileInfo.apn = "cmnet";
    dataProfileInfo.protocol = "IPV4V6";
    dataProfileInfo.roamingProtocol = "IPV4V6";
    dataProfileInfo.serial = serialId;
    dataProfilesInfo.profiles.push_back(dataProfileInfo);
    int32_t ret = g_rilInterface->SetDataProfileInfo(SLOTID_2, serialId, dataProfilesInfo);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetDataProfileInfo_1000
 * @tc.name: testV1SetDataProfileInfo008
 * @tc.desc: SetDataProfileInfo, isRoaming is 1, profileId is 1, authenticationType is 2
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetDataProfileInfo008, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t serialId = GetSerialId();
    DataProfilesInfo dataProfilesInfo;
    dataProfilesInfo.serial = serialId;
    dataProfilesInfo.profilesSize = 1;
    dataProfilesInfo.isRoaming = 1;
    DataProfileDataInfo dataProfileInfo;
    dataProfileInfo.profileId = 1;
    dataProfileInfo.password = "";
    dataProfileInfo.authenticationType = 2;
    dataProfileInfo.userName = "";
    dataProfileInfo.apn = "cmnet";
    dataProfileInfo.protocol = "IPV4V6";
    dataProfileInfo.roamingProtocol = "IPV4V6";
    dataProfileInfo.serial = serialId;
    dataProfilesInfo.profiles.push_back(dataProfileInfo);
    int32_t ret = g_rilInterface->SetDataProfileInfo(SLOTID_2, serialId, dataProfilesInfo);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetDataProfileInfo_1100
 * @tc.name: testV1SetDataProfileInfo009
 * @tc.desc: SetDataProfileInfo, userName is "@", password is "@"
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetDataProfileInfo009, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t serialId = GetSerialId();
    DataProfilesInfo dataProfilesInfo;
    dataProfilesInfo.serial = serialId;
    dataProfilesInfo.profilesSize = 1;
    dataProfilesInfo.isRoaming = 1;
    DataProfileDataInfo dataProfileInfo;
    dataProfileInfo.profileId = 1;
    dataProfileInfo.password = "@";
    dataProfileInfo.authenticationType = 2;
    dataProfileInfo.userName = "@";
    dataProfileInfo.apn = "cmnet";
    dataProfileInfo.protocol = "IPV4V6";
    dataProfileInfo.roamingProtocol = "IPV4V6";
    dataProfileInfo.serial = serialId;
    dataProfilesInfo.profiles.push_back(dataProfileInfo);
    int32_t ret = g_rilInterface->SetDataProfileInfo(SLOTID_2, serialId, dataProfilesInfo);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetDataProfileInfo_1200
 * @tc.name: testV1SetDataProfileInfo010
 * @tc.desc: SetDataProfileInfo, SerialId is -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetDataProfileInfo010, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t serialId = GetSerialId();
    DataProfilesInfo dataProfilesInfo;
    dataProfilesInfo.serial = serialId;
    dataProfilesInfo.profilesSize = 1;
    dataProfilesInfo.isRoaming = 1;
    DataProfileDataInfo dataProfileInfo;
    dataProfileInfo.profileId = 1;
    dataProfileInfo.password = "";
    dataProfileInfo.authenticationType = 2;
    dataProfileInfo.userName = "";
    dataProfileInfo.apn = "cmnet";
    dataProfileInfo.protocol = "IPV4V6";
    dataProfileInfo.roamingProtocol = "IPV4V6";
    dataProfileInfo.serial = serialId;
    dataProfilesInfo.profiles.push_back(dataProfileInfo);
    int32_t ret = g_rilInterface->SetDataProfileInfo(SLOTID_2, -1, dataProfilesInfo);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetDataProfileInfo_1300
 * @tc.name: testV1SetDataProfileInfo011
 * @tc.desc: SetDataProfileInfo, stability test
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetDataProfileInfo011, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t serialId = GetSerialId();
    DataProfilesInfo dataProfilesInfo;
    dataProfilesInfo.serial = serialId;
    dataProfilesInfo.profilesSize = 1;
    dataProfilesInfo.isRoaming = 0;
    DataProfileDataInfo dataProfileInfo;
    dataProfileInfo.profileId = 0;
    dataProfileInfo.password = "";
    dataProfileInfo.authenticationType = 0;
    dataProfileInfo.userName = "";
    dataProfileInfo.apn = "cmnet";
    dataProfileInfo.protocol = "IPV4V6";
    dataProfileInfo.roamingProtocol = "IPV4V6";
    dataProfileInfo.serial = serialId;
    dataProfilesInfo.profiles.push_back(dataProfileInfo);
    int32_t ret = 0;
    for (int i = 0; i < 100; i++) {
        ret = g_rilInterface->SetDataProfileInfo(SLOTID_1, serialId, dataProfilesInfo);
        EXPECT_EQ(SUCCESS, ret);
    }
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetSimLockStatus_0300
 * @tc.name  : testV1GetSimLockStatus001
 * @tc.desc  : GetSimLockStatus, slotId is 0, serialId is -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetSimLockStatus001, Function | MediumTest | Level2)
{
#ifdef TEL_TEST_PIN_PUK
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SimLockInfo simLockInfo;
    simLockInfo.fac = "SC";
    simLockInfo.mode = 2;
    simLockInfo.classx = 0;
    constexpr const char *FAC_PIN_LOCK = "SC";
    int32_t ret = g_rilInterface->GetSimLockStatus(SLOTID_1, -1, simLockInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
#endif
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetSimLockStatus_0400
 * @tc.name  : testV1GetSimLockStatus002
 * @tc.desc  : GetSimLockStatus, slotId is 1, serialId is -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetSimLockStatus002, Function | MediumTest | Level2)
{
#ifdef TEL_TEST_PIN_PUK
    if (!IsReady(SLOTID_2)) {
        return;
    }
    SimLockInfo simLockInfo;
    simLockInfo.fac = "SC";
    simLockInfo.mode = 2;
    simLockInfo.classx = 0;
    constexpr const char *FAC_PIN_LOCK = "SC";
    int32_t ret = g_rilInterface->GetSimLockStatus(SLOTID_2, -1, simLockInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
#endif
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetSimLockStatus_0500
 * @tc.name  : testV1GetSimLockStatus003
 * @tc.desc  : GetSimLockStatus, slotId is 0, serialId is 2147483647
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetSimLockStatus003, Function | MediumTest | Level1)
{
#ifdef TEL_TEST_PIN_PUK
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SimLockInfo simLockInfo;
    simLockInfo.fac = "SC";
    simLockInfo.mode = 2;
    simLockInfo.classx = 0;
    constexpr const char *FAC_PIN_LOCK = "SC";
    int32_t ret = g_rilInterface->GetSimLockStatus(SLOTID_1, 2147483647, simLockInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_GET_SIM_LOCK_STATUS));
#endif
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetSimLockStatus_0600
 * @tc.name  : testV1GetSimLockStatus004
 * @tc.desc  : GetSimLockStatus, slotId is 1, serialId is 2147483647
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetSimLockStatus004, Function | MediumTest | Level1)
{
#ifdef TEL_TEST_PIN_PUK
    if (!IsReady(SLOTID_2)) {
        return;
    }
    SimLockInfo simLockInfo;
    simLockInfo.fac = "SC";
    simLockInfo.mode = 2;
    simLockInfo.classx = 0;
    constexpr const char *FAC_PIN_LOCK = "SC";
    int32_t ret = g_rilInterface->GetSimLockStatus(SLOTID_2, 2147483647, simLockInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_GET_SIM_LOCK_STATUS));
#endif
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetSimLockStatus_0700
 * @tc.name  : testV1GetSimLockStatus005
 * @tc.desc  : GetSimLockStatus, slotId is 0, classx = 255, fac= AO, mode = 0
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetSimLockStatus005, Function | MediumTest | Level1)
{
#ifdef TEL_TEST_PIN_PUK
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SimLockInfo simLockInfo;
    simLockInfo.classx = 255;
    simLockInfo.fac = "AO";
    simLockInfo.mode = 0;
    constexpr const char *FAC_PIN_LOCK = "AO";
    int32_t ret = g_rilInterface->GetSimLockStatus(SLOTID_1, GetSerialId(), simLockInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_GET_SIM_LOCK_STATUS));
#endif
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetSimLockStatus_0800
 * @tc.name  : testV1GetSimLockStatus006
 * @tc.desc  : GetSimLockStatus, slotId is 0, classx = 255, fac= OI, mode = 0
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetSimLockStatus006, Function | MediumTest | Level1)
{
#ifdef TEL_TEST_PIN_PUK
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SimLockInfo simLockInfo;
    simLockInfo.classx = 255;
    simLockInfo.fac = "OI";
    simLockInfo.mode = 0;
    constexpr const char *FAC_PIN_LOCK = "OI";
    int32_t ret = g_rilInterface->GetSimLockStatus(SLOTID_1, GetSerialId(), simLockInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_GET_SIM_LOCK_STATUS));
#endif
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetSimLockStatus_0900
 * @tc.name  : testV1GetSimLockStatus007
 * @tc.desc  : GetSimLockStatus, slotId is 0, classx = 255, fac= OX, mode = 0
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetSimLockStatus007, Function | MediumTest | Level1)
{
#ifdef TEL_TEST_PIN_PUK
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SimLockInfo simLockInfo;
    simLockInfo.classx = 255;
    simLockInfo.fac = "OX";
    simLockInfo.mode = 0;
    constexpr const char *FAC_PIN_LOCK = "OX";
    int32_t ret = g_rilInterface->GetSimLockStatus(SLOTID_1, GetSerialId(), simLockInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_GET_SIM_LOCK_STATUS));
#endif
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetSimLockStatus_1000
 * @tc.name  : testV1GetSimLockStatus008
 * @tc.desc  : GetSimLockStatus, slotId is 0, classx = 255, fac= AI, mode = 0
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetSimLockStatus008, Function | MediumTest | Level1)
{
#ifdef TEL_TEST_PIN_PUK
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SimLockInfo simLockInfo;
    simLockInfo.classx = 255;
    simLockInfo.fac = "AI";
    simLockInfo.mode = 0;
    constexpr const char *FAC_PIN_LOCK = "AI";
    int32_t ret = g_rilInterface->GetSimLockStatus(SLOTID_1, GetSerialId(), simLockInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_GET_SIM_LOCK_STATUS));
#endif
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetSimLockStatus_1100
 * @tc.name  : testV1GetSimLockStatus009
 * @tc.desc  : GetSimLockStatus, slotId is 0, classx = 255, fac= IR, mode = 0
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetSimLockStatus009, Function | MediumTest | Level1)
{
#ifdef TEL_TEST_PIN_PUK
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SimLockInfo simLockInfo;
    simLockInfo.classx = 255;
    simLockInfo.fac = "IR";
    simLockInfo.mode = 0;
    constexpr const char *FAC_PIN_LOCK = "IR";
    int32_t ret = g_rilInterface->GetSimLockStatus(SLOTID_1, GetSerialId(), simLockInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_GET_SIM_LOCK_STATUS));
#endif
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetSimLockStatus_1200
 * @tc.name  : testV1GetSimLockStatus010
 * @tc.desc  : GetSimLockStatus, slotId is 0, classx = 255, fac= AB, mode = 0
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetSimLockStatus010, Function | MediumTest | Level1)
{
#ifdef TEL_TEST_PIN_PUK
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SimLockInfo simLockInfo;
    simLockInfo.classx = 255;
    simLockInfo.fac = "AB";
    simLockInfo.mode = 0;
    constexpr const char *FAC_PIN_LOCK = "AB";
    int32_t ret = g_rilInterface->GetSimLockStatus(SLOTID_1, GetSerialId(), simLockInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_GET_SIM_LOCK_STATUS));
#endif
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetSimLockStatus_1300
 * @tc.name  : testV1GetSimLockStatus011
 * @tc.desc  : GetSimLockStatus, slotId is 0, classx = 255, fac= AG, mode = 0
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetSimLockStatus011, Function | MediumTest | Level1)
{
#ifdef TEL_TEST_PIN_PUK
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SimLockInfo simLockInfo;
    simLockInfo.classx = 255;
    simLockInfo.fac = "AG";
    simLockInfo.mode = 0;
    constexpr const char *FAC_PIN_LOCK = "AG";
    int32_t ret = g_rilInterface->GetSimLockStatus(SLOTID_1, GetSerialId(), simLockInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_GET_SIM_LOCK_STATUS));
#endif
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetSimLockStatus_1400
 * @tc.name  : testV1GetSimLockStatus012
 * @tc.desc  : GetSimLockStatus, slotId is 0, classx = 255, fac= AC, mode = 0
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetSimLockStatus012, Function | MediumTest | Level1)
{
#ifdef TEL_TEST_PIN_PUK
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SimLockInfo simLockInfo;
    simLockInfo.classx = 255;
    simLockInfo.fac = "AC";
    simLockInfo.mode = 0;
    constexpr const char *FAC_PIN_LOCK = "AC";
    int32_t ret = g_rilInterface->GetSimLockStatus(SLOTID_1, GetSerialId(), simLockInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_GET_SIM_LOCK_STATUS));
#endif
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetSimLockStatus_1500
 * @tc.name  : testV1GetSimLockStatus013
 * @tc.desc  : GetSimLockStatus, slotId is 0, classx = 255, fac= FD, mode = 0
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetSimLockStatus013, Function | MediumTest | Level1)
{
#ifdef TEL_TEST_PIN_PUK
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SimLockInfo simLockInfo;
    simLockInfo.classx = 255;
    simLockInfo.fac = "FD";
    simLockInfo.mode = 0;
    constexpr const char *FAC_PIN_LOCK = "FD";
    int32_t ret = g_rilInterface->GetSimLockStatus(SLOTID_1, GetSerialId(), simLockInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_GET_SIM_LOCK_STATUS));
#endif
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetSimLockStatus_1600
 * @tc.name  : testV1GetSimLockStatus014
 * @tc.desc  : GetSimLockStatus, slotId is 0, classx = 255, fac= PN, mode = 0, status = 1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetSimLockStatus014, Function | MediumTest | Level1)
{
#ifdef TEL_TEST_PIN_PUK
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SimLockInfo simLockInfo;
    simLockInfo.classx = 255;
    simLockInfo.fac = "PN";
    simLockInfo.mode = 0;
    simLockInfo.status = 1;
    constexpr const char *FAC_PIN_LOCK = "PN";
    int32_t ret = g_rilInterface->GetSimLockStatus(SLOTID_1, GetSerialId(), simLockInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_GET_SIM_LOCK_STATUS));
#endif
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetSimLockStatus_1700
 * @tc.name  : testV1GetSimLockStatus015
 * @tc.desc  : GetSimLockStatus, slotId is 0, classx = 255, fac= PU, mode = 0, status = 1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetSimLockStatus015, Function | MediumTest | Level1)
{
#ifdef TEL_TEST_PIN_PUK
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SimLockInfo simLockInfo;
    simLockInfo.classx = 255;
    simLockInfo.fac = "PU";
    simLockInfo.mode = 0;
    simLockInfo.status = 1;
    constexpr const char *FAC_PIN_LOCK = "PU";
    int32_t ret = g_rilInterface->GetSimLockStatus(SLOTID_1, GetSerialId(), simLockInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_GET_SIM_LOCK_STATUS));
#endif
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetSimLockStatus_1800
 * @tc.name  : testV1GetSimLockStatus016
 * @tc.desc  : GetSimLockStatus, slotId is 0, classx = 255, fac= PP, mode = 0, status = 1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetSimLockStatus016, Function | MediumTest | Level1)
{
#ifdef TEL_TEST_PIN_PUK
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SimLockInfo simLockInfo;
    simLockInfo.classx = 255;
    simLockInfo.fac = "PP";
    simLockInfo.mode = 0;
    simLockInfo.status = 1;
    constexpr const char *FAC_PIN_LOCK = "PU";
    int32_t ret = g_rilInterface->GetSimLockStatus(SLOTID_1, GetSerialId(), simLockInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_GET_SIM_LOCK_STATUS));
#endif
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetSimLockStatus_1900
 * @tc.name  : testV1GetSimLockStatus017
 * @tc.desc  : GetSimLockStatus, slotId is 0, classx = 255, fac= AO, mode = 1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetSimLockStatus017, Function | MediumTest | Level1)
{
#ifdef TEL_TEST_PIN_PUK
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SimLockInfo simLockInfo;
    simLockInfo.classx = 255;
    simLockInfo.fac = "AO";
    simLockInfo.mode = 1;
    constexpr const char *FAC_PIN_LOCK = "AO";
    int32_t ret = g_rilInterface->GetSimLockStatus(SLOTID_1, GetSerialId(), simLockInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_GET_SIM_LOCK_STATUS));
#endif
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetSimLockStatus_2000
 * @tc.name  : testV1GetSimLockStatus018
 * @tc.desc  : GetSimLockStatus, slotId is 0, classx = 255, fac= OI, mode = 1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetSimLockStatus018, Function | MediumTest | Level1)
{
#ifdef TEL_TEST_PIN_PUK
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SimLockInfo simLockInfo;
    simLockInfo.classx = 255;
    simLockInfo.fac = "OI";
    simLockInfo.mode = 1;
    constexpr const char *FAC_PIN_LOCK = "OI";
    int32_t ret = g_rilInterface->GetSimLockStatus(SLOTID_1, GetSerialId(), simLockInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_GET_SIM_LOCK_STATUS));
#endif
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetSimLockStatus_2100
 * @tc.name  : testV1GetSimLockStatus019
 * @tc.desc  : GetSimLockStatus, slotId is 0, classx = 255, fac= OX, mode = 1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetSimLockStatus019, Function | MediumTest | Level1)
{
#ifdef TEL_TEST_PIN_PUK
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SimLockInfo simLockInfo;
    simLockInfo.classx = 255;
    simLockInfo.fac = "OX";
    simLockInfo.mode = 1;
    constexpr const char *FAC_PIN_LOCK = "OX";
    int32_t ret = g_rilInterface->GetSimLockStatus(SLOTID_1, GetSerialId(), simLockInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_GET_SIM_LOCK_STATUS));
#endif
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetSimLockStatus_2200
 * @tc.name  : testV1GetSimLockStatus020
 * @tc.desc  : GetSimLockStatus, slotId is 0, classx = 255, fac= AI, mode = 1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetSimLockStatus020, Function | MediumTest | Level1)
{
#ifdef TEL_TEST_PIN_PUK
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SimLockInfo simLockInfo;
    simLockInfo.classx = 255;
    simLockInfo.fac = "AI";
    simLockInfo.mode = 1;
    constexpr const char *FAC_PIN_LOCK = "AI";
    int32_t ret = g_rilInterface->GetSimLockStatus(SLOTID_1, GetSerialId(), simLockInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_GET_SIM_LOCK_STATUS));
#endif
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetSimLockStatus_2300
 * @tc.name  : testV1GetSimLockStatus021
 * @tc.desc  : GetSimLockStatus, slotId is 0, classx = 255, fac= IR, mode = 1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetSimLockStatus021, Function | MediumTest | Level1)
{
#ifdef TEL_TEST_PIN_PUK
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SimLockInfo simLockInfo;
    simLockInfo.classx = 255;
    simLockInfo.fac = "IR";
    simLockInfo.mode = 1;
    constexpr const char *FAC_PIN_LOCK = "IR";
    int32_t ret = g_rilInterface->GetSimLockStatus(SLOTID_1, GetSerialId(), simLockInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_GET_SIM_LOCK_STATUS));
#endif
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetSimLockStatus_2400
 * @tc.name  : testV1GetSimLockStatus022
 * @tc.desc  : GetSimLockStatus, slotId is 0, classx = 255, fac= AB, mode = 1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetSimLockStatus022, Function | MediumTest | Level1)
{
#ifdef TEL_TEST_PIN_PUK
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SimLockInfo simLockInfo;
    simLockInfo.classx = 255;
    simLockInfo.fac = "AB";
    simLockInfo.mode = 1;
    constexpr const char *FAC_PIN_LOCK = "AB";
    int32_t ret = g_rilInterface->GetSimLockStatus(SLOTID_1, GetSerialId(), simLockInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_GET_SIM_LOCK_STATUS));
#endif
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetSimLockStatus_2500
 * @tc.name  : testV1GetSimLockStatus023
 * @tc.desc  : GetSimLockStatus, slotId is 0, classx = 255, fac= AG, mode = 1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetSimLockStatus023, Function | MediumTest | Level1)
{
#ifdef TEL_TEST_PIN_PUK
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SimLockInfo simLockInfo;
    simLockInfo.classx = 255;
    simLockInfo.fac = "AG";
    simLockInfo.mode = 1;
    constexpr const char *FAC_PIN_LOCK = "AG";
    int32_t ret = g_rilInterface->GetSimLockStatus(SLOTID_1, GetSerialId(), simLockInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_GET_SIM_LOCK_STATUS));
#endif
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetSimLockStatus_2600
 * @tc.name  : testV1GetSimLockStatus024
 * @tc.desc  : GetSimLockStatus, slotId is 0, classx = 255, fac= AC, mode = 1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetSimLockStatus024, Function | MediumTest | Level1)
{
#ifdef TEL_TEST_PIN_PUK
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SimLockInfo simLockInfo;
    simLockInfo.classx = 255;
    simLockInfo.fac = "AC";
    simLockInfo.mode = 1;
    constexpr const char *FAC_PIN_LOCK = "AC";
    int32_t ret = g_rilInterface->GetSimLockStatus(SLOTID_1, GetSerialId(), simLockInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_GET_SIM_LOCK_STATUS));
#endif
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetSimLockStatus_2700
 * @tc.name  : testV1GetSimLockStatus025
 * @tc.desc  : GetSimLockStatus, slotId is 0, classx = 255, fac= FD, mode = 1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetSimLockStatus025, Function | MediumTest | Level1)
{
#ifdef TEL_TEST_PIN_PUK
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SimLockInfo simLockInfo;
    simLockInfo.classx = 255;
    simLockInfo.fac = "FD";
    simLockInfo.mode = 1;
    constexpr const char *FAC_PIN_LOCK = "FD";
    int32_t ret = g_rilInterface->GetSimLockStatus(SLOTID_1, GetSerialId(), simLockInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_GET_SIM_LOCK_STATUS));
#endif
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetSimLockStatus_2800
 * @tc.name  : testV1GetSimLockStatus026
 * @tc.desc  : GetSimLockStatus, slotId is 0, classx = 255, fac= PN, mode = 1, status = 1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetSimLockStatus026, Function | MediumTest | Level1)
{
#ifdef TEL_TEST_PIN_PUK
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SimLockInfo simLockInfo;
    simLockInfo.classx = 255;
    simLockInfo.fac = "PN";
    simLockInfo.mode = 1;
    simLockInfo.status = 1;
    constexpr const char *FAC_PIN_LOCK = "PN";
    int32_t ret = g_rilInterface->GetSimLockStatus(SLOTID_1, GetSerialId(), simLockInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_GET_SIM_LOCK_STATUS));
#endif
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetSimLockStatus_2900
 * @tc.name  : testV1GetSimLockStatus027
 * @tc.desc  : GetSimLockStatus, slotId is 0, classx = 255, fac= PU, mode = 1, status = 1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetSimLockStatus027, Function | MediumTest | Level1)
{
#ifdef TEL_TEST_PIN_PUK
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SimLockInfo simLockInfo;
    simLockInfo.classx = 255;
    simLockInfo.fac = "PU";
    simLockInfo.mode = 1;
    simLockInfo.status = 1;
    constexpr const char *FAC_PIN_LOCK = "PU";
    int32_t ret = g_rilInterface->GetSimLockStatus(SLOTID_1, GetSerialId(), simLockInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_GET_SIM_LOCK_STATUS));
#endif
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetSimLockStatus_3000
 * @tc.name  : testV1GetSimLockStatus028
 * @tc.desc  : GetSimLockStatus, slotId is 0, classx = 255, fac= PP, mode = 1, status = 1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetSimLockStatus028, Function | MediumTest | Level1)
{
#ifdef TEL_TEST_PIN_PUK
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SimLockInfo simLockInfo;
    simLockInfo.classx = 255;
    simLockInfo.fac = "PP";
    simLockInfo.mode = 1;
    simLockInfo.status = 1;
    constexpr const char *FAC_PIN_LOCK = "PU";
    int32_t ret = g_rilInterface->GetSimLockStatus(SLOTID_1, GetSerialId(), simLockInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_GET_SIM_LOCK_STATUS));
#endif
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetSimLockStatus_3100
 * @tc.name  : testV1GetSimLockStatus029
 * @tc.desc  : GetSimLockStatus, slotId is 0, classx = 255, fac= AO, mode = 2
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetSimLockStatus029, Function | MediumTest | Level1)
{
#ifdef TEL_TEST_PIN_PUK
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SimLockInfo simLockInfo;
    simLockInfo.classx = 255;
    simLockInfo.fac = "AO";
    simLockInfo.mode = 2;
    constexpr const char *FAC_PIN_LOCK = "AO";
    int32_t ret = g_rilInterface->GetSimLockStatus(SLOTID_1, GetSerialId(), simLockInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_GET_SIM_LOCK_STATUS));
#endif
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetSimLockStatus_3200
 * @tc.name  : testV1GetSimLockStatus030
 * @tc.desc  : GetSimLockStatus, slotId is 0, classx = 255, fac= OI, mode = 2
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetSimLockStatus030, Function | MediumTest | Level1)
{
#ifdef TEL_TEST_PIN_PUK
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SimLockInfo simLockInfo;
    simLockInfo.classx = 255;
    simLockInfo.fac = "OI";
    simLockInfo.mode = 2;
    constexpr const char *FAC_PIN_LOCK = "OI";
    int32_t ret = g_rilInterface->GetSimLockStatus(SLOTID_1, GetSerialId(), simLockInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_GET_SIM_LOCK_STATUS));
#endif
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetSimLockStatus_3300
 * @tc.name  : testV1GetSimLockStatus031
 * @tc.desc  : GetSimLockStatus, slotId is 0, classx = 255, fac= OX, mode = 2
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetSimLockStatus031, Function | MediumTest | Level1)
{
#ifdef TEL_TEST_PIN_PUK
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SimLockInfo simLockInfo;
    simLockInfo.classx = 255;
    simLockInfo.fac = "OX";
    simLockInfo.mode = 2;
    constexpr const char *FAC_PIN_LOCK = "OX";
    int32_t ret = g_rilInterface->GetSimLockStatus(SLOTID_1, GetSerialId(), simLockInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_GET_SIM_LOCK_STATUS));
#endif
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetSimLockStatus_3400
 * @tc.name  : testV1GetSimLockStatus032
 * @tc.desc  : GetSimLockStatus, slotId is 0, classx = 255, fac= AI, mode = 2
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetSimLockStatus032, Function | MediumTest | Level1)
{
#ifdef TEL_TEST_PIN_PUK
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SimLockInfo simLockInfo;
    simLockInfo.classx = 255;
    simLockInfo.fac = "AI";
    simLockInfo.mode = 2;
    constexpr const char *FAC_PIN_LOCK = "AI";
    int32_t ret = g_rilInterface->GetSimLockStatus(SLOTID_1, GetSerialId(), simLockInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_GET_SIM_LOCK_STATUS));
#endif
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetSimLockStatus_3500
 * @tc.name  : testV1GetSimLockStatus033
 * @tc.desc  : GetSimLockStatus, slotId is 0, classx = 255, fac= IR, mode = 2
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetSimLockStatus033, Function | MediumTest | Level1)
{
#ifdef TEL_TEST_PIN_PUK
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SimLockInfo simLockInfo;
    simLockInfo.classx = 255;
    simLockInfo.fac = "IR";
    simLockInfo.mode = 2;
    constexpr const char *FAC_PIN_LOCK = "IR";
    int32_t ret = g_rilInterface->GetSimLockStatus(SLOTID_1, GetSerialId(), simLockInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_GET_SIM_LOCK_STATUS));
#endif
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetSimLockStatus_3600
 * @tc.name  : testV1GetSimLockStatus034
 * @tc.desc  : GetSimLockStatus, slotId is 0, classx = 255, fac= AB, mode = 2
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetSimLockStatus034, Function | MediumTest | Level1)
{
#ifdef TEL_TEST_PIN_PUK
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SimLockInfo simLockInfo;
    simLockInfo.classx = 255;
    simLockInfo.fac = "AB";
    simLockInfo.mode = 2;
    constexpr const char *FAC_PIN_LOCK = "AB";
    int32_t ret = g_rilInterface->GetSimLockStatus(SLOTID_1, GetSerialId(), simLockInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_GET_SIM_LOCK_STATUS));
#endif
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetSimLockStatus_3700
 * @tc.name  : testV1GetSimLockStatus035
 * @tc.desc  : GetSimLockStatus, slotId is 0, classx = 255, fac= AG, mode = 2
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetSimLockStatus035, Function | MediumTest | Level1)
{
#ifdef TEL_TEST_PIN_PUK
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SimLockInfo simLockInfo;
    simLockInfo.classx = 255;
    simLockInfo.fac = "AG";
    simLockInfo.mode = 2;
    constexpr const char *FAC_PIN_LOCK = "AG";
    int32_t ret = g_rilInterface->GetSimLockStatus(SLOTID_1, GetSerialId(), simLockInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_GET_SIM_LOCK_STATUS));
#endif
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetSimLockStatus_3800
 * @tc.name  : testV1GetSimLockStatus036
 * @tc.desc  : GetSimLockStatus, slotId is 0, classx = 255, fac= AC, mode = 2
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetSimLockStatus036, Function | MediumTest | Level1)
{
#ifdef TEL_TEST_PIN_PUK
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SimLockInfo simLockInfo;
    simLockInfo.classx = 255;
    simLockInfo.fac = "AC";
    simLockInfo.mode = 2;
    constexpr const char *FAC_PIN_LOCK = "AC";
    int32_t ret = g_rilInterface->GetSimLockStatus(SLOTID_1, GetSerialId(), simLockInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_GET_SIM_LOCK_STATUS));
#endif
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetSimLockStatus_3900
 * @tc.name  : testV1GetSimLockStatus037
 * @tc.desc  : GetSimLockStatus, slotId is 0, classx = 255, fac= FD, mode = 2
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetSimLockStatus037, Function | MediumTest | Level1)
{
#ifdef TEL_TEST_PIN_PUK
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SimLockInfo simLockInfo;
    simLockInfo.classx = 255;
    simLockInfo.fac = "FD";
    simLockInfo.mode = 2;
    constexpr const char *FAC_PIN_LOCK = "FD";
    int32_t ret = g_rilInterface->GetSimLockStatus(SLOTID_1, GetSerialId(), simLockInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_GET_SIM_LOCK_STATUS));
#endif
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetSimLockStatus_4000
 * @tc.name  : testV1GetSimLockStatus038
 * @tc.desc  : GetSimLockStatus, slotId is 0, classx = 255, fac= PN, mode = 2
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetSimLockStatus038, Function | MediumTest | Level1)
{
#ifdef TEL_TEST_PIN_PUK
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SimLockInfo simLockInfo;
    simLockInfo.classx = 255;
    simLockInfo.fac = "PN";
    simLockInfo.mode = 2;
    constexpr const char *FAC_PIN_LOCK = "PN";
    int32_t ret = g_rilInterface->GetSimLockStatus(SLOTID_1, GetSerialId(), simLockInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_GET_SIM_LOCK_STATUS));
#endif
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetSimLockStatus_4100
 * @tc.name  : testV1GetSimLockStatus039
 * @tc.desc  : GetSimLockStatus, slotId is 0, classx = 255, fac= PU, mode = 2
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetSimLockStatus039, Function | MediumTest | Level1)
{
#ifdef TEL_TEST_PIN_PUK
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SimLockInfo simLockInfo;
    simLockInfo.classx = 255;
    simLockInfo.fac = "PU";
    simLockInfo.mode = 2;
    constexpr const char *FAC_PIN_LOCK = "PU";
    int32_t ret = g_rilInterface->GetSimLockStatus(SLOTID_1, GetSerialId(), simLockInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_GET_SIM_LOCK_STATUS));
#endif
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetSimLockStatus_4200
 * @tc.name  : testV1GetSimLockStatus040
 * @tc.desc  : GetSimLockStatus, slotId is 0, classx = 255, fac= PP, mode = 2
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetSimLockStatus040, Function | MediumTest | Level1)
{
#ifdef TEL_TEST_PIN_PUK
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SimLockInfo simLockInfo;
    simLockInfo.classx = 255;
    simLockInfo.fac = "PP";
    simLockInfo.mode = 2;
    constexpr const char *FAC_PIN_LOCK = "PU";
    int32_t ret = g_rilInterface->GetSimLockStatus(SLOTID_1, GetSerialId(), simLockInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_GET_SIM_LOCK_STATUS));
#endif
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetSimLockStatus_4300
 * @tc.name  : testV1GetSimLockStatus041
 * @tc.desc  : GetSimLockStatus, slotId is 1, classx = 255, fac= AO, mode = 0
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetSimLockStatus041, Function | MediumTest | Level1)
{
#ifdef TEL_TEST_PIN_PUK
    if (!IsReady(SLOTID_2)) {
        return;
    }
    SimLockInfo simLockInfo;
    simLockInfo.classx = 255;
    simLockInfo.fac = "AO";
    simLockInfo.mode = 0;
    constexpr const char *FAC_PIN_LOCK = "AO";
    int32_t ret = g_rilInterface->GetSimLockStatus(SLOTID_2, GetSerialId(), simLockInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_GET_SIM_LOCK_STATUS));
#endif
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetSimLockStatus_4400
 * @tc.name  : testV1GetSimLockStatus042
 * @tc.desc  : GetSimLockStatus, slotId is 1, classx = 255, fac= OI, mode = 0
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetSimLockStatus042, Function | MediumTest | Level1)
{
#ifdef TEL_TEST_PIN_PUK
    if (!IsReady(SLOTID_2)) {
        return;
    }
    SimLockInfo simLockInfo;
    simLockInfo.classx = 255;
    simLockInfo.fac = "OI";
    simLockInfo.mode = 0;
    constexpr const char *FAC_PIN_LOCK = "OI";
    int32_t ret = g_rilInterface->GetSimLockStatus(SLOTID_2, GetSerialId(), simLockInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_GET_SIM_LOCK_STATUS));
#endif
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetSimLockStatus_4500
 * @tc.name  : testV1GetSimLockStatus043
 * @tc.desc  : GetSimLockStatus, slotId is 1, classx = 255, fac= OX, mode = 0
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetSimLockStatus043, Function | MediumTest | Level1)
{
#ifdef TEL_TEST_PIN_PUK
    if (!IsReady(SLOTID_2)) {
        return;
    }
    SimLockInfo simLockInfo;
    simLockInfo.classx = 255;
    simLockInfo.fac = "OX";
    simLockInfo.mode = 0;
    constexpr const char *FAC_PIN_LOCK = "OX";
    int32_t ret = g_rilInterface->GetSimLockStatus(SLOTID_2, GetSerialId(), simLockInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_GET_SIM_LOCK_STATUS));
#endif
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetSimLockStatus_4600
 * @tc.name  : testV1GetSimLockStatus044
 * @tc.desc  : GetSimLockStatus, slotId is 1, classx = 255, fac= AI, mode = 0
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetSimLockStatus044, Function | MediumTest | Level1)
{
#ifdef TEL_TEST_PIN_PUK
    if (!IsReady(SLOTID_2)) {
        return;
    }
    SimLockInfo simLockInfo;
    simLockInfo.classx = 255;
    simLockInfo.fac = "AI";
    simLockInfo.mode = 0;
    constexpr const char *FAC_PIN_LOCK = "AI";
    int32_t ret = g_rilInterface->GetSimLockStatus(SLOTID_2, GetSerialId(), simLockInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_GET_SIM_LOCK_STATUS));
#endif
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetSimLockStatus_4700
 * @tc.name  : testV1GetSimLockStatus045
 * @tc.desc  : GetSimLockStatus, slotId is 1, classx = 255, fac= IR, mode = 0
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetSimLockStatus045, Function | MediumTest | Level1)
{
#ifdef TEL_TEST_PIN_PUK
    if (!IsReady(SLOTID_2)) {
        return;
    }
    SimLockInfo simLockInfo;
    simLockInfo.classx = 255;
    simLockInfo.fac = "IR";
    simLockInfo.mode = 0;
    constexpr const char *FAC_PIN_LOCK = "IR";
    int32_t ret = g_rilInterface->GetSimLockStatus(SLOTID_2, GetSerialId(), simLockInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_GET_SIM_LOCK_STATUS));
#endif
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetSimLockStatus_4800
 * @tc.name  : testV1GetSimLockStatus046
 * @tc.desc  : GetSimLockStatus, slotId is 1, classx = 255, fac= AB, mode = 0
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetSimLockStatus046, Function | MediumTest | Level1)
{
#ifdef TEL_TEST_PIN_PUK
    if (!IsReady(SLOTID_2)) {
        return;
    }
    SimLockInfo simLockInfo;
    simLockInfo.classx = 255;
    simLockInfo.fac = "AB";
    simLockInfo.mode = 0;
    constexpr const char *FAC_PIN_LOCK = "AB";
    int32_t ret = g_rilInterface->GetSimLockStatus(SLOTID_2, GetSerialId(), simLockInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_GET_SIM_LOCK_STATUS));
#endif
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetSimLockStatus_4900
 * @tc.name  : testV1GetSimLockStatus047
 * @tc.desc  : GetSimLockStatus, slotId is 1, classx = 255, fac= AG, mode = 0
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetSimLockStatus047, Function | MediumTest | Level1)
{
#ifdef TEL_TEST_PIN_PUK
    if (!IsReady(SLOTID_2)) {
        return;
    }
    SimLockInfo simLockInfo;
    simLockInfo.classx = 255;
    simLockInfo.fac = "AG";
    simLockInfo.mode = 0;
    constexpr const char *FAC_PIN_LOCK = "AG";
    int32_t ret = g_rilInterface->GetSimLockStatus(SLOTID_2, GetSerialId(), simLockInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_GET_SIM_LOCK_STATUS));
#endif
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetSimLockStatus_5000
 * @tc.name  : testV1GetSimLockStatus048
 * @tc.desc  : GetSimLockStatus, slotId is 1, classx = 255, fac= AC, mode = 0
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetSimLockStatus048, Function | MediumTest | Level1)
{
#ifdef TEL_TEST_PIN_PUK
    if (!IsReady(SLOTID_2)) {
        return;
    }
    SimLockInfo simLockInfo;
    simLockInfo.classx = 255;
    simLockInfo.fac = "AC";
    simLockInfo.mode = 0;
    constexpr const char *FAC_PIN_LOCK = "AC";
    int32_t ret = g_rilInterface->GetSimLockStatus(SLOTID_2, GetSerialId(), simLockInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_GET_SIM_LOCK_STATUS));
#endif
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetSimLockStatus_5100
 * @tc.name  : testV1GetSimLockStatus049
 * @tc.desc  : GetSimLockStatus, slotId is 1, classx = 255, fac= FD, mode = 0
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetSimLockStatus049, Function | MediumTest | Level1)
{
#ifdef TEL_TEST_PIN_PUK
    if (!IsReady(SLOTID_2)) {
        return;
    }
    SimLockInfo simLockInfo;
    simLockInfo.classx = 255;
    simLockInfo.fac = "FD";
    simLockInfo.mode = 0;
    constexpr const char *FAC_PIN_LOCK = "FD";
    int32_t ret = g_rilInterface->GetSimLockStatus(SLOTID_2, GetSerialId(), simLockInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_GET_SIM_LOCK_STATUS));
#endif
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetSimLockStatus_5200
 * @tc.name  : testV1GetSimLockStatus050
 * @tc.desc  : GetSimLockStatus, slotId is 1, classx = 255, fac= PN, mode = 0, status = 1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetSimLockStatus050, Function | MediumTest | Level1)
{
#ifdef TEL_TEST_PIN_PUK
    if (!IsReady(SLOTID_2)) {
        return;
    }
    SimLockInfo simLockInfo;
    simLockInfo.classx = 255;
    simLockInfo.fac = "PN";
    simLockInfo.mode = 0;
    simLockInfo.status = 1;
    constexpr const char *FAC_PIN_LOCK = "PN";
    int32_t ret = g_rilInterface->GetSimLockStatus(SLOTID_2, GetSerialId(), simLockInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_GET_SIM_LOCK_STATUS));
#endif
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetSimLockStatus_5300
 * @tc.name  : testV1GetSimLockStatus051
 * @tc.desc  : GetSimLockStatus, slotId is 1, classx = 255, fac= PU, mode = 0, status = 1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetSimLockStatus051, Function | MediumTest | Level1)
{
#ifdef TEL_TEST_PIN_PUK
    if (!IsReady(SLOTID_2)) {
        return;
    }
    SimLockInfo simLockInfo;
    simLockInfo.classx = 255;
    simLockInfo.fac = "PU";
    simLockInfo.mode = 0;
    simLockInfo.status = 1;
    constexpr const char *FAC_PIN_LOCK = "PU";
    int32_t ret = g_rilInterface->GetSimLockStatus(SLOTID_2, GetSerialId(), simLockInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_GET_SIM_LOCK_STATUS));
#endif
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetSimLockStatus_5400
 * @tc.name  : testV1GetSimLockStatus052
 * @tc.desc  : GetSimLockStatus, slotId is 1, classx = 255, fac= PP, mode = 0, status = 1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetSimLockStatus052, Function | MediumTest | Level1)
{
#ifdef TEL_TEST_PIN_PUK
    if (!IsReady(SLOTID_2)) {
        return;
    }
    SimLockInfo simLockInfo;
    simLockInfo.classx = 255;
    simLockInfo.fac = "PP";
    simLockInfo.mode = 0;
    simLockInfo.status = 1;
    constexpr const char *FAC_PIN_LOCK = "PU";
    int32_t ret = g_rilInterface->GetSimLockStatus(SLOTID_2, GetSerialId(), simLockInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_GET_SIM_LOCK_STATUS));
#endif
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetSimLockStatus_5500
 * @tc.name  : testV1GetSimLockStatus053
 * @tc.desc  : GetSimLockStatus, slotId is 1, classx = 255, fac= AO, mode = 1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetSimLockStatus053, Function | MediumTest | Level1)
{
#ifdef TEL_TEST_PIN_PUK
    if (!IsReady(SLOTID_2)) {
        return;
    }
    SimLockInfo simLockInfo;
    simLockInfo.classx = 255;
    simLockInfo.fac = "AO";
    simLockInfo.mode = 1;
    constexpr const char *FAC_PIN_LOCK = "AO";
    int32_t ret = g_rilInterface->GetSimLockStatus(SLOTID_2, GetSerialId(), simLockInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_GET_SIM_LOCK_STATUS));
#endif
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetSimLockStatus_5600
 * @tc.name  : testV1GetSimLockStatus054
 * @tc.desc  : GetSimLockStatus, slotId is 1, classx = 255, fac= OI, mode = 1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetSimLockStatus054, Function | MediumTest | Level1)
{
#ifdef TEL_TEST_PIN_PUK
    if (!IsReady(SLOTID_2)) {
        return;
    }
    SimLockInfo simLockInfo;
    simLockInfo.classx = 255;
    simLockInfo.fac = "OI";
    simLockInfo.mode = 1;
    constexpr const char *FAC_PIN_LOCK = "OI";
    int32_t ret = g_rilInterface->GetSimLockStatus(SLOTID_2, GetSerialId(), simLockInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_GET_SIM_LOCK_STATUS));
#endif
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetSimLockStatus_5700
 * @tc.name  : testV1GetSimLockStatus055
 * @tc.desc  : GetSimLockStatus, slotId is 1, classx = 255, fac= OX, mode = 1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetSimLockStatus055, Function | MediumTest | Level1)
{
#ifdef TEL_TEST_PIN_PUK
    if (!IsReady(SLOTID_2)) {
        return;
    }
    SimLockInfo simLockInfo;
    simLockInfo.classx = 255;
    simLockInfo.fac = "OX";
    simLockInfo.mode = 1;
    constexpr const char *FAC_PIN_LOCK = "OX";
    int32_t ret = g_rilInterface->GetSimLockStatus(SLOTID_2, GetSerialId(), simLockInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_GET_SIM_LOCK_STATUS));
#endif
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetSimLockStatus_5800
 * @tc.name  : testV1GetSimLockStatus056
 * @tc.desc  : GetSimLockStatus, slotId is 1, classx = 255, fac= AI, mode = 1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetSimLockStatus056, Function | MediumTest | Level1)
{
#ifdef TEL_TEST_PIN_PUK
    if (!IsReady(SLOTID_2)) {
        return;
    }
    SimLockInfo simLockInfo;
    simLockInfo.classx = 255;
    simLockInfo.fac = "AI";
    simLockInfo.mode = 1;
    constexpr const char *FAC_PIN_LOCK = "AI";
    int32_t ret = g_rilInterface->GetSimLockStatus(SLOTID_2, GetSerialId(), simLockInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_GET_SIM_LOCK_STATUS));
#endif
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetSimLockStatus_5900
 * @tc.name  : testV1GetSimLockStatus057
 * @tc.desc  : GetSimLockStatus, slotId is 1, classx = 255, fac= IR, mode = 1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetSimLockStatus057, Function | MediumTest | Level1)
{
#ifdef TEL_TEST_PIN_PUK
    if (!IsReady(SLOTID_2)) {
        return;
    }
    SimLockInfo simLockInfo;
    simLockInfo.classx = 255;
    simLockInfo.fac = "IR";
    simLockInfo.mode = 1;
    constexpr const char *FAC_PIN_LOCK = "IR";
    int32_t ret = g_rilInterface->GetSimLockStatus(SLOTID_2, GetSerialId(), simLockInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_GET_SIM_LOCK_STATUS));
#endif
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetSimLockStatus_6000
 * @tc.name  : testV1GetSimLockStatus058
 * @tc.desc  : GetSimLockStatus, slotId is 1, classx = 255, fac= AB, mode = 1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetSimLockStatus058, Function | MediumTest | Level1)
{
#ifdef TEL_TEST_PIN_PUK
    if (!IsReady(SLOTID_2)) {
        return;
    }
    SimLockInfo simLockInfo;
    simLockInfo.classx = 255;
    simLockInfo.fac = "AB";
    simLockInfo.mode = 1;
    constexpr const char *FAC_PIN_LOCK = "AB";
    int32_t ret = g_rilInterface->GetSimLockStatus(SLOTID_2, GetSerialId(), simLockInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_GET_SIM_LOCK_STATUS));
#endif
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetSimLockStatus_6100
 * @tc.name  : testV1GetSimLockStatus059
 * @tc.desc  : GetSimLockStatus, slotId is 1, classx = 255, fac= AG, mode = 1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetSimLockStatus059, Function | MediumTest | Level1)
{
#ifdef TEL_TEST_PIN_PUK
    if (!IsReady(SLOTID_2)) {
        return;
    }
    SimLockInfo simLockInfo;
    simLockInfo.classx = 255;
    simLockInfo.fac = "AG";
    simLockInfo.mode = 1;
    constexpr const char *FAC_PIN_LOCK = "AG";
    int32_t ret = g_rilInterface->GetSimLockStatus(SLOTID_2, GetSerialId(), simLockInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_GET_SIM_LOCK_STATUS));
#endif
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetSimLockStatus_6200
 * @tc.name  : testV1GetSimLockStatus060
 * @tc.desc  : GetSimLockStatus, slotId is 1, classx = 255, fac= AC, mode = 1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetSimLockStatus060, Function | MediumTest | Level1)
{
#ifdef TEL_TEST_PIN_PUK
    if (!IsReady(SLOTID_2)) {
        return;
    }
    SimLockInfo simLockInfo;
    simLockInfo.classx = 255;
    simLockInfo.fac = "AC";
    simLockInfo.mode = 1;
    constexpr const char *FAC_PIN_LOCK = "AC";
    int32_t ret = g_rilInterface->GetSimLockStatus(SLOTID_2, GetSerialId(), simLockInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_GET_SIM_LOCK_STATUS));
#endif
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetSimLockStatus_6300
 * @tc.name  : testV1GetSimLockStatus061
 * @tc.desc  : GetSimLockStatus, slotId is 1, classx = 255, fac= FD, mode = 1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetSimLockStatus061, Function | MediumTest | Level1)
{
#ifdef TEL_TEST_PIN_PUK
    if (!IsReady(SLOTID_2)) {
        return;
    }
    SimLockInfo simLockInfo;
    simLockInfo.classx = 255;
    simLockInfo.fac = "FD";
    simLockInfo.mode = 1;
    constexpr const char *FAC_PIN_LOCK = "FD";
    int32_t ret = g_rilInterface->GetSimLockStatus(SLOTID_2, GetSerialId(), simLockInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_GET_SIM_LOCK_STATUS));
#endif
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetSimLockStatus_6400
 * @tc.name  : testV1GetSimLockStatus062
 * @tc.desc  : GetSimLockStatus, slotId is 1, classx = 255, fac= PN, mode = 1, status = 1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetSimLockStatus062, Function | MediumTest | Level1)
{
#ifdef TEL_TEST_PIN_PUK
    if (!IsReady(SLOTID_2)) {
        return;
    }
    SimLockInfo simLockInfo;
    simLockInfo.classx = 255;
    simLockInfo.fac = "PN";
    simLockInfo.mode = 1;
    simLockInfo.status = 1;
    constexpr const char *FAC_PIN_LOCK = "PN";
    int32_t ret = g_rilInterface->GetSimLockStatus(SLOTID_2, GetSerialId(), simLockInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_GET_SIM_LOCK_STATUS));
#endif
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetSimLockStatus_6500
 * @tc.name  : testV1GetSimLockStatus063
 * @tc.desc  : GetSimLockStatus, slotId is 1, classx = 255, fac= PU, mode = 1, status = 1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetSimLockStatus063, Function | MediumTest | Level1)
{
#ifdef TEL_TEST_PIN_PUK
    if (!IsReady(SLOTID_2)) {
        return;
    }
    SimLockInfo simLockInfo;
    simLockInfo.classx = 255;
    simLockInfo.fac = "PU";
    simLockInfo.mode = 1;
    simLockInfo.status = 1;
    constexpr const char *FAC_PIN_LOCK = "PU";
    int32_t ret = g_rilInterface->GetSimLockStatus(SLOTID_2, GetSerialId(), simLockInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_GET_SIM_LOCK_STATUS));
#endif
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetSimLockStatus_6600
 * @tc.name  : testV1GetSimLockStatus064
 * @tc.desc  : GetSimLockStatus, slotId is 1, classx = 255, fac= PP, mode = 1, status = 1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetSimLockStatus064, Function | MediumTest | Level1)
{
#ifdef TEL_TEST_PIN_PUK
    if (!IsReady(SLOTID_2)) {
        return;
    }
    SimLockInfo simLockInfo;
    simLockInfo.classx = 255;
    simLockInfo.fac = "PP";
    simLockInfo.mode = 1;
    simLockInfo.status = 1;
    constexpr const char *FAC_PIN_LOCK = "PU";
    int32_t ret = g_rilInterface->GetSimLockStatus(SLOTID_2, GetSerialId(), simLockInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_GET_SIM_LOCK_STATUS));
#endif
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetSimLockStatus_6700
 * @tc.name  : testV1GetSimLockStatus065
 * @tc.desc  : GetSimLockStatus, slotId is 1, classx = 255, fac= AO, mode = 2
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetSimLockStatus065, Function | MediumTest | Level1)
{
#ifdef TEL_TEST_PIN_PUK
    if (!IsReady(SLOTID_2)) {
        return;
    }
    SimLockInfo simLockInfo;
    simLockInfo.classx = 255;
    simLockInfo.fac = "AO";
    simLockInfo.mode = 2;
    constexpr const char *FAC_PIN_LOCK = "AO";
    int32_t ret = g_rilInterface->GetSimLockStatus(SLOTID_2, GetSerialId(), simLockInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_GET_SIM_LOCK_STATUS));
#endif
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetSimLockStatus_6800
 * @tc.name  : testV1GetSimLockStatus066
 * @tc.desc  : GetSimLockStatus, slotId is 1, classx = 255, fac= OI, mode = 2
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetSimLockStatus066, Function | MediumTest | Level1)
{
#ifdef TEL_TEST_PIN_PUK
    if (!IsReady(SLOTID_2)) {
        return;
    }
    SimLockInfo simLockInfo;
    simLockInfo.classx = 255;
    simLockInfo.fac = "OI";
    simLockInfo.mode = 2;
    constexpr const char *FAC_PIN_LOCK = "OI";
    int32_t ret = g_rilInterface->GetSimLockStatus(SLOTID_2, GetSerialId(), simLockInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_GET_SIM_LOCK_STATUS));
#endif
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetSimLockStatus_6900
 * @tc.name  : testV1GetSimLockStatus067
 * @tc.desc  : GetSimLockStatus, slotId is 1, classx = 255, fac= OX, mode = 2
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetSimLockStatus067, Function | MediumTest | Level1)
{
#ifdef TEL_TEST_PIN_PUK
    if (!IsReady(SLOTID_2)) {
        return;
    }
    SimLockInfo simLockInfo;
    simLockInfo.classx = 255;
    simLockInfo.fac = "OX";
    simLockInfo.mode = 2;
    constexpr const char *FAC_PIN_LOCK = "OX";
    int32_t ret = g_rilInterface->GetSimLockStatus(SLOTID_2, GetSerialId(), simLockInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_GET_SIM_LOCK_STATUS));
#endif
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetSimLockStatus_7000
 * @tc.name  : testV1GetSimLockStatus068
 * @tc.desc  : GetSimLockStatus, slotId is 1, classx = 255, fac= AI, mode = 2
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetSimLockStatus068, Function | MediumTest | Level1)
{
#ifdef TEL_TEST_PIN_PUK
    if (!IsReady(SLOTID_2)) {
        return;
    }
    SimLockInfo simLockInfo;
    simLockInfo.classx = 255;
    simLockInfo.fac = "AI";
    simLockInfo.mode = 2;
    constexpr const char *FAC_PIN_LOCK = "AI";
    int32_t ret = g_rilInterface->GetSimLockStatus(SLOTID_2, GetSerialId(), simLockInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_GET_SIM_LOCK_STATUS));
#endif
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetSimLockStatus_7100
 * @tc.name  : testV1GetSimLockStatus069
 * @tc.desc  : GetSimLockStatus, slotId is 1, classx = 255, fac= IR, mode = 2
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetSimLockStatus069, Function | MediumTest | Level1)
{
#ifdef TEL_TEST_PIN_PUK
    if (!IsReady(SLOTID_2)) {
        return;
    }
    SimLockInfo simLockInfo;
    simLockInfo.classx = 255;
    simLockInfo.fac = "IR";
    simLockInfo.mode = 2;
    constexpr const char *FAC_PIN_LOCK = "IR";
    int32_t ret = g_rilInterface->GetSimLockStatus(SLOTID_2, GetSerialId(), simLockInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_GET_SIM_LOCK_STATUS));
#endif
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetSimLockStatus_7200
 * @tc.name  : testV1GetSimLockStatus070
 * @tc.desc  : GetSimLockStatus, slotId is 1, classx = 255, fac= AB, mode = 2
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetSimLockStatus070, Function | MediumTest | Level1)
{
#ifdef TEL_TEST_PIN_PUK
    if (!IsReady(SLOTID_2)) {
        return;
    }
    SimLockInfo simLockInfo;
    simLockInfo.classx = 255;
    simLockInfo.fac = "AB";
    simLockInfo.mode = 2;
    constexpr const char *FAC_PIN_LOCK = "AB";
    int32_t ret = g_rilInterface->GetSimLockStatus(SLOTID_2, GetSerialId(), simLockInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_GET_SIM_LOCK_STATUS));
#endif
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetSimLockStatus_7300
 * @tc.name  : testV1GetSimLockStatus071
 * @tc.desc  : GetSimLockStatus, slotId is 1, classx = 255, fac= AG, mode = 2
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetSimLockStatus071, Function | MediumTest | Level1)
{
#ifdef TEL_TEST_PIN_PUK
    if (!IsReady(SLOTID_2)) {
        return;
    }
    SimLockInfo simLockInfo;
    simLockInfo.classx = 255;
    simLockInfo.fac = "AG";
    simLockInfo.mode = 2;
    constexpr const char *FAC_PIN_LOCK = "AG";
    int32_t ret = g_rilInterface->GetSimLockStatus(SLOTID_2, GetSerialId(), simLockInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_GET_SIM_LOCK_STATUS));
#endif
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetSimLockStatus_7400
 * @tc.name  : testV1GetSimLockStatus072
 * @tc.desc  : GetSimLockStatus, slotId is 1, classx = 255, fac= AC, mode = 2
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetSimLockStatus072, Function | MediumTest | Level1)
{
#ifdef TEL_TEST_PIN_PUK
    if (!IsReady(SLOTID_2)) {
        return;
    }
    SimLockInfo simLockInfo;
    simLockInfo.classx = 255;
    simLockInfo.fac = "AC";
    simLockInfo.mode = 2;
    constexpr const char *FAC_PIN_LOCK = "AC";
    int32_t ret = g_rilInterface->GetSimLockStatus(SLOTID_2, GetSerialId(), simLockInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_GET_SIM_LOCK_STATUS));
#endif
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetSimLockStatus_7500
 * @tc.name  : testV1GetSimLockStatus073
 * @tc.desc  : GetSimLockStatus, slotId is 1, classx = 255, fac= FD, mode = 2
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetSimLockStatus073, Function | MediumTest | Level1)
{
#ifdef TEL_TEST_PIN_PUK
    if (!IsReady(SLOTID_2)) {
        return;
    }
    SimLockInfo simLockInfo;
    simLockInfo.classx = 255;
    simLockInfo.fac = "FD";
    simLockInfo.mode = 2;
    constexpr const char *FAC_PIN_LOCK = "FD";
    int32_t ret = g_rilInterface->GetSimLockStatus(SLOTID_2, GetSerialId(), simLockInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_GET_SIM_LOCK_STATUS));
#endif
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetSimLockStatus_7600
 * @tc.name  : testV1GetSimLockStatus074
 * @tc.desc  : GetSimLockStatus, slotId is 1, classx = 255, fac= PN, mode = 2
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetSimLockStatus074, Function | MediumTest | Level1)
{
#ifdef TEL_TEST_PIN_PUK
    if (!IsReady(SLOTID_2)) {
        return;
    }
    SimLockInfo simLockInfo;
    simLockInfo.classx = 255;
    simLockInfo.fac = "PN";
    simLockInfo.mode = 2;
    constexpr const char *FAC_PIN_LOCK = "PN";
    int32_t ret = g_rilInterface->GetSimLockStatus(SLOTID_2, GetSerialId(), simLockInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_GET_SIM_LOCK_STATUS));
#endif
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetSimLockStatus_7700
 * @tc.name  : testV1GetSimLockStatus075
 * @tc.desc  : GetSimLockStatus, slotId is 1, classx = 255, fac= PU, mode = 2
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetSimLockStatus075, Function | MediumTest | Level1)
{
#ifdef TEL_TEST_PIN_PUK
    if (!IsReady(SLOTID_2)) {
        return;
    }
    SimLockInfo simLockInfo;
    simLockInfo.classx = 255;
    simLockInfo.fac = "PU";
    simLockInfo.mode = 2;
    constexpr const char *FAC_PIN_LOCK = "PU";
    int32_t ret = g_rilInterface->GetSimLockStatus(SLOTID_2, GetSerialId(), simLockInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_GET_SIM_LOCK_STATUS));
#endif
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetSimLockStatus_7800
 * @tc.name  : testV1GetSimLockStatus076
 * @tc.desc  : GetSimLockStatus, slotId is 1, classx = 255, fac= PP, mode = 2
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetSimLockStatus076, Function | MediumTest | Level1)
{
#ifdef TEL_TEST_PIN_PUK
    if (!IsReady(SLOTID_2)) {
        return;
    }
    SimLockInfo simLockInfo;
    simLockInfo.classx = 255;
    simLockInfo.fac = "PP";
    simLockInfo.mode = 2;
    constexpr const char *FAC_PIN_LOCK = "PU";
    int32_t ret = g_rilInterface->GetSimLockStatus(SLOTID_2, GetSerialId(), simLockInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_GET_SIM_LOCK_STATUS));
#endif
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1ChangeSimPassword_0300
 * @tc.name  : testV1ChangeSimPassword001
 * @tc.desc  : ChangeSimPassword, slotId is 0, serialId is -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1ChangeSimPassword001, Function | MediumTest | Level2)
{
#ifdef TEL_TEST_PIN_PUK
    if (!IsReady(SLOTID_1)) {
        return;
    }
    ISimPasswordInfo simPassword;
    simPassword.fac = "SC";
    simPassword.oldPassword = "1234";
    simPassword.newPassword = "1234";
    simPassword.passwordLength = 4;
    int32_t ret = g_rilInterface->ChangeSimPassword(SLOTID_1, -1, simPassword);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
#endif
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1ChangeSimPassword_0400
 * @tc.name  : testV1ChangeSimPassword002
 * @tc.desc  : ChangeSimPassword, slotId is 1, serialId is -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1ChangeSimPassword002, Function | MediumTest | Level2)
{
#ifdef TEL_TEST_PIN_PUK
    if (!IsReady(SLOTID_2)) {
        return;
    }
    ISimPasswordInfo simPassword;
    simPassword.fac = "SC";
    simPassword.oldPassword = "1234";
    simPassword.newPassword = "1234";
    simPassword.passwordLength = 4;
    int32_t ret = g_rilInterface->ChangeSimPassword(SLOTID_2, -1, simPassword);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
#endif
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1ChangeSimPassword_0500
 * @tc.name  : testV1ChangeSimPassword003
 * @tc.desc  : ChangeSimPassword, slotId is 0, serialId is 2147483647
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1ChangeSimPassword003, Function | MediumTest | Level1)
{
#ifdef TEL_TEST_PIN_PUK
    if (!IsReady(SLOTID_1)) {
        return;
    }
    ISimPasswordInfo simPassword;
    simPassword.fac = "SC";
    simPassword.oldPassword = "1234";
    simPassword.newPassword = "1234";
    simPassword.passwordLength = 4;
    int32_t ret = g_rilInterface->ChangeSimPassword(SLOTID_1, 2147483647, simPassword);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_CHANGE_SIM_PASSWORD));
#endif
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1ChangeSimPassword_0600
 * @tc.name  : testV1ChangeSimPassword004
 * @tc.desc  : ChangeSimPassword, slotId is 1, serialId is 2147483647
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1ChangeSimPassword004, Function | MediumTest | Level1)
{
#ifdef TEL_TEST_PIN_PUK
    if (!IsReady(SLOTID_2)) {
        return;
    }
    ISimPasswordInfo simPassword;
    simPassword.fac = "SC";
    simPassword.oldPassword = "1234";
    simPassword.newPassword = "1234";
    simPassword.passwordLength = 4;
    int32_t ret = g_rilInterface->ChangeSimPassword(SLOTID_2, 2147483647, simPassword);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_CHANGE_SIM_PASSWORD));
#endif
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1ChangeSimPassword_0700
 * @tc.name  : testV1ChangeSimPassword005
 * @tc.desc  : ChangeSimPassword, slotId is 0, fac = AO
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1ChangeSimPassword005, Function | MediumTest | Level1)
{
#ifdef TEL_TEST_PIN_PUK
    if (!IsReady(SLOTID_1)) {
        return;
    }
    ISimPasswordInfo simPassword;
    simPassword.fac = "AO";
    simPassword.oldPassword = "1234";
    simPassword.newPassword = "1234";
    simPassword.passwordLength = 4;
    int32_t ret = g_rilInterface->ChangeSimPassword(SLOTID_1, GetSerialId(), simPassword);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_CHANGE_SIM_PASSWORD));
#endif
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1ChangeSimPassword_0800
 * @tc.name  : testV1ChangeSimPassword006
 * @tc.desc  : ChangeSimPassword, slotId is 0, fac = OI
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1ChangeSimPassword006, Function | MediumTest | Level1)
{
#ifdef TEL_TEST_PIN_PUK
    if (!IsReady(SLOTID_1)) {
        return;
    }
    ISimPasswordInfo simPassword;
    simPassword.fac = "OI";
    simPassword.oldPassword = "1234";
    simPassword.newPassword = "1234";
    simPassword.passwordLength = 4;
    int32_t ret = g_rilInterface->ChangeSimPassword(SLOTID_1, GetSerialId(), simPassword);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_CHANGE_SIM_PASSWORD));
#endif
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1ChangeSimPassword_0900
 * @tc.name  : testV1ChangeSimPassword007
 * @tc.desc  : ChangeSimPassword, slotId is 0, fac = OX
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1ChangeSimPassword007, Function | MediumTest | Level1)
{
#ifdef TEL_TEST_PIN_PUK
    if (!IsReady(SLOTID_1)) {
        return;
    }
    ISimPasswordInfo simPassword;
    simPassword.fac = "OX";
    simPassword.oldPassword = "1234";
    simPassword.newPassword = "1234";
    simPassword.passwordLength = 4;
    int32_t ret = g_rilInterface->ChangeSimPassword(SLOTID_1, GetSerialId(), simPassword);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_CHANGE_SIM_PASSWORD));
#endif
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1ChangeSimPassword_1000
 * @tc.name  : testV1ChangeSimPassword008
 * @tc.desc  : ChangeSimPassword, slotId is 0, fac = AI
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1ChangeSimPassword008, Function | MediumTest | Level1)
{
#ifdef TEL_TEST_PIN_PUK
    if (!IsReady(SLOTID_1)) {
        return;
    }
    ISimPasswordInfo simPassword;
    simPassword.fac = "AI";
    simPassword.oldPassword = "1234";
    simPassword.newPassword = "1234";
    simPassword.passwordLength = 4;
    int32_t ret = g_rilInterface->ChangeSimPassword(SLOTID_1, GetSerialId(), simPassword);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_CHANGE_SIM_PASSWORD));
#endif
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1ChangeSimPassword_1100
 * @tc.name  : testV1ChangeSimPassword009
 * @tc.desc  : ChangeSimPassword, slotId is 0, fac = IR
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1ChangeSimPassword009, Function | MediumTest | Level1)
{
#ifdef TEL_TEST_PIN_PUK
    if (!IsReady(SLOTID_1)) {
        return;
    }
    ISimPasswordInfo simPassword;
    simPassword.fac = "IR";
    simPassword.oldPassword = "1234";
    simPassword.newPassword = "1234";
    simPassword.passwordLength = 4;
    int32_t ret = g_rilInterface->ChangeSimPassword(SLOTID_1, GetSerialId(), simPassword);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_CHANGE_SIM_PASSWORD));
#endif
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1ChangeSimPassword_1200
 * @tc.name  : testV1ChangeSimPassword010
 * @tc.desc  : ChangeSimPassword, slotId is 0, fac = AB
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1ChangeSimPassword010, Function | MediumTest | Level1)
{
#ifdef TEL_TEST_PIN_PUK
    if (!IsReady(SLOTID_1)) {
        return;
    }
    ISimPasswordInfo simPassword;
    simPassword.fac = "AB";
    simPassword.oldPassword = "1234";
    simPassword.newPassword = "1234";
    simPassword.passwordLength = 4;
    int32_t ret = g_rilInterface->ChangeSimPassword(SLOTID_1, GetSerialId(), simPassword);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_CHANGE_SIM_PASSWORD));
#endif
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1ChangeSimPassword_1300
 * @tc.name  : testV1ChangeSimPassword011
 * @tc.desc  : ChangeSimPassword, slotId is 0, fac = AG
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1ChangeSimPassword011, Function | MediumTest | Level1)
{
#ifdef TEL_TEST_PIN_PUK
    if (!IsReady(SLOTID_1)) {
        return;
    }
    ISimPasswordInfo simPassword;
    simPassword.fac = "AG";
    simPassword.oldPassword = "1234";
    simPassword.newPassword = "1234";
    simPassword.passwordLength = 4;
    int32_t ret = g_rilInterface->ChangeSimPassword(SLOTID_1, GetSerialId(), simPassword);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_CHANGE_SIM_PASSWORD));
#endif
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1ChangeSimPassword_1400
 * @tc.name  : testV1ChangeSimPassword012
 * @tc.desc  : ChangeSimPassword, slotId is 0, fac = AC
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1ChangeSimPassword012, Function | MediumTest | Level1)
{
#ifdef TEL_TEST_PIN_PUK
    if (!IsReady(SLOTID_1)) {
        return;
    }
    ISimPasswordInfo simPassword;
    simPassword.fac = "AC";
    simPassword.oldPassword = "1234";
    simPassword.newPassword = "1234";
    simPassword.passwordLength = 4;
    int32_t ret = g_rilInterface->ChangeSimPassword(SLOTID_1, GetSerialId(), simPassword);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_CHANGE_SIM_PASSWORD));
#endif
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1ChangeSimPassword_1500
 * @tc.name  : testV1ChangeSimPassword013
 * @tc.desc  : ChangeSimPassword, slotId is 0, fac = FD
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1ChangeSimPassword013, Function | MediumTest | Level1)
{
#ifdef TEL_TEST_PIN_PUK
    if (!IsReady(SLOTID_1)) {
        return;
    }
    ISimPasswordInfo simPassword;
    simPassword.fac = "FD";
    simPassword.oldPassword = "1234";
    simPassword.newPassword = "1234";
    simPassword.passwordLength = 4;
    int32_t ret = g_rilInterface->ChangeSimPassword(SLOTID_1, GetSerialId(), simPassword);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_CHANGE_SIM_PASSWORD));
#endif
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1ChangeSimPassword_1600
 * @tc.name  : testV1ChangeSimPassword014
 * @tc.desc  : ChangeSimPassword, slotId is 0, fac = PN
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1ChangeSimPassword014, Function | MediumTest | Level1)
{
#ifdef TEL_TEST_PIN_PUK
    if (!IsReady(SLOTID_1)) {
        return;
    }
    ISimPasswordInfo simPassword;
    simPassword.fac = "PN";
    simPassword.oldPassword = "1234";
    simPassword.newPassword = "1234";
    simPassword.passwordLength = 4;
    int32_t ret = g_rilInterface->ChangeSimPassword(SLOTID_1, GetSerialId(), simPassword);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_CHANGE_SIM_PASSWORD));
#endif
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1ChangeSimPassword_1700
 * @tc.name  : testV1ChangeSimPassword015
 * @tc.desc  : ChangeSimPassword, slotId is 0, fac = PU
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1ChangeSimPassword015, Function | MediumTest | Level1)
{
#ifdef TEL_TEST_PIN_PUK
    if (!IsReady(SLOTID_1)) {
        return;
    }
    ISimPasswordInfo simPassword;
    simPassword.fac = "PU";
    simPassword.oldPassword = "1234";
    simPassword.newPassword = "1234";
    simPassword.passwordLength = 4;
    int32_t ret = g_rilInterface->ChangeSimPassword(SLOTID_1, GetSerialId(), simPassword);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_CHANGE_SIM_PASSWORD));
#endif
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1ChangeSimPassword_1800
 * @tc.name  : testV1ChangeSimPassword016
 * @tc.desc  : ChangeSimPassword, slotId is 0, fac = PP
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1ChangeSimPassword016, Function | MediumTest | Level1)
{
#ifdef TEL_TEST_PIN_PUK
    if (!IsReady(SLOTID_1)) {
        return;
    }
    ISimPasswordInfo simPassword;
    simPassword.fac = "PP";
    simPassword.oldPassword = "1234";
    simPassword.newPassword = "1234";
    simPassword.passwordLength = 4;
    int32_t ret = g_rilInterface->ChangeSimPassword(SLOTID_1, GetSerialId(), simPassword);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_CHANGE_SIM_PASSWORD));
#endif
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1ChangeSimPassword_1900
 * @tc.name  : testV1ChangeSimPassword017
 * @tc.desc  : ChangeSimPassword, slotId is 0, fac = AO,Password testing
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1ChangeSimPassword017, Function | MediumTest | Level1)
{
#ifdef TEL_TEST_PIN_PUK
    if (!IsReady(SLOTID_1)) {
        return;
    }
    ISimPasswordInfo simPassword;
    simPassword.fac = "AO";
    simPassword.oldPassword = "1qaz!QAZ";
    simPassword.newPassword = "1qaz!QAZ";
    simPassword.passwordLength = 9;
    int32_t ret = g_rilInterface->ChangeSimPassword(SLOTID_1, GetSerialId(), simPassword);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_CHANGE_SIM_PASSWORD));
#endif
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1ChangeSimPassword_2000
 * @tc.name  : testV1ChangeSimPassword018
 * @tc.desc  : ChangeSimPassword, slotId is 0, fac = AO,Password testing
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1ChangeSimPassword018, Function | MediumTest | Level1)
{
#ifdef TEL_TEST_PIN_PUK
    if (!IsReady(SLOTID_1)) {
        return;
    }
    ISimPasswordInfo simPassword;
    simPassword.fac = "AO";
    simPassword.oldPassword = "1234";
    simPassword.newPassword = "1qaz!QAZ";
    simPassword.passwordLength = 9;
    int32_t ret = g_rilInterface->ChangeSimPassword(SLOTID_1, GetSerialId(), simPassword);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_CHANGE_SIM_PASSWORD));
#endif
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1ChangeSimPassword_2100
 * @tc.name  : testV1ChangeSimPassword019
 * @tc.desc  : ChangeSimPassword, slotId is 1, fac = AO
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1ChangeSimPassword019, Function | MediumTest | Level1)
{
#ifdef TEL_TEST_PIN_PUK
    if (!IsReady(SLOTID_2)) {
        return;
    }
    ISimPasswordInfo simPassword;
    simPassword.fac = "AO";
    simPassword.oldPassword = "1234";
    simPassword.newPassword = "1234";
    simPassword.passwordLength = 4;
    int32_t ret = g_rilInterface->ChangeSimPassword(SLOTID_2, GetSerialId(), simPassword);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_CHANGE_SIM_PASSWORD));
#endif
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1ChangeSimPassword_2200
 * @tc.name  : testV1ChangeSimPassword020
 * @tc.desc  : ChangeSimPassword, slotId is 1, fac = OI
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1ChangeSimPassword020, Function | MediumTest | Level1)
{
#ifdef TEL_TEST_PIN_PUK
    if (!IsReady(SLOTID_2)) {
        return;
    }
    ISimPasswordInfo simPassword;
    simPassword.fac = "OI";
    simPassword.oldPassword = "1234";
    simPassword.newPassword = "1234";
    simPassword.passwordLength = 4;
    int32_t ret = g_rilInterface->ChangeSimPassword(SLOTID_2, GetSerialId(), simPassword);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_CHANGE_SIM_PASSWORD));
#endif
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1ChangeSimPassword_2300
 * @tc.name  : testV1ChangeSimPassword021
 * @tc.desc  : ChangeSimPassword, slotId is 1, fac = OX
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1ChangeSimPassword021, Function | MediumTest | Level1)
{
#ifdef TEL_TEST_PIN_PUK
    if (!IsReady(SLOTID_2)) {
        return;
    }
    ISimPasswordInfo simPassword;
    simPassword.fac = "OX";
    simPassword.oldPassword = "1234";
    simPassword.newPassword = "1234";
    simPassword.passwordLength = 4;
    int32_t ret = g_rilInterface->ChangeSimPassword(SLOTID_2, GetSerialId(), simPassword);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_CHANGE_SIM_PASSWORD));
#endif
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1ChangeSimPassword_2400
 * @tc.name  : testV1ChangeSimPassword022
 * @tc.desc  : ChangeSimPassword, slotId is 1, fac = AI
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1ChangeSimPassword022, Function | MediumTest | Level1)
{
#ifdef TEL_TEST_PIN_PUK
    if (!IsReady(SLOTID_2)) {
        return;
    }
    ISimPasswordInfo simPassword;
    simPassword.fac = "AI";
    simPassword.oldPassword = "1234";
    simPassword.newPassword = "1234";
    simPassword.passwordLength = 4;
    int32_t ret = g_rilInterface->ChangeSimPassword(SLOTID_2, GetSerialId(), simPassword);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_CHANGE_SIM_PASSWORD));
#endif
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1ChangeSimPassword_2500
 * @tc.name  : testV1ChangeSimPassword023
 * @tc.desc  : ChangeSimPassword, slotId is 1, fac = IR
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1ChangeSimPassword023, Function | MediumTest | Level1)
{
#ifdef TEL_TEST_PIN_PUK
    if (!IsReady(SLOTID_2)) {
        return;
    }
    ISimPasswordInfo simPassword;
    simPassword.fac = "IR";
    simPassword.oldPassword = "1234";
    simPassword.newPassword = "1234";
    simPassword.passwordLength = 4;
    int32_t ret = g_rilInterface->ChangeSimPassword(SLOTID_2, GetSerialId(), simPassword);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_CHANGE_SIM_PASSWORD));
#endif
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1ChangeSimPassword_2600
 * @tc.name  : testV1ChangeSimPassword024
 * @tc.desc  : ChangeSimPassword, slotId is 1, fac = AB
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1ChangeSimPassword024, Function | MediumTest | Level1)
{
#ifdef TEL_TEST_PIN_PUK
    if (!IsReady(SLOTID_2)) {
        return;
    }
    ISimPasswordInfo simPassword;
    simPassword.fac = "AB";
    simPassword.oldPassword = "1234";
    simPassword.newPassword = "1234";
    simPassword.passwordLength = 4;
    int32_t ret = g_rilInterface->ChangeSimPassword(SLOTID_2, GetSerialId(), simPassword);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_CHANGE_SIM_PASSWORD));
#endif
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1ChangeSimPassword_2700
 * @tc.name  : testV1ChangeSimPassword025
 * @tc.desc  : ChangeSimPassword, slotId is 1, fac = AG
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1ChangeSimPassword025, Function | MediumTest | Level1)
{
#ifdef TEL_TEST_PIN_PUK
    if (!IsReady(SLOTID_2)) {
        return;
    }
    ISimPasswordInfo simPassword;
    simPassword.fac = "AG";
    simPassword.oldPassword = "1234";
    simPassword.newPassword = "1234";
    simPassword.passwordLength = 4;
    int32_t ret = g_rilInterface->ChangeSimPassword(SLOTID_2, GetSerialId(), simPassword);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_CHANGE_SIM_PASSWORD));
#endif
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1ChangeSimPassword_2800
 * @tc.name  : testV1ChangeSimPassword026
 * @tc.desc  : ChangeSimPassword, slotId is 1, fac = AC
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1ChangeSimPassword026, Function | MediumTest | Level1)
{
#ifdef TEL_TEST_PIN_PUK
    if (!IsReady(SLOTID_2)) {
        return;
    }
    ISimPasswordInfo simPassword;
    simPassword.fac = "AC";
    simPassword.oldPassword = "1234";
    simPassword.newPassword = "1234";
    simPassword.passwordLength = 4;
    int32_t ret = g_rilInterface->ChangeSimPassword(SLOTID_2, GetSerialId(), simPassword);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_CHANGE_SIM_PASSWORD));
#endif
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1ChangeSimPassword_2900
 * @tc.name  : testV1ChangeSimPassword027
 * @tc.desc  : ChangeSimPassword, slotId is 1, fac = FD
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1ChangeSimPassword027, Function | MediumTest | Level1)
{
#ifdef TEL_TEST_PIN_PUK
    if (!IsReady(SLOTID_2)) {
        return;
    }
    ISimPasswordInfo simPassword;
    simPassword.fac = "FD";
    simPassword.oldPassword = "1234";
    simPassword.newPassword = "1234";
    simPassword.passwordLength = 4;
    int32_t ret = g_rilInterface->ChangeSimPassword(SLOTID_2, GetSerialId(), simPassword);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_CHANGE_SIM_PASSWORD));
#endif
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1ChangeSimPassword_3000
 * @tc.name  : testV1ChangeSimPassword028
 * @tc.desc  : ChangeSimPassword, slotId is 1, fac = PN
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1ChangeSimPassword028, Function | MediumTest | Level1)
{
#ifdef TEL_TEST_PIN_PUK
    if (!IsReady(SLOTID_2)) {
        return;
    }
    ISimPasswordInfo simPassword;
    simPassword.fac = "PN";
    simPassword.oldPassword = "1234";
    simPassword.newPassword = "1234";
    simPassword.passwordLength = 4;
    int32_t ret = g_rilInterface->ChangeSimPassword(SLOTID_2, GetSerialId(), simPassword);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_CHANGE_SIM_PASSWORD));
#endif
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1ChangeSimPassword_3100
 * @tc.name  : testV1ChangeSimPassword029
 * @tc.desc  : ChangeSimPassword, slotId is 1, fac = PU
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1ChangeSimPassword029, Function | MediumTest | Level1)
{
#ifdef TEL_TEST_PIN_PUK
    if (!IsReady(SLOTID_2)) {
        return;
    }
    ISimPasswordInfo simPassword;
    simPassword.fac = "PU";
    simPassword.oldPassword = "1234";
    simPassword.newPassword = "1234";
    simPassword.passwordLength = 4;
    int32_t ret = g_rilInterface->ChangeSimPassword(SLOTID_2, GetSerialId(), simPassword);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_CHANGE_SIM_PASSWORD));
#endif
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1ChangeSimPassword_3200
 * @tc.name  : testV1ChangeSimPassword030
 * @tc.desc  : ChangeSimPassword, slotId is 1, fac = PP
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1ChangeSimPassword030, Function | MediumTest | Level1)
{
#ifdef TEL_TEST_PIN_PUK
    if (!IsReady(SLOTID_2)) {
        return;
    }
    ISimPasswordInfo simPassword;
    simPassword.fac = "PP";
    simPassword.oldPassword = "1234";
    simPassword.newPassword = "1234";
    simPassword.passwordLength = 4;
    int32_t ret = g_rilInterface->ChangeSimPassword(SLOTID_2, GetSerialId(), simPassword);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_CHANGE_SIM_PASSWORD));
#endif
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1ChangeSimPassword_3300
 * @tc.name  : testV1ChangeSimPassword031
 * @tc.desc  : ChangeSimPassword, slotId is 1, fac = AO,Password testing
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1ChangeSimPassword031, Function | MediumTest | Level1)
{
#ifdef TEL_TEST_PIN_PUK
    if (!IsReady(SLOTID_2)) {
        return;
    }
    ISimPasswordInfo simPassword;
    simPassword.fac = "AO";
    simPassword.oldPassword = "1qaz!QAZ";
    simPassword.newPassword = "1qaz!QAZ";
    simPassword.passwordLength = 9;
    int32_t ret = g_rilInterface->ChangeSimPassword(SLOTID_2, GetSerialId(), simPassword);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_CHANGE_SIM_PASSWORD));
#endif
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1ChangeSimPassword_3400
 * @tc.name  : testV1ChangeSimPassword032
 * @tc.desc  : ChangeSimPassword, slotId is 1, fac = AO,Password testing
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1ChangeSimPassword032, Function | MediumTest | Level1)
{
#ifdef TEL_TEST_PIN_PUK
    if (!IsReady(SLOTID_2)) {
        return;
    }
    ISimPasswordInfo simPassword;
    simPassword.fac = "AO";
    simPassword.oldPassword = "1234";
    simPassword.newPassword = "1qaz!QAZ";
    simPassword.passwordLength = 9;
    int32_t ret = g_rilInterface->ChangeSimPassword(SLOTID_2, GetSerialId(), simPassword);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_CHANGE_SIM_PASSWORD));
#endif
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetSimStatus_0200
 * @tc.name  : testV1GetSimStatus001
 * @tc.desc  : GetSimStatus, stability test
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetSimStatus001, Function | MediumTest | Level1)
{
    if (g_rilInterface == nullptr) {
        return;
    }
    int32_t ret;
    for (int i = 0; i < 1000; i++) {
        ret = g_rilInterface->GetSimStatus(SLOTID_1, GetSerialId());
        if (ret != 2) {
            WaitFor(WAIT_TIME_SECOND);
            EXPECT_EQ(SUCCESS, ret);
            ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_GET_SIM_STATUS));
        } else {
            return;
        }
    }
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetLocateUpdatesResponse_0100
 * @tc.name  : testV1SetLocateUpdatesResponse001
 * @tc.desc  : Call function SetLocateUpdatesResponse slotId is SLOTID_1 Notification mode is REG_NOT_NOTIFY
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetLocateUpdatesResponse001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    g_setLocateUpdatesResponseFlag = false;
    int32_t ret = 0;
    ret = g_rilInterface->SetLocateUpdates(SLOTID_1, GetSerialId(), RilRegNotifyMode::REG_NOT_NOTIFY);
    EXPECT_EQ(true, g_setLocateUpdatesResponseFlag);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetLocateUpdatesResponse_0200
 * @tc.name  : testV1SetLocateUpdatesResponse002
 * @tc.desc  : Call function SetLocateUpdatesResponse slotId is SLOTID_2 Notification mode is REG_NOT_NOTIFY
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetLocateUpdatesResponse002, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    g_setLocateUpdatesResponseFlag = false;
    int32_t ret = 0;
    ret = g_rilInterface->SetLocateUpdates(SLOTID_2, GetSerialId(), RilRegNotifyMode::REG_NOT_NOTIFY);
    EXPECT_EQ(true, g_setLocateUpdatesResponseFlag);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetLocateUpdatesResponse_0300
 * @tc.name  : testV1SetLocateUpdatesResponse003
 * @tc.desc  : Call function SetLocateUpdatesResponse slotId is SLOTID_1 Notification mode is REG_NOTIFY_STAT_ONLY
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetLocateUpdatesResponse003, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    g_setLocateUpdatesResponseFlag = false;
    int32_t ret = 0;
    ret = g_rilInterface->SetLocateUpdates(SLOTID_1, GetSerialId(), RilRegNotifyMode::REG_NOTIFY_STAT_ONLY);
    EXPECT_EQ(true, g_setLocateUpdatesResponseFlag);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetLocateUpdatesResponse_0400
 * @tc.name  : testV1SetLocateUpdatesResponse004
 * @tc.desc  : Call function SetLocateUpdatesResponse slotId is SLOTID_2 SerialId is -1 Notification mode is
 * REG_NOT_NOTIFY
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetLocateUpdatesResponse004, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    g_setLocateUpdatesResponseFlag = false;
    int32_t ret = 0;
    ret = g_rilInterface->SetLocateUpdates(SLOTID_2, -1, RilRegNotifyMode::REG_NOT_NOTIFY);
    EXPECT_EQ(true, g_setLocateUpdatesResponseFlag);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetLocateUpdatesResponse_0500
 * @tc.name  : testV1SetLocateUpdatesResponse005
 * @tc.desc  : Call function SetLocateUpdatesResponse slotId is SLOTID_1 SerialId is -1 Notification mode is
 * REG_NOT_NOTIFY
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetLocateUpdatesResponse005, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    g_setLocateUpdatesResponseFlag = false;
    int32_t ret = 0;
    ret = g_rilInterface->SetLocateUpdates(SLOTID_1, -1, RilRegNotifyMode::REG_NOT_NOTIFY);
    EXPECT_EQ(false, g_setLocateUpdatesResponseFlag);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetLocateUpdatesResponse_0600
 * @tc.name  : testV1SetLocateUpdatesResponse006
 * @tc.desc  : Call function SetLocateUpdatesResponse slotId is SLOTID_2 SerialId is -1 Notification mode is
 * REG_NOTIFY_STAT_ONLY
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetLocateUpdatesResponse006, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    g_setLocateUpdatesResponseFlag = false;
    int32_t ret = 0;
    ret = g_rilInterface->SetLocateUpdates(SLOTID_2, -1, RilRegNotifyMode::REG_NOTIFY_STAT_ONLY);
    EXPECT_EQ(false, g_setLocateUpdatesResponseFlag);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetNotificationFilterResponse_0100
 * @tc.name  : testV1SetNotificationFilterResponse001
 * @tc.desc  : Call function SetNotificationFilterResponse.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetNotificationFilterResponse001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    g_setNotificationFilterResponseFlag = false;
    int32_t ret = g_rilInterface->SetNotificationFilter(
        SLOTID_1, GetSerialId(), static_cast<int32_t>(NotificationFilter::NOTIFICATION_FILTER_NONE));
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_setNotificationFilterResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetNotificationFilterResponse_0200
 * @tc.name  : testV1SetNotificationFilterResponse002
 * @tc.desc  : Call function SetNotificationFilterResponse.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetNotificationFilterResponse002, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    g_setNotificationFilterResponseFlag = false;
    int32_t ret = g_rilInterface->SetNotificationFilter(
        SLOTID_2, GetSerialId(), static_cast<int32_t>(NotificationFilter::NOTIFICATION_FILTER_NONE));
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_setNotificationFilterResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetNotificationFilterResponse_0300
 * @tc.name  : testV1SetNotificationFilterResponse003
 * @tc.desc  : Call function SetNotificationFilterResponse.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetNotificationFilterResponse003, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    g_setNotificationFilterResponseFlag = false;
    int32_t ret = g_rilInterface->SetNotificationFilter(
        SLOTID_1, -1, static_cast<int32_t>(NotificationFilter::NOTIFICATION_FILTER_NONE));
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
    EXPECT_EQ(false, g_setNotificationFilterResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetNotificationFilterResponse_0400
 * @tc.name  : testV1SetNotificationFilterResponse004
 * @tc.desc  : Call function SetNotificationFilterResponse.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetNotificationFilterResponse004, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    g_setNotificationFilterResponseFlag = false;
    int32_t ret = g_rilInterface->SetNotificationFilter(
        SLOTID_2, -1, static_cast<int32_t>(NotificationFilter::NOTIFICATION_FILTER_NONE));
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
    EXPECT_EQ(false, g_setNotificationFilterResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetDeviceStateResponse_0100
 * @tc.name  : testV1SetDeviceStateResponse001
 * @tc.desc  : Call function SetDeviceStateResponse slotId is SLOTID_1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetDeviceStateResponse001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    g_setDeviceStateResponseFlag = false;
    int32_t ret = g_rilInterface->SetDeviceState(SLOTID_1, GetSerialId(),
                                                 static_cast<int32_t>(DeviceStateType::LOW_DATA_STATE), 1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_setDeviceStateResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetDeviceStateResponse_0200
 * @tc.name  : testV1SetDeviceStateResponse002
 * @tc.desc  : Call function SetDeviceStateResponse slotId is SLOTID_2
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetDeviceStateResponse002, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    g_setDeviceStateResponseFlag = false;
    int32_t ret = g_rilInterface->SetDeviceState(SLOTID_2, GetSerialId(),
                                                 static_cast<int32_t>(DeviceStateType::LOW_DATA_STATE), 1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_setDeviceStateResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetDeviceStateResponse_0300
 * @tc.name  : testV1SetDeviceStateResponse003
 * @tc.desc  : Call function SetDeviceStateResponse slotId is SLOTID_1 SerialId is -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetDeviceStateResponse003, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    g_setDeviceStateResponseFlag = false;
    int32_t ret =
        g_rilInterface->SetDeviceState(SLOTID_1, -1, static_cast<int32_t>(DeviceStateType::LOW_DATA_STATE), 1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
    EXPECT_EQ(false, g_setDeviceStateResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetDeviceStateResponse_0400
 * @tc.name  : testV1SetDeviceStateResponse004
 * @tc.desc  : Call function SetDeviceStateResponse slotId is SLOTID_2 SerialId is -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetDeviceStateResponse004, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    g_setDeviceStateResponseFlag = false;
    int32_t ret =
        g_rilInterface->SetDeviceState(SLOTID_2, -1, static_cast<int32_t>(DeviceStateType::LOW_DATA_STATE), 1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
    EXPECT_EQ(false, g_setDeviceStateResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SendGsmSmsResponse_0100
 * @tc.name  : testV1SendGsmSmsResponse001
 * @tc.desc  : Call function SendGsmSmsResponse slotId is SLOTID_1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendGsmSmsResponse001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    g_sendGsmSmsResponseFlag = false;
    GsmSmsMessageInfo msg;
    msg.smscPdu = "+-*%";
    msg.pdu = TEST_SEND_PDU;
    int32_t ret = g_rilInterface->SendGsmSms(SLOTID_1, GetSerialId(), msg);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_sendGsmSmsResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SendGsmSmsResponse_0200
 * @tc.name  : testV1SendGsmSmsResponse002
 * @tc.desc  : Call function SendGsmSmsResponse slotId is SLOTID_2
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendGsmSmsResponse002, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    g_sendGsmSmsResponseFlag = false;
    GsmSmsMessageInfo msg;
    msg.smscPdu = "+-*%";
    msg.pdu = TEST_SEND_PDU;
    int32_t ret = g_rilInterface->SendGsmSms(SLOTID_2, GetSerialId(), msg);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_sendGsmSmsResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SendGsmSmsResponse_0300
 * @tc.name  : testV1SendGsmSmsResponse003
 * @tc.desc  : Call function SendGsmSmsResponse slotId is SLOTID_1 SerialId is -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendGsmSmsResponse003, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    g_sendGsmSmsResponseFlag = false;
    GsmSmsMessageInfo msg;
    msg.smscPdu = "";
    msg.pdu = TEST_SEND_PDU;
    int32_t ret = g_rilInterface->SendGsmSms(SLOTID_1, -1, msg);
    EXPECT_NE(SUCCESS, ret);
    EXPECT_EQ(false, g_sendGsmSmsResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SendGsmSmsResponse_0400
 * @tc.name  : testV1SendGsmSmsResponse004
 * @tc.desc  : Call function SendGsmSmsResponse slotId is SLOTID_2 SerialId is -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendGsmSmsResponse004, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    g_sendGsmSmsResponseFlag = false;
    GsmSmsMessageInfo msg;
    msg.smscPdu = "";
    msg.pdu = TEST_SEND_PDU;
    int32_t ret = g_rilInterface->SendGsmSms(SLOTID_2, -1, msg);
    EXPECT_NE(SUCCESS, ret);
    EXPECT_EQ(false, g_sendGsmSmsResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SendCdmaSmsResponse_0100
 * @tc.name  : testV1SendCdmaSmsResponse001
 * @tc.desc  : Call function SendCdmaSmsResponse slotId is SLOTID_1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendCdmaSmsResponse001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    g_sendCdmaSmsResponseFlag = false;
    SendCdmaSmsMessageInfo msg;
    msg.serial = 2;
    msg.smscPdu = TEST_CDMA_PDU;
    int32_t ret = g_rilInterface->SendCdmaSms(SLOTID_1, GetSerialId(), msg);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_sendCdmaSmsResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SendCdmaSmsResponse_0200
 * @tc.name  : testV1SendCdmaSmsResponse002
 * @tc.desc  : Call function SendCdmaSmsResponse slotId is SLOTID_1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendCdmaSmsResponse002, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    g_sendCdmaSmsResponseFlag = false;
    SendCdmaSmsMessageInfo msg;
    msg.serial = 2;
    msg.smscPdu = TEST_CDMA_PDU;
    int32_t ret = g_rilInterface->SendCdmaSms(SLOTID_2, GetSerialId(), msg);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_sendCdmaSmsResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SendCdmaSmsResponse_0300
 * @tc.name  : testV1SendCdmaSmsResponse003
 * @tc.desc  : Call function SendCdmaSmsResponse slotId is SLOTID_1 SerialId is -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendCdmaSmsResponse003, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    g_sendCdmaSmsResponseFlag = false;
    SendCdmaSmsMessageInfo msg;
    msg.smscPdu = "";
    int32_t ret = g_rilInterface->SendCdmaSms(SLOTID_1, -1, msg);
    EXPECT_NE(SUCCESS, ret);
    EXPECT_EQ(false, g_sendCdmaSmsResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SendCdmaSmsResponse_0400
 * @tc.name  : testV1SendCdmaSmsResponse004
 * @tc.desc  : Call function SendCdmaSmsResponse slotId is SLOTID_2 SerialId is -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendCdmaSmsResponse004, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    g_sendCdmaSmsResponseFlag = false;
    SendCdmaSmsMessageInfo msg;
    msg.smscPdu = "";
    int32_t ret = g_rilInterface->SendCdmaSms(SLOTID_2, -1, msg);
    EXPECT_NE(SUCCESS, ret);
    EXPECT_EQ(false, g_sendCdmaSmsResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1AddSimMessageResponse_0100
 * @tc.name  : testV1AddSimMessageResponse001
 * @tc.desc  : Call function AddSimMessageResponse slotId is SLOTID_1 SerialId is 100
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1AddSimMessageResponse001, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    g_addSimMessageResponseFlag = false;
    SmsMessageIOInfo msgIoInfo;
    msgIoInfo.smscPdu = TEST_SMSC_PDU;
    msgIoInfo.pdu = "!&#";
    msgIoInfo.state = static_cast<int32_t>(SimMessageStatus::SIM_MESSAGE_STATUS_SENT);
    msgIoInfo.index = 100;
    int32_t ret = g_rilInterface->AddSimMessage(SLOTID_1, 100, msgIoInfo);
    EXPECT_NE(SUCCESS, ret);
    EXPECT_EQ(false, g_addSimMessageResponseFlag);

    int32_t ret1 = g_rilInterface->DelSimMessage(SLOTID_1, 100, msgIoInfo.index);
    EXPECT_NE(SUCCESS, ret1);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1AddSimMessageResponse_0200
 * @tc.name  : testV1AddSimMessageResponse002
 * @tc.desc  : Call function AddSimMessageResponse slotId is SLOTID_2 SerialId is 100
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1AddSimMessageResponse002, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    g_addSimMessageResponseFlag = false;
    SmsMessageIOInfo msgIoInfo;
    msgIoInfo.smscPdu = TEST_SMSC_PDU;
    msgIoInfo.pdu = "";
    msgIoInfo.state = static_cast<int32_t>(SimMessageStatus::SIM_MESSAGE_STATUS_SENT);
    msgIoInfo.index = 100;
    int32_t ret = g_rilInterface->AddSimMessage(SLOTID_2, 100, msgIoInfo);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_addSimMessageResponseFlag);

    int32_t ret1 = g_rilInterface->DelSimMessage(SLOTID_2, 100, msgIoInfo.index);
    EXPECT_EQ(SUCCESS, ret1);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1AddSimMessageResponse_0300
 * @tc.name  : testV1AddSimMessageResponse003
 * @tc.desc  : Call function AddSimMessageResponse slotId is SLOTID_1 SerialId is 1-
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1AddSimMessageResponse003, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    g_addSimMessageResponseFlag = false;
    SmsMessageIOInfo msgIoInfo;
    msgIoInfo.smscPdu = TEST_SMSC_PDU;
    msgIoInfo.pdu = TEST_STORAGE_PDU;
    msgIoInfo.state = static_cast<int32_t>(SimMessageStatus::SIM_MESSAGE_STATUS_SENT);
    msgIoInfo.index = -1;
    int32_t ret = g_rilInterface->AddSimMessage(SLOTID_1, -1, msgIoInfo);
    EXPECT_NE(SUCCESS, ret);
    EXPECT_EQ(false, g_addSimMessageResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1AddSimMessageResponse_0400
 * @tc.name  : testV1AddSimMessageResponse004
 * @tc.desc  : Call function AddSimMessageResponse slotId is SLOTID_2 SerialId is -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1AddSimMessageResponse004, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    g_addSimMessageResponseFlag = false;
    SmsMessageIOInfo msgIoInfo;
    msgIoInfo.smscPdu = "";
    msgIoInfo.pdu = TEST_STORAGE_PDU;
    msgIoInfo.state = static_cast<int32_t>(SimMessageStatus::SIM_MESSAGE_STATUS_SENT);
    msgIoInfo.index = 100;
    int32_t ret = g_rilInterface->AddSimMessage(SLOTID_2, -1, msgIoInfo);
    EXPECT_NE(SUCCESS, ret);
    EXPECT_EQ(false, g_addSimMessageResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1DelSimMessageResponse_0100
 * @tc.name  : testV1DelSimMessageResponse001
 * @tc.desc  : Call function DelSimMessageResponse slotId is SLOTID_1 SerialId is 100
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1DelSimMessageResponse001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    g_delSimMessageResponseFlag = false;
    SmsMessageIOInfo msgIoInfo;
    msgIoInfo.smscPdu = "!&#";
    msgIoInfo.pdu = TEST_STORAGE_PDU;
    msgIoInfo.state = static_cast<int32_t>(SimMessageStatus::SIM_MESSAGE_STATUS_SENT);
    msgIoInfo.index = 100;
    int32_t ret = g_rilInterface->AddSimMessage(SLOTID_1, 100, msgIoInfo);
    EXPECT_EQ(SUCCESS, ret);

    int32_t ret1 = g_rilInterface->DelSimMessage(SLOTID_1, 100, msgIoInfo.index);
    EXPECT_EQ(SUCCESS, ret1);
    EXPECT_EQ(true, g_delSimMessageResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1DelSimMessageResponse_0200
 * @tc.name  : testV1DelSimMessageResponse002
 * @tc.desc  : Call function DelSimMessageResponse slotId is SLOTID_2 SerialId is 100
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1DelSimMessageResponse002, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    g_delSimMessageResponseFlag = false;
    SmsMessageIOInfo msgIoInfo;
    msgIoInfo.smscPdu = TEST_SMSC_PDU;
    msgIoInfo.pdu = "";
    msgIoInfo.state = static_cast<int32_t>(SimMessageStatus::SIM_MESSAGE_STATUS_SENT);
    msgIoInfo.index = 100;
    int32_t ret = g_rilInterface->AddSimMessage(SLOTID_2, 100, msgIoInfo);
    EXPECT_EQ(SUCCESS, ret);

    int32_t ret1 = g_rilInterface->DelSimMessage(SLOTID_2, 100, msgIoInfo.index);
    EXPECT_EQ(SUCCESS, ret1);
    EXPECT_EQ(true, g_delSimMessageResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1DelSimMessageResponse_0300
 * @tc.name  : testV1DelSimMessageResponse003
 * @tc.desc  : Call function DelSimMessageResponse slotId is SLOTID_1 SerialId is -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1DelSimMessageResponse003, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    g_delSimMessageResponseFlag = false;
    SmsMessageIOInfo msgIoInfo;
    msgIoInfo.smscPdu = TEST_SMSC_PDU;
    msgIoInfo.pdu = TEST_STORAGE_PDU;
    msgIoInfo.state = static_cast<int32_t>(SimMessageStatus::SIM_MESSAGE_STATUS_SENT);
    msgIoInfo.index = -1;
    int32_t ret = g_rilInterface->AddSimMessage(SLOTID_1, -1, msgIoInfo);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1DelSimMessageResponse_0400
 * @tc.name  : testV1DelSimMessageResponse004
 * @tc.desc  : Call function DelSimMessageResponse slotId is SLOTID_2 SerialId is -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1DelSimMessageResponse004, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    g_delSimMessageResponseFlag = false;
    SmsMessageIOInfo msgIoInfo;
    msgIoInfo.smscPdu = "";
    msgIoInfo.pdu = TEST_STORAGE_PDU;
    msgIoInfo.state = static_cast<int32_t>(SimMessageStatus::SIM_MESSAGE_STATUS_SENT);
    msgIoInfo.index = 100;
    int32_t ret = g_rilInterface->AddSimMessage(SLOTID_2, -1, msgIoInfo);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1UpdateSimMessageResponse_0100
 * @tc.name  : testV1UpdateSimMessageResponse001
 * @tc.desc  : Call function UpdateSimMessageResponse slotId is SLOTID_1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1UpdateSimMessageResponse001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    g_updateSimMessageResponseFlag = false;
    SmsMessageIOInfo msgIoInfo;
    msgIoInfo.smscPdu = TEST_CDMA_PDU;
    msgIoInfo.pdu = TEST_STORAGE_PDU;
    msgIoInfo.state = static_cast<int32_t>(SimMessageStatus::SIM_MESSAGE_STATUS_SENT);
    msgIoInfo.index = 0;
    int32_t ret = g_rilInterface->UpdateSimMessage(SLOTID_1, GetSerialId(), msgIoInfo);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_updateSimMessageResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1UpdateSimMessageResponse_0200
 * @tc.name  : testV1UpdateSimMessageResponse002
 * @tc.desc  : Call function UpdateSimMessageResponse slotId is SLOTID_2
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1UpdateSimMessageResponse002, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    g_updateSimMessageResponseFlag = false;
    SmsMessageIOInfo msgIoInfo;
    msgIoInfo.smscPdu = TEST_CDMA_PDU;
    msgIoInfo.pdu = TEST_STORAGE_PDU;
    msgIoInfo.state = static_cast<int32_t>(SimMessageStatus::SIM_MESSAGE_STATUS_SENT);
    msgIoInfo.index = 0;
    int32_t ret = g_rilInterface->UpdateSimMessage(SLOTID_2, GetSerialId(), msgIoInfo);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_updateSimMessageResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1UpdateSimMessageResponse_0300
 * @tc.name  : testV1UpdateSimMessageResponse003
 * @tc.desc  : Call function UpdateSimMessageResponse slotId is SLOTID_1 SerialId is -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1UpdateSimMessageResponse003, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    g_updateSimMessageResponseFlag = false;
    SmsMessageIOInfo msgIoInfo;
    msgIoInfo.smscPdu = "";
    msgIoInfo.pdu = TEST_STORAGE_PDU;
    msgIoInfo.state = static_cast<int32_t>(SimMessageStatus::SIM_MESSAGE_STATUS_SENT);
    msgIoInfo.index = 0;
    int32_t ret = g_rilInterface->UpdateSimMessage(SLOTID_1, -1, msgIoInfo);
    EXPECT_NE(SUCCESS, ret);
    EXPECT_EQ(false, g_updateSimMessageResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1UpdateSimMessageResponse_0400
 * @tc.name  : testV1UpdateSimMessageResponse004
 * @tc.desc  : Call function UpdateSimMessageResponse slotId is SLOTID2 SerialId is -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1UpdateSimMessageResponse004, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    g_updateSimMessageResponseFlag = false;
    SmsMessageIOInfo msgIoInfo;
    msgIoInfo.smscPdu = "";
    msgIoInfo.pdu = TEST_STORAGE_PDU;
    msgIoInfo.state = static_cast<int32_t>(SimMessageStatus::SIM_MESSAGE_STATUS_SENT);
    msgIoInfo.index = 0;
    int32_t ret = g_rilInterface->UpdateSimMessage(SLOTID_2, -1, msgIoInfo);
    EXPECT_NE(SUCCESS, ret);
    EXPECT_EQ(false, g_updateSimMessageResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1AddCdmaSimMessageResponse_0100
 * @tc.name  : testV1AddCdmaSimMessageResponse001
 * @tc.desc  : Call function AddCdmaSimMessageResponse slotId is SLOTID_1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1AddCdmaSimMessageResponse001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    g_addCdmaSimMessageResponseFlag = false;
    SmsMessageIOInfo msgIoInfo;
    msgIoInfo.smscPdu = TEST_CDMA_PDU;
    msgIoInfo.pdu = TEST_STORAGE_PDU;
    msgIoInfo.state = static_cast<int32_t>(SimMessageStatus::SIM_MESSAGE_STATUS_SENT);
    msgIoInfo.index = 0;
    int32_t ret = g_rilInterface->AddCdmaSimMessage(SLOTID_1, GetSerialId(), msgIoInfo);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_addCdmaSimMessageResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1AddCdmaSimMessageResponse_0200
 * @tc.name  : testV1AddCdmaSimMessageResponse002
 * @tc.desc  : Call function AddCdmaSimMessageResponse slotId is SLOTID_2
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1AddCdmaSimMessageResponse002, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    g_addCdmaSimMessageResponseFlag = false;
    SmsMessageIOInfo msgIoInfo;
    msgIoInfo.smscPdu = TEST_CDMA_PDU;
    msgIoInfo.pdu = TEST_STORAGE_PDU;
    msgIoInfo.state = static_cast<int32_t>(SimMessageStatus::SIM_MESSAGE_STATUS_SENT);
    msgIoInfo.index = 0;
    int32_t ret = g_rilInterface->AddCdmaSimMessage(SLOTID_2, GetSerialId(), msgIoInfo);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_addCdmaSimMessageResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1AddCdmaSimMessageResponse_0300
 * @tc.name  : testV1AddCdmaSimMessageResponse003
 * @tc.desc  : Call function AddCdmaSimMessageResponse slotId is SLOTID_1 SerialId is -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1AddCdmaSimMessageResponse003, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    g_addCdmaSimMessageResponseFlag = false;
    SmsMessageIOInfo msgIoInfo;
    msgIoInfo.smscPdu = TEST_CDMA_PDU;
    msgIoInfo.pdu = TEST_STORAGE_PDU;
    msgIoInfo.state = static_cast<int32_t>(SimMessageStatus::SIM_MESSAGE_STATUS_SENT);
    msgIoInfo.index = 0;
    int32_t ret = g_rilInterface->AddCdmaSimMessage(SLOTID_1, -1, msgIoInfo);
    EXPECT_NE(SUCCESS, ret);
    EXPECT_EQ(false, g_addCdmaSimMessageResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1AddCdmaSimMessageResponse_0400
 * @tc.name  : testV1AddCdmaSimMessageResponse004
 * @tc.desc  : Call function AddCdmaSimMessageResponse slotId is SLOTID_2 SerialId is -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1AddCdmaSimMessageResponse004, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    g_addCdmaSimMessageResponseFlag = false;
    SmsMessageIOInfo msgIoInfo;
    msgIoInfo.smscPdu = TEST_CDMA_PDU;
    msgIoInfo.pdu = TEST_STORAGE_PDU;
    msgIoInfo.state = static_cast<int32_t>(SimMessageStatus::SIM_MESSAGE_STATUS_SENT);
    msgIoInfo.index = 0;
    int32_t ret = g_rilInterface->AddCdmaSimMessage(SLOTID_2, -1, msgIoInfo);
    EXPECT_NE(SUCCESS, ret);
    EXPECT_EQ(false, g_addCdmaSimMessageResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1DelCdmaSimMessageResponse_0100
 * @tc.name  : testV1DelCdmaSimMessageResponse001
 * @tc.desc  : Call function DelCdmaSimMessageResponse slotId is SLOTID_1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1DelCdmaSimMessageResponse001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    g_delCdmaSimMessageResponseFlag = false;
    int32_t index = 255;
    int32_t ret = g_rilInterface->DelCdmaSimMessage(SLOTID_1, GetSerialId(), index);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_delCdmaSimMessageResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1DelCdmaSimMessageResponse_0200
 * @tc.name  : testV1DelCdmaSimMessageResponse002
 * @tc.desc  : Call function DelCdmaSimMessageResponse slotId is SLOTID_2
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1DelCdmaSimMessageResponse002, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    g_delCdmaSimMessageResponseFlag = false;
    int32_t index = 255;
    int32_t ret = g_rilInterface->DelCdmaSimMessage(SLOTID_2, GetSerialId(), index);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_delCdmaSimMessageResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1DelCdmaSimMessageResponse_0300
 * @tc.name  : testV1DelCdmaSimMessageResponse003
 * @tc.desc  : Call function DelCdmaSimMessageResponse slotId is SLOTID_1 SerialId is -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1DelCdmaSimMessageResponse003, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    g_delCdmaSimMessageResponseFlag = false;
    int32_t index = -1;
    int32_t ret = g_rilInterface->DelCdmaSimMessage(SLOTID_1, -1, index);
    EXPECT_NE(SUCCESS, ret);
    EXPECT_EQ(false, g_delCdmaSimMessageResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1DelCdmaSimMessageResponse_0400
 * @tc.name  : testV1DelCdmaSimMessageResponse004
 * @tc.desc  : Call function DelCdmaSimMessageResponse slotId is SLOTID_2 SerialId is -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1DelCdmaSimMessageResponse004, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    g_delCdmaSimMessageResponseFlag = false;
    int32_t index = -1;
    int32_t ret = g_rilInterface->DelCdmaSimMessage(SLOTID_2, -1, index);
    EXPECT_NE(SUCCESS, ret);
    EXPECT_EQ(false, g_delCdmaSimMessageResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetSignalStrengthResponse_0100
 * @tc.name  : testV1GetSignalStrengthResponse001
 * @tc.desc  : Call function GetSignalStrengthResponse slotId is SLOTID_1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetSignalStrengthResponse001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    g_getSignalStrengthResponseFlag = false;
    int32_t ret = g_rilInterface->GetSignalStrength(SLOTID_1, 1000000001);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_getSignalStrengthResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetSignalStrengthResponse_0200
 * @tc.name  : testV1GetSignalStrengthResponse002
 * @tc.desc  : Call function GetSignalStrengthResponse slotId is SLOTID_2
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetSignalStrengthResponse002, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    g_getSignalStrengthResponseFlag = false;
    int32_t ret = g_rilInterface->GetSignalStrength(SLOTID_2, 1000000001);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_getSignalStrengthResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetSignalStrengthResponse_0300
 * @tc.name  : testV1GetSignalStrengthResponse003
 * @tc.desc  : Call function GetSignalStrengthResponse slotId is SLOTID_1 SerialId is -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetSignalStrengthResponse003, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    g_getSignalStrengthResponseFlag = false;
    int32_t ret = g_rilInterface->GetSignalStrength(SLOTID_1, -1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
    EXPECT_EQ(false, g_getSignalStrengthResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetSignalStrengthResponse_0400
 * @tc.name  : testV1GetSignalStrengthResponse004
 * @tc.desc  : Call function GetSignalStrengthResponse slotId is SLOTID_2 SerialId is -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetSignalStrengthResponse004, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    g_getSignalStrengthResponseFlag = false;
    int32_t ret = g_rilInterface->GetSignalStrength(SLOTID_2, -1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
    EXPECT_EQ(false, g_getSignalStrengthResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetCsRegStatusResponse_0100
 * @tc.name  : testV1GetCsRegStatusResponse001
 * @tc.desc  : Call function GetCsRegStatusResponse slotId is SLOTID_1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetCsRegStatusResponse001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    g_getCsRegStatusResponseFlag = false;
    int32_t ret = g_rilInterface->GetSignalStrength(SLOTID_1, 1000000001);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_getCsRegStatusResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetCsRegStatusResponse_0200
 * @tc.name  : testV1GetCsRegStatusResponse002
 * @tc.desc  : Call function GetCsRegStatusResponse slotId is SLOTID_2
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetCsRegStatusResponse002, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    g_getCsRegStatusResponseFlag = false;
    int32_t ret = g_rilInterface->GetSignalStrength(SLOTID_2, 1000000001);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_getCsRegStatusResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetCsRegStatusResponse_0300
 * @tc.name  : testV1GetCsRegStatusResponse003
 * @tc.desc  : Call function GetCsRegStatusResponse slotId is SLOTID_1 SerialId is -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetCsRegStatusResponse003, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    g_getCsRegStatusResponseFlag = false;
    int32_t ret = g_rilInterface->GetSignalStrength(SLOTID_1, -1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
    EXPECT_EQ(false, g_getCsRegStatusResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetCsRegStatusResponse_0400
 * @tc.name  : testV1GetCsRegStatusResponse004
 * @tc.desc  : Call function GetCsRegStatusResponse slotId is SLOTID_2 SerialId is -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetCsRegStatusResponse004, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    g_getCsRegStatusResponseFlag = false;
    int32_t ret = g_rilInterface->GetSignalStrength(SLOTID_2, -1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
    EXPECT_EQ(false, g_getCsRegStatusResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetPsRegStatusResponse_0100
 * @tc.name  : testV1GetPsRegStatusResponse001
 * @tc.desc  : Call function GetPsRegStatusResponse slotId is SLOTID_1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetPsRegStatusResponse001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    g_getPsRegStatusResponseFlag = false;
    int32_t ret = g_rilInterface->GetPsRegStatus(SLOTID_1, 1000000001);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_getPsRegStatusResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetPsRegStatusResponse_0200
 * @tc.name  : testV1GetPsRegStatusResponse002
 * @tc.desc  : Call function GetPsRegStatusResponse slotId is SLOTID_2
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetPsRegStatusResponse002, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    g_getPsRegStatusResponseFlag = false;
    int32_t ret = g_rilInterface->GetPsRegStatus(SLOTID_2, 1000000001);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_getPsRegStatusResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetPsRegStatusResponse_0300
 * @tc.name  : testV1GetPsRegStatusResponse003
 * @tc.desc  : Call function GetPsRegStatusResponse slotId is SLOTID_1 SerialId is -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetPsRegStatusResponse003, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    g_getPsRegStatusResponseFlag = false;
    int32_t ret = g_rilInterface->GetPsRegStatus(SLOTID_1, -1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
    EXPECT_EQ(false, g_getPsRegStatusResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetPsRegStatusResponse_0400
 * @tc.name  : testV1GetPsRegStatusResponse004
 * @tc.desc  : Call function GetPsRegStatusResponse slotId is SLOTID_2 SerialId is -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetPsRegStatusResponse004, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    g_getPsRegStatusResponseFlag = false;
    int32_t ret = g_rilInterface->GetPsRegStatus(SLOTID_2, -1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
    EXPECT_EQ(false, g_getPsRegStatusResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetOperatorInfoResponse_0100
 * @tc.name  : testV1GetOperatorInfoResponse001
 * @tc.desc  : Call function GetOperatorInfoResponse slotId is SLOTID_1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetOperatorInfoResponse001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    g_getOperatorInfoResponseFlag = false;
    int32_t ret = g_rilInterface->GetOperatorInfo(SLOTID_1, 1000000001);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_getOperatorInfoResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetOperatorInfoResponse_0200
 * @tc.name  : testV1GetOperatorInfoResponse002
 * @tc.desc  : Call function GetOperatorInfoResponse slotId is SLOTID_2
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetOperatorInfoResponse002, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    g_getOperatorInfoResponseFlag = false;
    int32_t ret = g_rilInterface->GetOperatorInfo(SLOTID_2, 1000000001);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_getOperatorInfoResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetOperatorInfoResponse_0300
 * @tc.name  : testV1GetOperatorInfoResponse003
 * @tc.desc  : Call function GetOperatorInfoResponse slotId is SLOTID_1 SerialId is -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetOperatorInfoResponse003, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    g_getOperatorInfoResponseFlag = false;
    int32_t ret = g_rilInterface->GetOperatorInfo(SLOTID_1, -1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
    EXPECT_EQ(false, g_getOperatorInfoResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetOperatorInfoResponse_0400
 * @tc.name  : testV1GetOperatorInfoResponse004
 * @tc.desc  : Call function GetOperatorInfoResponse slotId is SLOTID_2 SerialId is -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetOperatorInfoResponse004, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    g_getOperatorInfoResponseFlag = false;
    int32_t ret = g_rilInterface->GetOperatorInfo(SLOTID_2, -1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
    EXPECT_EQ(false, g_getOperatorInfoResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetNetworkSearchInformationResponse_0100
 * @tc.name  : testV1GetNetworkSearchInformationResponse001
 * @tc.desc  : Call function GetNetworkSearchInformationResponse slotId is SLOTID_1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetNetworkSearchInformationResponse001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    g_getNetworkSearchInformationResponseFlag = false;
    int32_t ret = g_rilInterface->GetNetworkSearchInformation(SLOTID_1, GetSerialId());
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_getNetworkSearchInformationResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetNetworkSearchInformationResponse_0200
 * @tc.name  : testV1GetNetworkSearchInformationResponse002
 * @tc.desc  : Call function GetNetworkSearchInformationResponse slotId is SLOTID_2
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetNetworkSearchInformationResponse002, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    g_getNetworkSearchInformationResponseFlag = false;
    int32_t ret = g_rilInterface->GetNetworkSearchInformation(SLOTID_2, GetSerialId());
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_getNetworkSearchInformationResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetNetworkSearchInformationResponse_0300
 * @tc.name  : testV1GetNetworkSearchInformationResponse003
 * @tc.desc  : Call function GetNetworkSearchInformationResponse slotId is SLOTID_1 SerialId is -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetNetworkSearchInformationResponse003, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    g_getNetworkSearchInformationResponseFlag = false;
    int32_t ret = g_rilInterface->GetNetworkSearchInformation(SLOTID_1, -1);
    EXPECT_NE(SUCCESS, ret);
    EXPECT_EQ(false, g_getNetworkSearchInformationResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetNetworkSearchInformationResponse_0400
 * @tc.name  : testV1GetNetworkSearchInformationResponse004
 * @tc.desc  : Call function GetNetworkSearchInformationResponse slotId is SLOTID_2 SerialId is -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetNetworkSearchInformationResponse004, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    g_getNetworkSearchInformationResponseFlag = false;
    int32_t ret = g_rilInterface->GetNetworkSearchInformation(SLOTID_2, -1);
    EXPECT_NE(SUCCESS, ret);
    EXPECT_EQ(false, g_getNetworkSearchInformationResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetNetworkSelectionModeResponse_0100
 * @tc.name  : testV1GetNetworkSelectionModeResponse001
 * @tc.desc  : Call function GetNetworkSelectionModeResponse slotId is SLOTID_1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetNetworkSelectionModeResponse001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    g_getNetworkSelectionModeResponseFlag = false;
    int32_t ret = g_rilInterface->GetNetworkSelectionMode(SLOTID_1, GetSerialId());
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_getNetworkSelectionModeResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetNetworkSelectionModeResponse_0200
 * @tc.name  : testV1GetNetworkSelectionModeResponse002
 * @tc.desc  : Call function GetNetworkSelectionModeResponse slotId is SLOTID_2
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetNetworkSelectionModeResponse002, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    g_getNetworkSelectionModeResponseFlag = false;
    int32_t ret = g_rilInterface->GetNetworkSelectionMode(SLOTID_2, GetSerialId());
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_getNetworkSelectionModeResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetNetworkSelectionModeResponse_0300
 * @tc.name  : testV1GetNetworkSelectionModeResponse003
 * @tc.desc  : Call function GetNetworkSelectionModeResponse slotId is SLOTID_1 SerialId is -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetNetworkSelectionModeResponse003, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    g_getNetworkSelectionModeResponseFlag = false;
    int32_t ret = g_rilInterface->GetNetworkSelectionMode(SLOTID_1, -1);
    EXPECT_NE(SUCCESS, ret);
    EXPECT_EQ(false, g_getNetworkSelectionModeResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetNetworkSelectionModeResponse_0400
 * @tc.name  : testV1GetNetworkSelectionModeResponse004
 * @tc.desc  : Call function GetNetworkSelectionModeResponse slotId is SLOTID_2 SerialId is -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetNetworkSelectionModeResponse004, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    g_getNetworkSelectionModeResponseFlag = false;
    int32_t ret = g_rilInterface->GetNetworkSelectionMode(SLOTID_2, -1);
    EXPECT_NE(SUCCESS, ret);
    EXPECT_EQ(false, g_getNetworkSelectionModeResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetNeighboringCellInfoListResponse_0100
 * @tc.name  : testV1GetNeighboringCellInfoListResponse001
 * @tc.desc  : Call function GetNeighboringCellInfoListResponse slotId is SLOTID_1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetNeighboringCellInfoListResponse001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    g_getNeighboringCellInfoListResponseFlag = false;
    int32_t ret = g_rilInterface->GetNeighboringCellInfoList(SLOTID_1, GetSerialId());
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_getNeighboringCellInfoListResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetNeighboringCellInfoListResponse_0200
 * @tc.name  : testV1GetNeighboringCellInfoListResponse002
 * @tc.desc  : Call function GetNeighboringCellInfoListResponse slotId is SLOTID_2
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetNeighboringCellInfoListResponse002, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    g_getNeighboringCellInfoListResponseFlag = false;
    int32_t ret = g_rilInterface->GetNeighboringCellInfoList(SLOTID_2, GetSerialId());
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_getNeighboringCellInfoListResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetNeighboringCellInfoListResponse_0300
 * @tc.name  : testV1GetNeighboringCellInfoListResponse003
 * @tc.desc  : Call function GetNeighboringCellInfoListResponse slotId is SLOTID_1 SerialId is -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetNeighboringCellInfoListResponse003, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    g_getNeighboringCellInfoListResponseFlag = false;
    int32_t ret = g_rilInterface->GetNeighboringCellInfoList(SLOTID_1, -1);
    EXPECT_NE(SUCCESS, ret);
    EXPECT_EQ(false, g_getNeighboringCellInfoListResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetNeighboringCellInfoListResponse_0400
 * @tc.name  : testV1GetNeighboringCellInfoListResponse004
 * @tc.desc  : Call function GetNeighboringCellInfoListResponse slotId is SLOTID_2 SerialId is -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetNeighboringCellInfoListResponse004, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    g_getNeighboringCellInfoListResponseFlag = false;
    int32_t ret = g_rilInterface->GetNeighboringCellInfoList(SLOTID_2, -1);
    EXPECT_NE(SUCCESS, ret);
    EXPECT_EQ(false, g_getNeighboringCellInfoListResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetCurrentCellInfoResponse_0100
 * @tc.name  : testV1GetCurrentCellInfoResponse001
 * @tc.desc  : Call function GetCurrentCellInfoResponse slotId is SLOTID_1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetCurrentCellInfoResponse001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    g_getCurrentCellInfoResponseFlag = false;
    int32_t ret = g_rilInterface->GetCurrentCellInfo(SLOTID_1, GetSerialId());
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_getCurrentCellInfoResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetCurrentCellInfoResponse_0200
 * @tc.name  : testV1GetCurrentCellInfoResponse002
 * @tc.desc  : Call function GetCurrentCellInfoResponse slotId is SLOTID_2
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetCurrentCellInfoResponse002, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    g_getCurrentCellInfoResponseFlag = false;
    int32_t ret = g_rilInterface->GetCurrentCellInfo(SLOTID_2, GetSerialId());
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_getCurrentCellInfoResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetCurrentCellInfoResponse_0300
 * @tc.name  : testV1GetCurrentCellInfoResponse003
 * @tc.desc  : Call function GetCurrentCellInfoResponse slotId is SLOTID_1 SerialId is -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetCurrentCellInfoResponse003, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    g_getCurrentCellInfoResponseFlag = false;
    int32_t ret = g_rilInterface->GetCurrentCellInfo(SLOTID_1, -1);
    EXPECT_NE(SUCCESS, ret);
    EXPECT_EQ(false, g_getCurrentCellInfoResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetCurrentCellInfoResponse_0400
 * @tc.name  : testV1GetCurrentCellInfoResponse004
 * @tc.desc  : Call function GetCurrentCellInfoResponse slotId is SLOTID_2 SerialId is -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetCurrentCellInfoResponse004, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    g_getCurrentCellInfoResponseFlag = false;
    int32_t ret = g_rilInterface->GetCurrentCellInfo(SLOTID_2, -1);
    EXPECT_NE(SUCCESS, ret);
    EXPECT_EQ(false, g_getCurrentCellInfoResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetCurrentCellInfoResponse_1_1_0100
 * @tc.name  : testV1GetCurrentCellInfoResponse_1_1001
 * @tc.desc  : Call function GetCurrentCellInfoResponse_1_1 slotId is SLOTID_1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetCurrentCellInfoResponse_1_1001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    g_getCurrentCellInfoResponse_1_1Flag = false;
    int32_t ret = g_rilInterface->GetCurrentCellInfo(SLOTID_1, GetSerialId());
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_getCurrentCellInfoResponse_1_1Flag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetCurrentCellInfoResponse_1_1_0200
 * @tc.name  : testV1GetCurrentCellInfoResponse_1_1002
 * @tc.desc  : Call function GetCurrentCellInfoResponse_1_1 slotId is SLOTID_2
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetCurrentCellInfoResponse_1_1002, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    g_getCurrentCellInfoResponse_1_1Flag = false;
    int32_t ret = g_rilInterface->GetCurrentCellInfo(SLOTID_2, GetSerialId());
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_getCurrentCellInfoResponse_1_1Flag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetCurrentCellInfoResponse_1_1_0300
 * @tc.name  : testV1GetCurrentCellInfoResponse_1_1003
 * @tc.desc  : Call function GetCurrentCellInfoResponse_1_1 slotId is SLOTID_1 SerialId is -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetCurrentCellInfoResponse_1_1003, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    g_getCurrentCellInfoResponse_1_1Flag = false;
    int32_t ret = g_rilInterface->GetCurrentCellInfo(SLOTID_1, -1);
    EXPECT_NE(SUCCESS, ret);
    EXPECT_EQ(false, g_getCurrentCellInfoResponse_1_1Flag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetCurrentCellInfoResponse_1_1_0400
 * @tc.name  : testV1GetCurrentCellInfoResponse_1_1004
 * @tc.desc  : Call function GetCurrentCellInfoResponse_1_1 slotId is SLOTID_2 SerialId is -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetCurrentCellInfoResponse_1_1004, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    g_getCurrentCellInfoResponse_1_1Flag = false;
    int32_t ret = g_rilInterface->GetCurrentCellInfo(SLOTID_2, -1);
    EXPECT_NE(SUCCESS, ret);
    EXPECT_EQ(false, g_getCurrentCellInfoResponse_1_1Flag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetNetworkSelectionModeResponse_0100
 * @tc.name  : testV1SetNetworkSelectionModeResponse001
 * @tc.desc  : Call function SetNetworkSelectionModeResponse slotId is SLOTID_1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetNetworkSelectionModeResponse001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    g_setNetworkSelectionModeResponseFlag = false;
    SetNetworkModeInfo setNetworkModeInfo;
    setNetworkModeInfo.selectMode = static_cast<int32_t>(PreferredNetworkMode::CORE_NETWORK_MODE_AUTO);
    setNetworkModeInfo.oper = "46000";
    int32_t ret = g_rilInterface->SetNetworkSelectionMode(SLOTID_1, GetSerialId(), setNetworkModeInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_setNetworkSelectionModeResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetNetworkSelectionModeResponse_0200
 * @tc.name  : testV1SetNetworkSelectionModeResponse002
 * @tc.desc  : Call function SetNetworkSelectionModeResponse slotId is SLOTID_2
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetNetworkSelectionModeResponse002, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    g_setNetworkSelectionModeResponseFlag = false;
    SetNetworkModeInfo setNetworkModeInfo;
    setNetworkModeInfo.selectMode = static_cast<int32_t>(PreferredNetworkMode::CORE_NETWORK_MODE_AUTO);
    setNetworkModeInfo.oper = "46000";
    int32_t ret = g_rilInterface->SetNetworkSelectionMode(SLOTID_2, GetSerialId(), setNetworkModeInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_setNetworkSelectionModeResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetNetworkSelectionModeResponse_0300
 * @tc.name  : testV1SetNetworkSelectionModeResponse003
 * @tc.desc  : Call function SetNetworkSelectionModeResponse slotId is SLOTID_1 SerialId is -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetNetworkSelectionModeResponse003, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    g_setNetworkSelectionModeResponseFlag = false;
    SetNetworkModeInfo setNetworkModeInfo;
    setNetworkModeInfo.selectMode = static_cast<int32_t>(PreferredNetworkMode::CORE_NETWORK_MODE_AUTO);
    setNetworkModeInfo.oper = "46000";
    int32_t ret = g_rilInterface->SetNetworkSelectionMode(SLOTID_1, -1, setNetworkModeInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
    EXPECT_EQ(false, g_setNetworkSelectionModeResponseFlag);
}
/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetNetworkSelectionModeResponse_0400
 * @tc.name  : testV1SetNetworkSelectionModeResponse004
 * @tc.desc  : Call function SetNetworkSelectionModeResponse slotId is SLOTID_2 SerialId is -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetNetworkSelectionModeResponse004, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    g_setNetworkSelectionModeResponseFlag = false;
    SetNetworkModeInfo setNetworkModeInfo;
    setNetworkModeInfo.selectMode = static_cast<int32_t>(PreferredNetworkMode::CORE_NETWORK_MODE_AUTO);
    setNetworkModeInfo.oper = "46000";
    int32_t ret = g_rilInterface->SetNetworkSelectionMode(SLOTID_2, -1, setNetworkModeInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
    EXPECT_EQ(false, g_setNetworkSelectionModeResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1HangupResponse_0100
 * @tc.name  : testV1HangupResponse001
 * @tc.desc  : Call function HangupResponse slotId is SLOTID_1 callId is 1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1HangupResponse001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    g_hangupResponseFlag = false;
    int32_t ret = g_rilInterface->Hangup(SLOTID_1, GetSerialId(), 1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_hangupResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1HangupResponse_0200
 * @tc.name  : testV1HangupResponse002
 * @tc.desc  : Call function HangupResponse slotId is SLOTID_2 callId is 1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1HangupResponse002, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    g_hangupResponseFlag = false;
    int32_t ret = g_rilInterface->Hangup(SLOTID_2, GetSerialId(), 1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_hangupResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1HangupResponse_0300
 * @tc.name  : testV1HangupResponse003
 * @tc.desc  : Call function HangupResponse slotId is SLOTID_1 callId is -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1HangupResponse003, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    g_hangupResponseFlag = false;
    int32_t ret = g_rilInterface->Hangup(SLOTID_1, GetSerialId(), -1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
    EXPECT_EQ(false, g_hangupResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1HangupResponse_0400
 * @tc.name  : testV1HangupResponse004
 * @tc.desc  : Call function HangupResponse slotId is SLOTID_2 callId is -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1HangupResponse004, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    g_hangupResponseFlag = false;
    int32_t ret = g_rilInterface->Hangup(SLOTID_2, GetSerialId(), -1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
    EXPECT_EQ(false, g_hangupResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1RejectResponse_0100
 * @tc.name  : testV1RejectResponse001
 * @tc.desc  : Call function RejectResponse slotId is SLOTID_1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1RejectResponse001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    g_rejectResponseFlag = false;
    int32_t ret = g_rilInterface->Reject(SLOTID_1, GetSerialId());
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_rejectResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1RejectResponse_0200
 * @tc.name  : testV1RejectResponse002
 * @tc.desc  : Call function RejectResponse slotId is SLOTID_2
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1RejectResponse002, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    g_rejectResponseFlag = false;
    int32_t ret = g_rilInterface->Reject(SLOTID_2, GetSerialId());
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_rejectResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1RejectResponse_0300
 * @tc.name  : testV1RejectResponse003
 * @tc.desc  : Call function RejectResponse slotId is SLOTID_1 SerialId is -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1RejectResponse003, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    g_rejectResponseFlag = false;
    int32_t ret = g_rilInterface->Reject(SLOTID_1, -1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
    EXPECT_EQ(false, g_rejectResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1RejectResponse_0400
 * @tc.name  : testV1RejectResponse004
 * @tc.desc  : Call function RejectResponse slotId is SLOTID_2 SerialId is -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1RejectResponse004, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    g_rejectResponseFlag = false;
    int32_t ret = g_rilInterface->Reject(SLOTID_2, -1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
    EXPECT_EQ(false, g_rejectResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1AnswerResponse_0100
 * @tc.name  : testV1AnswerResponse001
 * @tc.desc  : Call function AnswerResponse slotId is SLOTID_1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1AnswerResponse001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    g_answerResponseFlag = false;
    int32_t ret = g_rilInterface->Answer(SLOTID_1, GetSerialId());
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_answerResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1AnswerResponse_0200
 * @tc.name  : testV1AnswerResponse002
 * @tc.desc  : Call function AnswerResponse slotId is SLOTID_2
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1AnswerResponse002, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    g_answerResponseFlag = false;
    int32_t ret = g_rilInterface->Answer(SLOTID_2, GetSerialId());
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_answerResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1AnswerResponse_0300
 * @tc.name  : testV1AnswerResponse003
 * @tc.desc  : Call function AnswerResponse slotId is SLOTID_1 SerialId is -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1AnswerResponse003, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    g_answerResponseFlag = false;
    int32_t ret = g_rilInterface->Answer(SLOTID_1, -1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
    EXPECT_EQ(false, g_answerResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1AnswerResponse_0400
 * @tc.name  : testV1AnswerResponse004
 * @tc.desc  : Call function AnswerResponse slotId is SLOTID_2 SerialId is -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1AnswerResponse004, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    g_answerResponseFlag = false;
    int32_t ret = g_rilInterface->Answer(SLOTID_2, -1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
    EXPECT_EQ(false, g_answerResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1HoldCallResponse_0100
 * @tc.name  : testV1HoldCallResponse001
 * @tc.desc  : Call function HoldCallResponse slotId is SLOTID_1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1HoldCallResponse001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    g_holdCallResponseFlag = false;
    int32_t ret = g_rilInterface->HoldCall(SLOTID_1, GetSerialId());
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_holdCallResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1HoldCallResponse_0200
 * @tc.name  : testV1HoldCallResponse002
 * @tc.desc  : Call function HoldCallResponse slotId is SLOTID_2
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1HoldCallResponse002, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    g_holdCallResponseFlag = false;
    int32_t ret = g_rilInterface->HoldCall(SLOTID_2, GetSerialId());
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_holdCallResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1HoldCallResponse_0300
 * @tc.name  : testV1HoldCallResponse003
 * @tc.desc  : Call function HoldCallResponse slotId is SLOTID_1 SerialId is -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1HoldCallResponse003, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    g_holdCallResponseFlag = false;
    int32_t ret = g_rilInterface->HoldCall(SLOTID_1, -1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
    EXPECT_EQ(false, g_holdCallResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1HoldCallResponse_0400
 * @tc.name  : testV1HoldCallResponse004
 * @tc.desc  : Call function HoldCallResponse slotId is SLOTID_2 SerialId is -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1HoldCallResponse004, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    g_holdCallResponseFlag = false;
    int32_t ret = g_rilInterface->HoldCall(SLOTID_2, -1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
    EXPECT_EQ(false, g_holdCallResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1UnHoldCallResponse_0100
 * @tc.name  : testV1UnHoldCallResponse001
 * @tc.desc  : Call function UnHoldCallResponse slotId is SLOTID_1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1UnHoldCallResponse001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    g_unHoldCallResponseFlag = false;
    int32_t ret = g_rilInterface->UnHoldCall(SLOTID_1, GetSerialId());
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_unHoldCallResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1UnHoldCallResponse_0200
 * @tc.name  : testV1UnHoldCallResponse002
 * @tc.desc  : Call function UnHoldCallResponse slotId is SLOTID_2
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1UnHoldCallResponse002, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    g_unHoldCallResponseFlag = false;
    int32_t ret = g_rilInterface->UnHoldCall(SLOTID_2, GetSerialId());
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_unHoldCallResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1UnHoldCallResponse_0300
 * @tc.name  : testV1UnHoldCallResponse003
 * @tc.desc  : Call function UnHoldCallResponse slotId is SLOTID_1 SerialId is -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1UnHoldCallResponse003, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    g_unHoldCallResponseFlag = false;
    int32_t ret = g_rilInterface->UnHoldCall(SLOTID_1, -1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
    EXPECT_EQ(false, g_unHoldCallResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1UnHoldCallResponse_0400
 * @tc.name  : testV1UnHoldCallResponse004
 * @tc.desc  : Call function UnHoldCallResponse slotId is SLOTID_2 SerialId is -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1UnHoldCallResponse004, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    g_unHoldCallResponseFlag = false;
    int32_t ret = g_rilInterface->UnHoldCall(SLOTID_2, -1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
    EXPECT_EQ(false, g_unHoldCallResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SwitchCallResponse_0100
 * @tc.name  : testV1SwitchCallResponse001
 * @tc.desc  : Call function SwitchCallResponse slotId is SLOTID_1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SwitchCallResponse001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    g_switchCallResponseFlag = false;
    int32_t ret = g_rilInterface->SwitchCall(SLOTID_1, GetSerialId());
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_switchCallResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SwitchCallResponse_0200
 * @tc.name  : testV1SwitchCallResponse002
 * @tc.desc  : Call function SwitchCallResponse slotId is SLOTID_2
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SwitchCallResponse002, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    g_switchCallResponseFlag = false;
    int32_t ret = g_rilInterface->SwitchCall(SLOTID_2, GetSerialId());
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_switchCallResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SwitchCallResponse_0300
 * @tc.name  : testV1SwitchCallResponse003
 * @tc.desc  : Call function SwitchCallResponse slotId is SLOTID_1 SerialId is -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SwitchCallResponse003, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    g_switchCallResponseFlag = false;
    int32_t ret = g_rilInterface->SwitchCall(SLOTID_1, -1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
    EXPECT_EQ(false, g_switchCallResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SwitchCallResponse_0400
 * @tc.name  : testV1SwitchCallResponse004
 * @tc.desc  : Call function SwitchCallResponse slotId is SLOTID_2 SerialId is -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SwitchCallResponse004, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    g_switchCallResponseFlag = false;
    int32_t ret = g_rilInterface->SwitchCall(SLOTID_2, -1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
    EXPECT_EQ(false, g_switchCallResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetClipResponse_0100
 * @tc.name  : testV1GetClipResponse001
 * @tc.desc  : Call function GetClipResponse slotId is SLOTID_1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetClipResponse001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    g_getClipResponseFlag = false;
    int32_t ret = g_rilInterface->GetClip(SLOTID_1, GetSerialId());
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_getClipResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetClipResponse_0200
 * @tc.name  : testV1GetClipResponse002
 * @tc.desc  : Call function GetClipResponse slotId is SLOTID_2
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetClipResponse002, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    g_getClipResponseFlag = false;
    int32_t ret = g_rilInterface->GetClip(SLOTID_2, GetSerialId());
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_getClipResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetClipResponse_0300
 * @tc.name  : testV1GetClipResponse003
 * @tc.desc  : Call function GetClipResponse slotId is SLOTID_1 SerialId is -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetClipResponse003, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    g_getClipResponseFlag = false;
    int32_t ret = g_rilInterface->GetClip(SLOTID_1, -1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
    EXPECT_EQ(false, g_getClipResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetClipResponse_0400
 * @tc.name  : testV1GetClipResponse004
 * @tc.desc  : Call function GetClipResponse slotId is SLOTID_2 SerialId is -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetClipResponse004, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    g_getClipResponseFlag = false;
    int32_t ret = g_rilInterface->GetClip(SLOTID_2, -1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
    EXPECT_EQ(false, g_getClipResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetClipResponse_0100
 * @tc.name  : testV1SetClipResponse001
 * @tc.desc  : Call function SetClipResponse slotId is SLOTID_1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetClipResponse001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    g_setClipResponseFlag = false;
    int32_t ret = g_rilInterface->SetClip(SLOTID_1, GetSerialId(), 1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_setClipResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetClipResponse_0200
 * @tc.name  : testV1SetClipResponse002
 * @tc.desc  : Call function SetClipResponse slotId is SLOTID_2
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetClipResponse002, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    g_setClipResponseFlag = false;
    int32_t ret = g_rilInterface->SetClip(SLOTID_2, GetSerialId(), 1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_setClipResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetClipResponse_0300
 * @tc.name  : testV1SetClipResponse003
 * @tc.desc  : Call function SetClipResponse slotId is SLOTID_1 SerialId is -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetClipResponse003, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    g_setClipResponseFlag = false;
    int32_t ret = g_rilInterface->SetClip(SLOTID_1, -1, 1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
    EXPECT_EQ(false, g_setClipResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetClipResponse_0400
 * @tc.name  : testV1SetClipResponse004
 * @tc.desc  : Call function SetClipResponse slotId is SLOTID_2 SerialId is -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetClipResponse004, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    g_setClipResponseFlag = false;
    int32_t ret = g_rilInterface->SetClip(SLOTID_2, -1, 1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
    EXPECT_EQ(false, g_setClipResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SimStkSendTerminalResponseResponse_0100
 * @tc.name  : testV1SimStkSendTerminalResponseResponse001
 * @tc.desc  : Call function SimStkSendTerminalResponseResponse slotId is SLOTID_1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SimStkSendTerminalResponseResponse001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    g_simStkSendTerminalResponseResponseFlag = false;
    int32_t ret = g_rilInterface->SimStkSendTerminalResponse(SLOTID_1, GetSerialId(), TEST_STORAGE_PDU);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_simStkSendTerminalResponseResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SimStkSendTerminalResponseResponse_0200
 * @tc.name  : testV1SimStkSendTerminalResponseResponse002
 * @tc.desc  : Call function SimStkSendTerminalResponseResponse slotId is SLOTID_2
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SimStkSendTerminalResponseResponse002, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    g_simStkSendTerminalResponseResponseFlag = false;
    int32_t ret = g_rilInterface->SimStkSendTerminalResponse(SLOTID_2, GetSerialId(), TEST_STORAGE_PDU);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_simStkSendTerminalResponseResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SimStkSendTerminalResponseResponse_0300
 * @tc.name  : testV1SimStkSendTerminalResponseResponse003
 * @tc.desc  : Call function SimStkSendTerminalResponseResponse slotId is SLOTID_1 SerialId is -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SimStkSendTerminalResponseResponse003, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    g_simStkSendTerminalResponseResponseFlag = false;
    int32_t ret = g_rilInterface->SimStkSendTerminalResponse(SLOTID_1, -1, TEST_STORAGE_PDU);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
    EXPECT_EQ(false, g_simStkSendTerminalResponseResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SimStkSendTerminalResponseResponse_0400
 * @tc.name  : testV1SimStkSendTerminalResponseResponse004
 * @tc.desc  : Call function SimStkSendTerminalResponseResponse slotId is SLOTID_2 SerialId is -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SimStkSendTerminalResponseResponse004, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    g_simStkSendTerminalResponseResponseFlag = false;
    int32_t ret = g_rilInterface->SimStkSendTerminalResponse(SLOTID_2, -1, TEST_STORAGE_PDU);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
    EXPECT_EQ(false, g_simStkSendTerminalResponseResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SimStkIsReadyResponse_0100
 * @tc.name  : testV1SimStkIsReadyResponse001
 * @tc.desc  : Call function SimStkIsReadyResponse slotId is SLOTID_1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SimStkIsReadyResponse001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    g_simStkIsReadyResponseFlag = false;
    int32_t ret = g_rilInterface->SimStkIsReady(SLOTID_1, GetSerialId());
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_simStkIsReadyResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SimStkIsReadyResponse_0200
 * @tc.name  : testV1SimStkIsReadyResponse002
 * @tc.desc  : Call function SimStkIsReadyResponse slotId is SLOTID_2
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SimStkIsReadyResponse002, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    g_simStkIsReadyResponseFlag = false;
    int32_t ret = g_rilInterface->SimStkIsReady(SLOTID_2, GetSerialId());
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_simStkIsReadyResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SimStkIsReadyResponse_0300
 * @tc.name  : testV1SimStkIsReadyResponse003
 * @tc.desc  : Call function SimStkIsReadyResponse slotId is SLOTID_1 SerialId is -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SimStkIsReadyResponse003, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    g_simStkIsReadyResponseFlag = false;
    int32_t ret = g_rilInterface->SimStkIsReady(SLOTID_1, -1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
    EXPECT_EQ(false, g_simStkIsReadyResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SimStkIsReadyResponse_0400
 * @tc.name  : testV1SimStkIsReadyResponse004
 * @tc.desc  : Call function SimStkIsReadyResponse slotId is SLOTID_2 SerialId is -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SimStkIsReadyResponse004, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    g_simStkIsReadyResponseFlag = false;
    int32_t ret = g_rilInterface->SimStkIsReady(SLOTID_2, -1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
    EXPECT_EQ(false, g_simStkIsReadyResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetRadioProtocolResponse_0100
 * @tc.name  : testV1SetRadioProtocolResponse001
 * @tc.desc  : Call function SetRadioProtocolResponse slotId is SLOTID_1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetRadioProtocolResponse001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    g_setRadioProtocolResponseFlag = false;
    RadioProtocol protocol;
    protocol.slotId = SLOTID_1;
    int32_t ret = g_rilInterface->SetRadioProtocol(SLOTID_1, GetSerialId(), protocol);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_setRadioProtocolResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetRadioProtocolResponse_0200
 * @tc.name  : testV1SetRadioProtocolResponse002
 * @tc.desc  : Call function SetRadioProtocolResponse slotId is SLOTID_2
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetRadioProtocolResponse002, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    g_setRadioProtocolResponseFlag = false;
    RadioProtocol protocol;
    protocol.slotId = SLOTID_2;
    int32_t ret = g_rilInterface->SetRadioProtocol(SLOTID_2, GetSerialId(), protocol);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_setRadioProtocolResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetRadioProtocolResponse_0300
 * @tc.name  : testV1SetRadioProtocolResponse003
 * @tc.desc  : Call function SetRadioProtocolResponse slotId is SLOTID_1 SerialId is -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetRadioProtocolResponse003, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    g_setRadioProtocolResponseFlag = false;
    RadioProtocol protocol;
    protocol.slotId = SLOTID_1;
    int32_t ret = g_rilInterface->SetRadioProtocol(SLOTID_1, -1, protocol);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
    EXPECT_EQ(false, g_setRadioProtocolResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetRadioProtocolResponse_0400
 * @tc.name  : testV1SetRadioProtocolResponse004
 * @tc.desc  : Call function SetRadioProtocolResponse slotId is SLOTID_2 SerialId is -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetRadioProtocolResponse004, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    g_setRadioProtocolResponseFlag = false;
    RadioProtocol protocol;
    protocol.slotId = SLOTID_2;
    int32_t ret = g_rilInterface->SetRadioProtocol(SLOTID_2, -1, protocol);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
    EXPECT_EQ(false, g_setRadioProtocolResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SimOpenLogicalChannelResponse_0100
 * @tc.name  : testV1SimOpenLogicalChannelResponse001
 * @tc.desc  : Call function SimOpenLogicalChannelResponse slotId is SLOTID_1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SimOpenLogicalChannelResponse001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    g_simOpenLogicalChannelResponseFlag = false;
    std::string appID = "A00000015141434C00";
    int32_t p2 = 0;
    int32_t ret = g_rilInterface->SimOpenLogicalChannel(SLOTID_1, GetSerialId(), appID, p2);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_simOpenLogicalChannelResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SimOpenLogicalChannelResponse_0200
 * @tc.name  : testV1SimOpenLogicalChannelResponse002
 * @tc.desc  : Call function SimOpenLogicalChannelResponse slotId is SLOTID_2
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SimOpenLogicalChannelResponse002, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    g_simOpenLogicalChannelResponseFlag = false;
    std::string appID = "A00000015141434C00";
    int32_t p2 = 0;
    int32_t ret = g_rilInterface->SimOpenLogicalChannel(SLOTID_2, GetSerialId(), appID, p2);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_simOpenLogicalChannelResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SimOpenLogicalChannelResponse_0300
 * @tc.name  : testV1SimOpenLogicalChannelResponse003
 * @tc.desc  : Call function SimOpenLogicalChannelResponse slotId is SLOTID_1 SerialId is -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SimOpenLogicalChannelResponse003, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    g_simOpenLogicalChannelResponseFlag = false;
    std::string appID = "A00000015141434C00";
    int32_t p2 = 0;
    int32_t ret = g_rilInterface->SimOpenLogicalChannel(SLOTID_1, -1, appID, p2);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
    EXPECT_EQ(false, g_simOpenLogicalChannelResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SimOpenLogicalChannelResponse_0400
 * @tc.name  : testV1SimOpenLogicalChannelResponse004
 * @tc.desc  : Call function SimOpenLogicalChannelResponse slotId is SLOTID_2 SerialId is -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SimOpenLogicalChannelResponse004, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    g_simOpenLogicalChannelResponseFlag = false;
    std::string appID = "A00000015141434C00";
    int32_t p2 = 0;
    int32_t ret = g_rilInterface->SimOpenLogicalChannel(SLOTID_2, -1, appID, p2);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
    EXPECT_EQ(false, g_simOpenLogicalChannelResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SimCloseLogicalChannelResponse_0100
 * @tc.name  : testV1SimCloseLogicalChannelResponse001
 * @tc.desc  : Call function SimCloseLogicalChannelResponse slotId is SLOTID_1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SimCloseLogicalChannelResponse001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    g_simCloseLogicalChannelResponseFlag = false;
    int32_t ret = g_rilInterface->SimCloseLogicalChannel(SLOTID_1, GetSerialId(), currentChannelId_);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_simCloseLogicalChannelResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SimCloseLogicalChannelResponse_0200
 * @tc.name  : testV1SimCloseLogicalChannelResponse002
 * @tc.desc  : Call function SimCloseLogicalChannelResponse slotId is SLOTID_2
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SimCloseLogicalChannelResponse002, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    g_simCloseLogicalChannelResponseFlag = false;
    int32_t ret = g_rilInterface->SimCloseLogicalChannel(SLOTID_2, GetSerialId(), currentChannelId_);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_simCloseLogicalChannelResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SimCloseLogicalChannelResponse_0300
 * @tc.name  : testV1SimCloseLogicalChannelResponse003
 * @tc.desc  : Call function SimCloseLogicalChannelResponse slotId is SLOTID_1 SerialId is -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SimCloseLogicalChannelResponse003, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    g_simCloseLogicalChannelResponseFlag = false;
    int32_t ret = g_rilInterface->SimCloseLogicalChannel(SLOTID_1, -1, currentChannelId_);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
    EXPECT_EQ(false, g_simCloseLogicalChannelResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SimCloseLogicalChannelResponse_0400
 * @tc.name  : testV1SimCloseLogicalChannelResponse004
 * @tc.desc  : Call function SimCloseLogicalChannelResponse slotId is SLOTID_2 SerialId is -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SimCloseLogicalChannelResponse004, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    g_simCloseLogicalChannelResponseFlag = false;
    int32_t ret = g_rilInterface->SimCloseLogicalChannel(SLOTID_2, -1, currentChannelId_);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
    EXPECT_EQ(false, g_simCloseLogicalChannelResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SimTransmitApduLogicalChannelResponse_0100
 * @tc.name  : testV1SimTransmitApduLogicalChannelResponse001
 * @tc.desc  : Call function SimTransmitApduLogicalChannelResponse slotId is SLOTID_1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SimTransmitApduLogicalChannelResponse001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    g_simTransmitApduLogicalChannelResponseFlag = false;
    ApduSimIORequestInfo reqInfo;
    reqInfo.serial = 0;
    reqInfo.channelId = 1;
    reqInfo.type = 0x80;
    reqInfo.instruction = 0xCA;
    reqInfo.p1 = 0xFF;
    reqInfo.p2 = 0x40;
    reqInfo.p3 = 0x00;
    reqInfo.data = "";
    int32_t ret = g_rilInterface->SimTransmitApduLogicalChannel(SLOTID_1, GetSerialId(), reqInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_simTransmitApduLogicalChannelResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SimTransmitApduLogicalChannelResponse_0200
 * @tc.name  : testV1SimTransmitApduLogicalChannelResponse002
 * @tc.desc  : Call function SimTransmitApduLogicalChannelResponse slotId is SLOTID_2
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SimTransmitApduLogicalChannelResponse002, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    g_simTransmitApduLogicalChannelResponseFlag = false;
    ApduSimIORequestInfo reqInfo;
    reqInfo.serial = 0;
    reqInfo.channelId = 1;
    reqInfo.type = 0x80;
    reqInfo.instruction = 0xCA;
    reqInfo.p1 = 0xFF;
    reqInfo.p2 = 0x40;
    reqInfo.p3 = 0x00;
    reqInfo.data = "";
    int32_t ret = g_rilInterface->SimTransmitApduLogicalChannel(SLOTID_2, GetSerialId(), reqInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_simTransmitApduLogicalChannelResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SimTransmitApduLogicalChannelResponse_0300
 * @tc.name  : testV1SimTransmitApduLogicalChannelResponse003
 * @tc.desc  : Call function SimTransmitApduLogicalChannelResponse slotId is SLOTID_1 SerialId is -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SimTransmitApduLogicalChannelResponse003, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    g_simTransmitApduLogicalChannelResponseFlag = false;
    ApduSimIORequestInfo reqInfo;
    reqInfo.serial = 0;
    reqInfo.channelId = 1;
    reqInfo.type = 0x80;
    reqInfo.instruction = 0xCA;
    reqInfo.p1 = 0xFF;
    reqInfo.p2 = 0x40;
    reqInfo.p3 = 0x00;
    reqInfo.data = "";
    int32_t ret = g_rilInterface->SimTransmitApduLogicalChannel(SLOTID_1, -1, reqInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
    EXPECT_EQ(false, g_simTransmitApduLogicalChannelResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SimTransmitApduLogicalChannelResponse_0400
 * @tc.name  : testV1SimTransmitApduLogicalChannelResponse004
 * @tc.desc  : Call function SimTransmitApduLogicalChannelResponse slotId is SLOTID_2 SerialId is -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SimTransmitApduLogicalChannelResponse004, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    g_simTransmitApduLogicalChannelResponseFlag = false;
    ApduSimIORequestInfo reqInfo;
    reqInfo.serial = 0;
    reqInfo.channelId = 1;
    reqInfo.type = 0x80;
    reqInfo.instruction = 0xCA;
    reqInfo.p1 = 0xFF;
    reqInfo.p2 = 0x40;
    reqInfo.p3 = 0x00;
    reqInfo.data = "";
    int32_t ret = g_rilInterface->SimTransmitApduLogicalChannel(SLOTID_2, -1, reqInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
    EXPECT_EQ(false, g_simTransmitApduLogicalChannelResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SimTransmitApduBasicChannelResponse_0100
 * @tc.name  : testV1SimTransmitApduBasicChannelResponse001
 * @tc.desc  : Call function SimTransmitApduBasicChannelResponse slotId is SLOTID_1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SimTransmitApduBasicChannelResponse001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    g_simTransmitApduBasicChannelResponseFlag = false;
    ApduSimIORequestInfo reqInfo;
    reqInfo.serial = 0;
    reqInfo.channelId = 1;
    reqInfo.type = 0x80;
    reqInfo.instruction = 0xCA;
    reqInfo.p1 = 0xFF;
    reqInfo.p2 = 0x40;
    reqInfo.p3 = 0x00;
    reqInfo.data = "";
    int32_t ret = g_rilInterface->SimTransmitApduBasicChannel(SLOTID_1, GetSerialId(), reqInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_simTransmitApduBasicChannelResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SimTransmitApduBasicChannelResponse_0200
 * @tc.name  : testV1SimTransmitApduBasicChannelResponse002
 * @tc.desc  : Call function SimTransmitApduBasicChannelResponse slotId is SLOTID_2
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SimTransmitApduBasicChannelResponse002, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    g_simTransmitApduBasicChannelResponseFlag = false;
    ApduSimIORequestInfo reqInfo;
    reqInfo.serial = 0;
    reqInfo.channelId = 1;
    reqInfo.type = 0x80;
    reqInfo.instruction = 0xCA;
    reqInfo.p1 = 0xFF;
    reqInfo.p2 = 0x40;
    reqInfo.p3 = 0x00;
    reqInfo.data = "";
    int32_t ret = g_rilInterface->SimTransmitApduBasicChannel(SLOTID_2, GetSerialId(), reqInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_simTransmitApduBasicChannelResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SimTransmitApduBasicChannelResponse_0300
 * @tc.name  : testV1SimTransmitApduBasicChannelResponse003
 * @tc.desc  : Call function SimTransmitApduBasicChannelResponse slotId is SLOTID_1 SerialId is -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SimTransmitApduBasicChannelResponse003, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    g_simTransmitApduBasicChannelResponseFlag = false;
    ApduSimIORequestInfo reqInfo;
    reqInfo.serial = 0;
    reqInfo.channelId = 1;
    reqInfo.type = 0x80;
    reqInfo.instruction = 0xCA;
    reqInfo.p1 = 0xFF;
    reqInfo.p2 = 0x40;
    reqInfo.p3 = 0x00;
    reqInfo.data = "";
    int32_t ret = g_rilInterface->SimTransmitApduBasicChannel(SLOTID_1, -1, reqInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
    EXPECT_EQ(false, g_simTransmitApduBasicChannelResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SimTransmitApduBasicChannelResponse_0400
 * @tc.name  : testV1SimTransmitApduBasicChannelResponse004
 * @tc.desc  : Call function SimTransmitApduBasicChannelResponse slotId is SLOTID_2 SerialId is -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SimTransmitApduBasicChannelResponse004, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    g_simTransmitApduBasicChannelResponseFlag = false;
    ApduSimIORequestInfo reqInfo;
    reqInfo.serial = 0;
    reqInfo.channelId = 1;
    reqInfo.type = 0x80;
    reqInfo.instruction = 0xCA;
    reqInfo.p1 = 0xFF;
    reqInfo.p2 = 0x40;
    reqInfo.p3 = 0x00;
    reqInfo.data = "";
    int32_t ret = g_rilInterface->SimTransmitApduBasicChannel(SLOTID_2, -1, reqInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
    EXPECT_EQ(false, g_simTransmitApduBasicChannelResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1UnlockSimLockResponse_0100
 * @tc.name  : testV1UnlockSimLockResponse001
 * @tc.desc  : Call function UnlockSimLockResponse slotId is SLOTID_1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1UnlockSimLockResponse001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    g_unlockSimLockResponseFlag = false;
    int32_t ret = g_rilInterface->UnlockSimLock(SLOTID_1, GetSerialId(), 0, TEST_STORAGE_PDU);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_unlockSimLockResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1UnlockSimLockResponse_0200
 * @tc.name  : testV1UnlockSimLockResponse002
 * @tc.desc  : Call function UnlockSimLockResponse slotId is SLOTID_2
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1UnlockSimLockResponse002, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    g_unlockSimLockResponseFlag = false;
    int32_t ret = g_rilInterface->UnlockSimLock(SLOTID_2, GetSerialId(), 0, TEST_STORAGE_PDU);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_unlockSimLockResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1UnlockSimLockResponse_0300
 * @tc.name  : testV1UnlockSimLockResponse003
 * @tc.desc  : Call function UnlockSimLockResponse slotId is SLOTID_1 SerialId is -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1UnlockSimLockResponse003, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    g_unlockSimLockResponseFlag = false;
    int32_t ret = g_rilInterface->UnlockSimLock(SLOTID_1, -1, 0, TEST_STORAGE_PDU);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
    EXPECT_EQ(false, g_unlockSimLockResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1UnlockSimLockResponse_0400
 * @tc.name  : testV1UnlockSimLockResponse004
 * @tc.desc  : Call function UnlockSimLockResponse slotId is SLOTID_2 SerialId is -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1UnlockSimLockResponse004, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    g_unlockSimLockResponseFlag = false;
    int32_t ret = g_rilInterface->UnlockSimLock(SLOTID_2, -1, 0, TEST_STORAGE_PDU);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
    EXPECT_EQ(false, g_unlockSimLockResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SimAuthenticationResponse_0100
 * @tc.name  : testV1SimAuthenticationResponse001
 * @tc.desc  : Call function SimAuthenticationResponse slotId is SLOTID_1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SimAuthenticationResponse001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    g_simAuthenticationResponseFlag = false;
    SimAuthenticationRequestInfo simAuthInfo;
    simAuthInfo.aid = TEST_STORAGE_PDU;
    simAuthInfo.authData = TEST_STORAGE_PDU;
    int32_t ret = g_rilInterface->SimAuthentication(SLOTID_1, GetSerialId(), simAuthInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_simAuthenticationResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SimAuthenticationResponse_0200
 * @tc.name  : testV1SimAuthenticationResponse002
 * @tc.desc  : Call function SimAuthenticationResponse slotId is SLOTID_2
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SimAuthenticationResponse002, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    g_simAuthenticationResponseFlag = false;
    SimAuthenticationRequestInfo simAuthInfo;
    simAuthInfo.aid = TEST_STORAGE_PDU;
    simAuthInfo.authData = TEST_STORAGE_PDU;
    int32_t ret = g_rilInterface->SimAuthentication(SLOTID_2, GetSerialId(), simAuthInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_simAuthenticationResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SimAuthenticationResponse_0300
 * @tc.name  : testV1SimAuthenticationResponse003
 * @tc.desc  : Call function SimAuthenticationResponse slotId is SLOTID_1 SerialId is -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SimAuthenticationResponse003, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    g_simAuthenticationResponseFlag = false;
    SimAuthenticationRequestInfo simAuthInfo;
    simAuthInfo.aid = TEST_STORAGE_PDU;
    simAuthInfo.authData = TEST_STORAGE_PDU;
    int32_t ret = g_rilInterface->SimAuthentication(SLOTID_1, -1, simAuthInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
    EXPECT_EQ(false, g_simAuthenticationResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SimAuthenticationResponse_0400
 * @tc.name  : testV1SimAuthenticationResponse004
 * @tc.desc  : Call function SimAuthenticationResponse slotId is SLOTID_2 SerialId is -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SimAuthenticationResponse004, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    g_simAuthenticationResponseFlag = false;
    SimAuthenticationRequestInfo simAuthInfo;
    simAuthInfo.aid = TEST_STORAGE_PDU;
    simAuthInfo.authData = TEST_STORAGE_PDU;
    int32_t ret = g_rilInterface->SimAuthentication(SLOTID_2, -1, simAuthInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
    EXPECT_EQ(false, g_simAuthenticationResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SimStkSendEnvelopeResponse_0100
 * @tc.name  : testV1SimStkSendEnvelopeResponse001
 * @tc.desc  : Call function SimStkSendEnvelopeResponse slotId is SLOTID_1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SimStkSendEnvelopeResponse001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    g_simStkSendEnvelopeResponseFlag = false;
    int32_t ret = g_rilInterface->SimStkSendEnvelope(SLOTID_1, GetSerialId(), TEST_STORAGE_PDU);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_simStkSendEnvelopeResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SimStkSendEnvelopeResponse_0200
 * @tc.name  : testV1SimStkSendEnvelopeResponse002
 * @tc.desc  : Call function SimStkSendEnvelopeResponse slotId is SLOTID_2
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SimStkSendEnvelopeResponse002, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    g_simStkSendEnvelopeResponseFlag = false;
    int32_t ret = g_rilInterface->SimStkSendEnvelope(SLOTID_2, GetSerialId(), TEST_STORAGE_PDU);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_simStkSendEnvelopeResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SimStkSendEnvelopeResponse_0300
 * @tc.name  : testV1SimStkSendEnvelopeResponse003
 * @tc.desc  : Call function SimStkSendEnvelopeResponse slotId is SLOTID_1 SerialId is -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SimStkSendEnvelopeResponse003, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    g_simStkSendEnvelopeResponseFlag = false;
    int32_t ret = g_rilInterface->SimStkSendEnvelope(SLOTID_1, -1, TEST_STORAGE_PDU);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
    EXPECT_EQ(false, g_simStkSendEnvelopeResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SimStkSendEnvelopeResponse_0400
 * @tc.name  : testV1SimStkSendEnvelopeResponse004
 * @tc.desc  : Call function SimStkSendEnvelopeResponse slotId is SLOTID_2 SerialId is -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SimStkSendEnvelopeResponse004, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    g_simStkSendEnvelopeResponseFlag = false;
    int32_t ret = g_rilInterface->SimStkSendEnvelope(SLOTID_2, -1, TEST_STORAGE_PDU);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
    EXPECT_EQ(false, g_simStkSendEnvelopeResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SimStkSendCallSetupRequestResultResponse_0100
 * @tc.name  : testV1SimStkSendCallSetupRequestResultResponse001
 * @tc.desc  : Call function SimStkSendCallSetupRequestResultResponse slotId is SLOTID_1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SimStkSendCallSetupRequestResultResponse001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    g_simStkSendCallSetupRequestResultResponseFlag = false;
    int32_t ret = g_rilInterface->SimStkSendCallSetupRequestResult(SLOTID_1, GetSerialId(), true);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_simStkSendCallSetupRequestResultResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SimStkSendCallSetupRequestResultResponse_0200
 * @tc.name  : testV1SimStkSendCallSetupRequestResultResponse002
 * @tc.desc  : Call function SimStkSendCallSetupRequestResultResponse slotId is SLOTID_2
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SimStkSendCallSetupRequestResultResponse002, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    g_simStkSendCallSetupRequestResultResponseFlag = false;
    int32_t ret = g_rilInterface->SimStkSendCallSetupRequestResult(SLOTID_2, GetSerialId(), true);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_simStkSendCallSetupRequestResultResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SimStkSendCallSetupRequestResultResponse_0300
 * @tc.name  : testV1SimStkSendCallSetupRequestResultResponse003
 * @tc.desc  : Call function SimStkSendCallSetupRequestResultResponse slotId is SLOTID_1 SerialId is -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SimStkSendCallSetupRequestResultResponse003, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    g_simStkSendCallSetupRequestResultResponseFlag = false;
    int32_t ret = g_rilInterface->SimStkSendCallSetupRequestResult(SLOTID_1, -1, true);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
    EXPECT_EQ(false, g_simStkSendCallSetupRequestResultResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SimStkSendCallSetupRequestResultResponse_0400
 * @tc.name  : testV1SimStkSendCallSetupRequestResultResponse004
 * @tc.desc  : Call function SimStkSendCallSetupRequestResultResponse slotId is SLOTID_2 SerialId is -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SimStkSendCallSetupRequestResultResponse004, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    g_simStkSendCallSetupRequestResultResponseFlag = false;
    int32_t ret = g_rilInterface->SimStkSendCallSetupRequestResult(SLOTID_2, -1, true);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
    EXPECT_EQ(false, g_simStkSendCallSetupRequestResultResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetRadioProtocolResponse_0100
 * @tc.name  : testV1GetRadioProtocolResponse001
 * @tc.desc  : Call function GetRadioProtocolResponse slotId is SLOTID_1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetRadioProtocolResponse001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    g_getRadioProtocolResponseFlag = false;
    int32_t ret = g_rilInterface->GetRadioProtocol(SLOTID_1, GetSerialId());
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_getRadioProtocolResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetRadioProtocolResponse_0200
 * @tc.name  : testV1GetRadioProtocolResponse002
 * @tc.desc  : Call function GetRadioProtocolResponse slotId is SLOTID_2
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetRadioProtocolResponse002, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    g_getRadioProtocolResponseFlag = false;
    int32_t ret = g_rilInterface->GetRadioProtocol(SLOTID_2, GetSerialId());
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_getRadioProtocolResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetRadioProtocolResponse_0300
 * @tc.name  : testV1GetRadioProtocolResponse003
 * @tc.desc  : Call function GetRadioProtocolResponse slotId is SLOTID_1 SerialId is -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetRadioProtocolResponse003, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    g_getRadioProtocolResponseFlag = false;
    int32_t ret = g_rilInterface->GetRadioProtocol(SLOTID_1, -1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
    EXPECT_EQ(false, g_getRadioProtocolResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetRadioProtocolResponse_0400
 * @tc.name  : testV1GetRadioProtocolResponse004
 * @tc.desc  : Call function GetRadioProtocolResponse slotId is SLOTID_2 SerialId is -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetRadioProtocolResponse004, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    g_getRadioProtocolResponseFlag = false;
    int32_t ret = g_rilInterface->GetRadioProtocol(SLOTID_2, -1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
    EXPECT_EQ(false, g_getRadioProtocolResponseFlag);
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SetUssd_0300
 * @tc.name   : testV1SetUssd001
 * @tc.desc   : Call the function V1 SetUssd with slotId  and a value of 2
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetUssd001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SetUssd(2, GetSerialId(), "12345678");
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_SET_USSD));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SetUssd_0400
 * @tc.name   : testV1SetUssd002
 * @tc.desc   : Call the function V1 SetUssd with slotId  and a value of 256
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetUssd002, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SetUssd(256, GetSerialId(), "12345678");
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_SET_USSD));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SetUssd_0500
 * @tc.name   : testV1SetUssd003
 * @tc.desc   : Call the function V1 SetUssd with slotId  and a value of 256
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetUssd003, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SetUssd(-1, GetSerialId(), "12345678");
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_SET_USSD));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SetUssd_0600
 * @tc.name   : testV1SetUssd004
 * @tc.desc   : Call the function V1 SetUssd with serialId  and a value of -11111
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetUssd004, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SetUssd(SLOTID_1, -11111, "12345678");
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_SET_USSD));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SetUssd_0700
 * @tc.name   : testV1SetUssd005
 * @tc.desc   : Call the function V1 SetUssd with serialId  and a value of 0
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetUssd005, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SetUssd(SLOTID_1, 0, "12345678");
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_SET_USSD));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SetUssd_0800
 * @tc.name   : testV1SetUssd006
 * @tc.desc   : Call the function V1 SetUssd with serialId  and a value of 11111
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetUssd006, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SetUssd(SLOTID_1, 11111, "12345678");
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_SET_USSD));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SetUssd_0900
 * @tc.name   : testV1SetUssd007
 * @tc.desc   : Call the function V1 SetUssd with serialId  and a value of 32768
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetUssd007, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SetUssd(SLOTID_1, 32768, "12345678");
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_SET_USSD));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SetUssd_1000
 * @tc.name   : testV1SetUssd008
 * @tc.desc   : Call the function V1 SetUssd with serialId  and a value of -32768
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetUssd008, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SetUssd(SLOTID_1, -32768, "12345678");
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_SET_USSD));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SetUssd_1100
 * @tc.name   : testV1SetUssd009
 * @tc.desc   : Call the function V1 SetUssd with str  and a value of 1qaz!QAZ
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetUssd009, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SetUssd(SLOTID_1, GetSerialId(), "1qaz!QAZ");
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_SET_USSD));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SetUssd_1200
 * @tc.name   : testV1SetUssd010
 * @tc.desc   : Call the function V1 SetUssd with str  and a value of 000000000000000
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetUssd010, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SetUssd(SLOTID_1, GetSerialId(), "000000000000000");
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_SET_USSD));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1GetUssd_0300
 * @tc.name   : testV1GetUssd001
 * @tc.desc   : Call the function V1 GetUssd with slotId  and a value of 2
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetUssd001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->GetUssd(2, GetSerialId());
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_GET_USSD));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1GetUssd_0400
 * @tc.name   : testV1GetUssd002
 * @tc.desc   : Call the function V1 GetUssd with slotId  and a value of 256
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetUssd002, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->GetUssd(256, GetSerialId());
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_GET_USSD));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1GetUssd_0500
 * @tc.name   : testV1GetUssd003
 * @tc.desc   : Call the function V1 GetUssd with slotId  and a value of -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetUssd003, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->GetUssd(-1, GetSerialId());
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_GET_USSD));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1GetUssd_0600
 * @tc.name   : testV1GetUssd004
 * @tc.desc   : Call the function V1 GetUssd with serialId  and a value of -11111
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetUssd004, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->GetUssd(SLOTID_1, -11111);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_GET_USSD));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1GetUssd_0700
 * @tc.name   : testV1GetUssd005
 * @tc.desc   : Call the function V1 GetUssd with serialId  and a value of 0
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetUssd005, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->GetUssd(SLOTID_1, 0);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_GET_USSD));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1GetUssd_0800
 * @tc.name   : testV1GetUssd006
 * @tc.desc   : Call the function V1 GetUssd with serialId  and a value of 11111
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetUssd006, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->GetUssd(SLOTID_1, 11111);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_GET_USSD));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1GetUssd_0900
 * @tc.name   : testV1GetUssd007
 * @tc.desc   : Call the function V1 GetUssd with serialId  and a value of 32768
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetUssd007, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->GetUssd(SLOTID_1, 32768);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_GET_USSD));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1GetUssd_1000
 * @tc.name   : testV1GetUssd008
 * @tc.desc   : Call the function V1 GetUssd with serialId  and a value of -32768
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetUssd008, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->GetUssd(SLOTID_1, -32768);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_GET_USSD));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SetMute_0300
 * @tc.name   : testV1SetMute001
 * @tc.desc   : Call the function V1 SetMute with slotId  and a value of 2
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetMute001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SetMute(2, GetSerialId(), 1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_SET_MUTE));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SetMute_0400
 * @tc.name   : testV1SetMute002
 * @tc.desc   : Call the function V1 SetMute with slotId  and a value of 256
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetMute002, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SetMute(256, GetSerialId(), 1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_SET_MUTE));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SetMute_0500
 * @tc.name   : testV1SetMute003
 * @tc.desc   : Call the function V1 SetMute with slotId  and a value of -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetMute003, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SetMute(-1, GetSerialId(), 1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_SET_MUTE));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SetMute_0600
 * @tc.name   : testV1SetMute004
 * @tc.desc   : Call the function V1 SetMute with serialId  and a value of -11111
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetMute004, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SetMute(SLOTID_1, -11111, 1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_SET_MUTE));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SetMute_0700
 * @tc.name   : testV1SetMute005
 * @tc.desc   : Call the function V1 SetMute with serialId  and a value of 0
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetMute005, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SetMute(SLOTID_1, 0, 1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_SET_MUTE));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SetMute_0800
 * @tc.name   : testV1SetMute006
 * @tc.desc   : Call the function V1 SetMute with serialId  and a value of 11111
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetMute006, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SetMute(SLOTID_1, 11111, 1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_SET_MUTE));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SetMute_0900
 * @tc.name   : testV1SetMute007
 * @tc.desc   : Call the function V1 SetMute with serialId  and a value of 32768
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetMute007, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SetMute(SLOTID_1, 32768, 1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_SET_MUTE));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SetMute_1000
 * @tc.name   : testV1SetMute008
 * @tc.desc   : Call the function V1 SetMute with serialId  and a value of -32768
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetMute008, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SetMute(SLOTID_1, -32768, 1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_SET_MUTE));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SetMute_1100
 * @tc.name   : testV1SetMute009
 * @tc.desc   : Call the function V1 SetMute with mute  and a value of 0
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetMute009, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SetMute(SLOTID_1, GetSerialId(), 0);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_SET_MUTE));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SetMute_1200
 * @tc.name   : testV1SetMute010
 * @tc.desc   : Call the function V1 SetMute with mute  and a value of -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetMute010, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SetMute(SLOTID_1, GetSerialId(), -1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1GetMute_0300
 * @tc.name   : testV1GetMute001
 * @tc.desc   : Call the function V1 GetMute with slotId  and a value of 2
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetMute001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->GetMute(2, GetSerialId());
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_GET_MUTE));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1GetMute_0400
 * @tc.name   : testV1GetMute002
 * @tc.desc   : Call the function V1 GetMute with slotId  and a value of 256
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetMute002, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->GetMute(256, GetSerialId());
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_GET_MUTE));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1GetMute_0500
 * @tc.name   : testV1GetMute003
 * @tc.desc   : Call the function V1 GetMute with slotId  and a value of 256
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetMute003, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->GetMute(-1, GetSerialId());
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_GET_MUTE));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1GetMute_0600
 * @tc.name   : testV1GetMute004
 * @tc.desc   : Call the function V1 GetMute with serialId  and a value of 11111
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetMute004, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->GetMute(SLOTID_1, 11111);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_GET_MUTE));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1GetMute_0700
 * @tc.name   : testV1GetMute005
 * @tc.desc   : Call the function V1 GetMute with serialId  and a value of 0
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetMute005, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->GetMute(SLOTID_1, 0);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_GET_MUTE));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1GetMute_0800
 * @tc.name   : testV1GetMute006
 * @tc.desc   : Call the function V1 GetMute with serialId  and a value of -11111
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetMute006, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->GetMute(SLOTID_1, -11111);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_GET_MUTE));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1GetMute_0900
 * @tc.name   : testV1GetMute007
 * @tc.desc   : Call the function V1 GetMute with serialId  and a value of 32768
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetMute007, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->GetMute(SLOTID_1, 32768);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_GET_MUTE));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1GetMute_1000
 * @tc.name   : testV1GetMute008
 * @tc.desc   : Call the function V1 GetMute with serialId  and a value of -32768
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetMute008, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->GetMute(SLOTID_1, -32768);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_GET_MUTE));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1GetCallFailReason_0300
 * @tc.name   : testV1GetCallFailReason001
 * @tc.desc   : Call the function V1 GetCallFailReason with slotId  and a value of 2
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetCallFailReason001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->GetCallFailReason(2, GetSerialId());
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_GET_FAIL_REASON));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1GetCallFailReason_0400
 * @tc.name   : testV1GetCallFailReason002
 * @tc.desc   : Call the function V1 GetCallFailReason with slotId  and a value of 256
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetCallFailReason002, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->GetCallFailReason(256, GetSerialId());
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_GET_FAIL_REASON));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1GetCallFailReason_0500
 * @tc.name   : testV1GetCallFailReason003
 * @tc.desc   : Call the function V1 GetCallFailReason with slotId  and a value of -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetCallFailReason003, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->GetCallFailReason(-1, GetSerialId());
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_GET_FAIL_REASON));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1GetCallFailReason_0600
 * @tc.name   : testV1GetCallFailReason004
 * @tc.desc   : Call the function V1 GetCallFailReason with serialId  and a value of 11111
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetCallFailReason004, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->GetCallFailReason(SLOTID_1, 11111);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_GET_FAIL_REASON));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1GetCallFailReason_0700
 * @tc.name   : testV1GetCallFailReason005
 * @tc.desc   : Call the function V1 GetCallFailReason with serialId  and a value of 0
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetCallFailReason005, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->GetCallFailReason(SLOTID_1, 0);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_GET_FAIL_REASON));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1GetCallFailReason_0800
 * @tc.name   : testV1GetCallFailReason006
 * @tc.desc   : Call the function V1 GetCallFailReason with serialId  and a value of -11111
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetCallFailReason006, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->GetCallFailReason(SLOTID_1, -11111);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_GET_FAIL_REASON));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1GetCallFailReason_0900
 * @tc.name   : testV1GetCallFailReason007
 * @tc.desc   : Call the function V1 GetCallFailReason with serialId  and a value of 32768
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetCallFailReason007, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->GetCallFailReason(SLOTID_1, 32768);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_GET_FAIL_REASON));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1GetCallFailReason_1000
 * @tc.name   : testV1GetCallFailReason008
 * @tc.desc   : Call the function V1 GetCallFailReason with serialId  and a value of -32768
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetCallFailReason008, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->GetCallFailReason(SLOTID_1, -32768);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_GET_FAIL_REASON));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1CallSupplement_0300
 * @tc.name   : testV1CallSupplement001
 * @tc.desc   : Call the function V1 CallSupplement with slotId  and a value of 2
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1CallSupplement001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->CallSupplement(2, GetSerialId(), 1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_CALL_SUPPLEMENT));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1CallSupplement_0400
 * @tc.name   : testV1CallSupplement002
 * @tc.desc   : Call the function V1 CallSupplement with slotId  and a value of 256
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1CallSupplement002, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->CallSupplement(256, GetSerialId(), 1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_CALL_SUPPLEMENT));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1CallSupplement_0500
 * @tc.name   : testV1CallSupplement003
 * @tc.desc   : Call the function V1 CallSupplement with slotId  and a value of -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1CallSupplement003, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->CallSupplement(-1, GetSerialId(), 1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_CALL_SUPPLEMENT));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1CallSupplement_0600
 * @tc.name   : testV1CallSupplement004
 * @tc.desc   : Call the function V1 CallSupplement with serialId  and a value of -11111
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1CallSupplement004, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->CallSupplement(SLOTID_1, 11111, 1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_CALL_SUPPLEMENT));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1CallSupplement_0700
 * @tc.name   : testV1CallSupplement005
 * @tc.desc   : Call the function V1 CallSupplement with serialId  and a value of 0
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1CallSupplement005, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->CallSupplement(SLOTID_1, 0, 1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_CALL_SUPPLEMENT));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1CallSupplement_0800
 * @tc.name   : testV1CallSupplement006
 * @tc.desc   : Call the function V1 CallSupplement with serialId  and a value of 11111
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1CallSupplement006, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->CallSupplement(SLOTID_1, -11111, 1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_CALL_SUPPLEMENT));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1CallSupplement_0900
 * @tc.name   : testV1CallSupplement007
 * @tc.desc   : Call the function V1 CallSupplement with serialId  and a value of 32768
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1CallSupplement007, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->CallSupplement(SLOTID_1, 32768, 1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_CALL_SUPPLEMENT));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1CallSupplement_1000
 * @tc.name   : testV1CallSupplement008
 * @tc.desc   : Call the function V1 CallSupplement with serialId  and a value of -32768
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1CallSupplement008, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->CallSupplement(SLOTID_1, -32768, 1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_CALL_SUPPLEMENT));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1CallSupplement_1100
 * @tc.name   : testV1CallSupplement009
 * @tc.desc   : Call the function V1 CallSupplement with type  and a value of 0
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1CallSupplement009, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->CallSupplement(SLOTID_1, GetSerialId(), 0);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_CALL_SUPPLEMENT));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1CallSupplement_1200
 * @tc.name   : testV1CallSupplement010
 * @tc.desc   : Call the function V1 CallSupplement with type  and a value of 2
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1CallSupplement010, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->CallSupplement(SLOTID_1, GetSerialId(), 2);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_CALL_SUPPLEMENT));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1CallSupplement_1300
 * @tc.name   : testV1CallSupplement011
 * @tc.desc   : Call the function V1 CallSupplement with type  and a value of 3
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1CallSupplement011, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->CallSupplement(SLOTID_1, GetSerialId(), 3);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_CALL_SUPPLEMENT));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1CallSupplement_1400
 * @tc.name   : testV1CallSupplement012
 * @tc.desc   : Call the function V1 CallSupplement with type  and a value of 4
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1CallSupplement012, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->CallSupplement(SLOTID_1, GetSerialId(), 4);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1CallSupplement_1500
 * @tc.name   : testV1CallSupplement013
 * @tc.desc   : Call the function V1 CallSupplement with type  and a value of -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1CallSupplement013, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->CallSupplement(SLOTID_1, GetSerialId(), -1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SendDtmf_0300
 * @tc.name   : testV1SendDtmf001
 * @tc.desc   : Call the function V1 SendDtmf with slotId  and a value of 2
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendDtmf001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    DtmfInfo dtmfInfo = {};
    dtmfInfo.callId = 0;
    dtmfInfo.dtmfKey = "#";
    dtmfInfo.onLength = 300;
    dtmfInfo.offLength = 0;
    dtmfInfo.stringLength = 1;
    int32_t ret = g_rilInterface->SendDtmf(2, GetSerialId(), dtmfInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_SEND_DTMF));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SendDtmf_0400
 * @tc.name   : testV1SendDtmf002
 * @tc.desc   : Call the function V1 SendDtmf with slotId  and a value of 256
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendDtmf002, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    DtmfInfo dtmfInfo = {};
    dtmfInfo.callId = 0;
    dtmfInfo.dtmfKey = "#";
    dtmfInfo.onLength = 300;
    dtmfInfo.offLength = 0;
    dtmfInfo.stringLength = 1;
    int32_t ret = g_rilInterface->SendDtmf(256, GetSerialId(), dtmfInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_SEND_DTMF));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SendDtmf_0500
 * @tc.name   : testV1SendDtmf003
 * @tc.desc   : Call the function V1 SendDtmf with slotId  and a value of -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendDtmf003, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    DtmfInfo dtmfInfo = {};
    dtmfInfo.callId = 0;
    dtmfInfo.dtmfKey = "#";
    dtmfInfo.onLength = 300;
    dtmfInfo.offLength = 0;
    dtmfInfo.stringLength = 1;
    int32_t ret = g_rilInterface->SendDtmf(-1, GetSerialId(), dtmfInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_SEND_DTMF));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SendDtmf_0600
 * @tc.name   : testV1SendDtmf004
 * @tc.desc   : Call the function V1 SendDtmf with serialId  and a value of 11111
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendDtmf004, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    DtmfInfo dtmfInfo = {};
    dtmfInfo.callId = 0;
    dtmfInfo.dtmfKey = "#";
    dtmfInfo.onLength = 300;
    dtmfInfo.offLength = 0;
    dtmfInfo.stringLength = 1;
    int32_t ret = g_rilInterface->SendDtmf(SLOTID_1, 11111, dtmfInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_SEND_DTMF));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SendDtmf_0700
 * @tc.name   : testV1SendDtmf005
 * @tc.desc   : Call the function V1 SendDtmf with serialId  and a value of 0
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendDtmf005, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    DtmfInfo dtmfInfo = {};
    dtmfInfo.callId = 0;
    dtmfInfo.dtmfKey = "#";
    dtmfInfo.onLength = 300;
    dtmfInfo.offLength = 0;
    dtmfInfo.stringLength = 1;
    int32_t ret = g_rilInterface->SendDtmf(SLOTID_1, 0, dtmfInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_SEND_DTMF));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SendDtmf_0800
 * @tc.name   : testV1SendDtmf006
 * @tc.desc   : Call the function V1 SendDtmf with serialId  and a value of -11111
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendDtmf006, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    DtmfInfo dtmfInfo = {};
    dtmfInfo.callId = 0;
    dtmfInfo.dtmfKey = "#";
    dtmfInfo.onLength = 300;
    dtmfInfo.offLength = 0;
    dtmfInfo.stringLength = 1;
    int32_t ret = g_rilInterface->SendDtmf(SLOTID_1, -11111, dtmfInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_SEND_DTMF));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SendDtmf_0900
 * @tc.name   : testV1SendDtmf007
 * @tc.desc   : Call the function V1 SendDtmf with serialId  and a value of 32768
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendDtmf007, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    DtmfInfo dtmfInfo = {};
    dtmfInfo.callId = 0;
    dtmfInfo.dtmfKey = "#";
    dtmfInfo.onLength = 300;
    dtmfInfo.offLength = 0;
    dtmfInfo.stringLength = 1;
    int32_t ret = g_rilInterface->SendDtmf(SLOTID_1, 32768, dtmfInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_SEND_DTMF));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SendDtmf_1000
 * @tc.name   : testV1SendDtmf008
 * @tc.desc   : Call the function V1 SendDtmf with serialId  and a value of -32768
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendDtmf008, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    DtmfInfo dtmfInfo = {};
    dtmfInfo.callId = 0;
    dtmfInfo.dtmfKey = "#";
    dtmfInfo.onLength = 300;
    dtmfInfo.offLength = 0;
    dtmfInfo.stringLength = 1;
    int32_t ret = g_rilInterface->SendDtmf(SLOTID_1, -32768, dtmfInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_SEND_DTMF));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SendDtmf_1100
 * @tc.name   : testV1SendDtmf009
 * @tc.desc   : Call the function V1 SendDtmf with callId  and a value of 1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendDtmf009, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    DtmfInfo dtmfInfo = {};
    dtmfInfo.callId = 1;
    dtmfInfo.dtmfKey = "#";
    dtmfInfo.onLength = 300;
    dtmfInfo.offLength = 0;
    dtmfInfo.stringLength = 1;
    int32_t ret = g_rilInterface->SendDtmf(SLOTID_1, GetSerialId(), dtmfInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_SEND_DTMF));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SendDtmf_1200
 * @tc.name   : testV1SendDtmf010
 * @tc.desc   : Call the function V1 SendDtmf with callId  and a value of -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendDtmf010, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    DtmfInfo dtmfInfo = {};
    dtmfInfo.callId = -1;
    dtmfInfo.dtmfKey = "#";
    dtmfInfo.onLength = 300;
    dtmfInfo.offLength = 0;
    dtmfInfo.stringLength = 1;
    int32_t ret = g_rilInterface->SendDtmf(SLOTID_1, GetSerialId(), dtmfInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SendDtmf_1300
 * @tc.name   : testV1SendDtmf011
 * @tc.desc   : Call the function V1 SendDtmf with dtmfKey and a value of #### and with stringLength and a value of 4
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendDtmf011, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    DtmfInfo dtmfInfo = {};
    dtmfInfo.callId = 0;
    dtmfInfo.dtmfKey = "#####";
    dtmfInfo.onLength = 300;
    dtmfInfo.offLength = 0;
    dtmfInfo.stringLength = 4;
    int32_t ret = g_rilInterface->SendDtmf(SLOTID_1, GetSerialId(), dtmfInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_SEND_DTMF));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SendDtmf_1400
 * @tc.name   : testV1SendDtmf012
 * @tc.desc   : Call the function V1 SendDtmf with dtmfKey  and a value of 0
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendDtmf012, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    DtmfInfo dtmfInfo = {};
    dtmfInfo.callId = 0;
    dtmfInfo.dtmfKey = "0";
    dtmfInfo.onLength = 300;
    dtmfInfo.offLength = 0;
    dtmfInfo.stringLength = 1;
    int32_t ret = g_rilInterface->SendDtmf(SLOTID_1, GetSerialId(), dtmfInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_SEND_DTMF));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SendDtmf_1500
 * @tc.name   : testV1SendDtmf013
 * @tc.desc   : Call the function V1 SendDtmf with dtmfKey  and a value of -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendDtmf013, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    DtmfInfo dtmfInfo = {};
    dtmfInfo.callId = 0;
    dtmfInfo.dtmfKey = "-1";
    dtmfInfo.onLength = 300;
    dtmfInfo.offLength = 0;
    dtmfInfo.stringLength = 1;
    int32_t ret = g_rilInterface->SendDtmf(SLOTID_1, GetSerialId(), dtmfInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_SEND_DTMF));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SendDtmf_1600
 * @tc.name   : testV1SendDtmf014
 * @tc.desc   : Call the function V1 SendDtmf with onLength  and a value of 0
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendDtmf014, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    DtmfInfo dtmfInfo = {};
    dtmfInfo.callId = 0;
    dtmfInfo.dtmfKey = "#";
    dtmfInfo.onLength = 0;
    dtmfInfo.offLength = 0;
    dtmfInfo.stringLength = 1;
    int32_t ret = g_rilInterface->SendDtmf(SLOTID_1, GetSerialId(), dtmfInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_SEND_DTMF));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SendDtmf_1700
 * @tc.name   : testV1SendDtmf015
 * @tc.desc   : Call the function V1 SendDtmf with onLength  and a value of -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendDtmf015, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    DtmfInfo dtmfInfo = {};
    dtmfInfo.callId = 0;
    dtmfInfo.dtmfKey = "#";
    dtmfInfo.onLength = -1;
    dtmfInfo.offLength = 0;
    dtmfInfo.stringLength = 1;
    int32_t ret = g_rilInterface->SendDtmf(SLOTID_1, GetSerialId(), dtmfInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SendDtmf_1800
 * @tc.name   : testV1SendDtmf016
 * @tc.desc   : Call the function V1 SendDtmf with offLength  and a value of 1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendDtmf016, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    DtmfInfo dtmfInfo = {};
    dtmfInfo.callId = 0;
    dtmfInfo.dtmfKey = "#";
    dtmfInfo.onLength = 300;
    dtmfInfo.offLength = 1;
    dtmfInfo.stringLength = 1;
    int32_t ret = g_rilInterface->SendDtmf(SLOTID_1, GetSerialId(), dtmfInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_SEND_DTMF));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SendDtmf_1900
 * @tc.name   : testV1SendDtmf017
 * @tc.desc   : Call the function V1 SendDtmf with offLength  and a value of 300
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendDtmf018, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    DtmfInfo dtmfInfo = {};
    dtmfInfo.callId = 0;
    dtmfInfo.dtmfKey = "#";
    dtmfInfo.onLength = 300;
    dtmfInfo.offLength = 300;
    dtmfInfo.stringLength = 1;
    int32_t ret = g_rilInterface->SendDtmf(SLOTID_1, GetSerialId(), dtmfInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_SEND_DTMF));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SendDtmf_2000
 * @tc.name   : testV1SendDtmf018
 * @tc.desc   : Call the function V1 SendDtmf with offLength  and a value of 400
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendDtmf019, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    DtmfInfo dtmfInfo = {};
    dtmfInfo.callId = 0;
    dtmfInfo.dtmfKey = "#";
    dtmfInfo.onLength = 300;
    dtmfInfo.offLength = 400;
    dtmfInfo.stringLength = 1;
    int32_t ret = g_rilInterface->SendDtmf(SLOTID_1, GetSerialId(), dtmfInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SendDtmf_2100
 * @tc.name   : testV1SendDtmf019
 * @tc.desc   : Call the function V1 SendDtmf with offLength  and a value of -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendDtmf020, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    DtmfInfo dtmfInfo = {};
    dtmfInfo.callId = 0;
    dtmfInfo.dtmfKey = "#";
    dtmfInfo.onLength = 300;
    dtmfInfo.offLength = -1;
    dtmfInfo.stringLength = 1;
    int32_t ret = g_rilInterface->SendDtmf(SLOTID_1, GetSerialId(), dtmfInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SendDtmf_2200
 * @tc.name   : testV1SendDtmf020
 * @tc.desc   : Call the function V1 SendDtmf with dtmfKey and a value of #### and with stringLength and a value of 1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendDtmf021, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    DtmfInfo dtmfInfo = {};
    dtmfInfo.callId = 0;
    dtmfInfo.dtmfKey = "####";
    dtmfInfo.onLength = 300;
    dtmfInfo.offLength = 0;
    dtmfInfo.stringLength = 1;
    int32_t ret = g_rilInterface->SendDtmf(SLOTID_1, GetSerialId(), dtmfInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SendDtmf_2300
 * @tc.name   : testV1SendDtmf021
 * @tc.desc   : Call the function V1 SendDtmf with dtmfKey and a value of # and with stringLength and a value of 4
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendDtmf022, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    DtmfInfo dtmfInfo = {};
    dtmfInfo.callId = 0;
    dtmfInfo.dtmfKey = "#";
    dtmfInfo.onLength = 300;
    dtmfInfo.offLength = 0;
    dtmfInfo.stringLength = 4;
    int32_t ret = g_rilInterface->SendDtmf(SLOTID_1, GetSerialId(), dtmfInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_SEND_DTMF));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1StartDtmf_0300
 * @tc.name   : testV1StartDtmf001
 * @tc.desc   : Call the function V1 StartDtmf with slotId and a value of 2
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1StartDtmf001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    DtmfInfo dtmfInfo = {};
    dtmfInfo.callId = 0;
    dtmfInfo.dtmfKey = "#";
    int32_t ret = g_rilInterface->StartDtmf(2, GetSerialId(), dtmfInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_START_DTMF));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1StartDtmf_0400
 * @tc.name   : testV1StartDtmf002
 * @tc.desc   : Call the function V1 StartDtmf with slotId and a value of 256
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1StartDtmf002, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    DtmfInfo dtmfInfo = {};
    dtmfInfo.callId = 0;
    dtmfInfo.dtmfKey = "#";
    int32_t ret = g_rilInterface->StartDtmf(256, GetSerialId(), dtmfInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_START_DTMF));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1StartDtmf_0500
 * @tc.name   : testV1StartDtmf003
 * @tc.desc   : Call the function V1 StartDtmf with slotId and a value of -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1StartDtmf003, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    DtmfInfo dtmfInfo = {};
    dtmfInfo.callId = 0;
    dtmfInfo.dtmfKey = "#";
    int32_t ret = g_rilInterface->StartDtmf(-1, GetSerialId(), dtmfInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_START_DTMF));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1StartDtmf_0600
 * @tc.name   : testV1StartDtmf004
 * @tc.desc   : Call the function V1 StartDtmf with serialId and a value of 11111
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1StartDtmf004, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    DtmfInfo dtmfInfo = {};
    dtmfInfo.callId = 0;
    dtmfInfo.dtmfKey = "#";
    int32_t ret = g_rilInterface->StartDtmf(SLOTID_1, 11111, dtmfInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_START_DTMF));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1StartDtmf_0700
 * @tc.name   : testV1StartDtmf005
 * @tc.desc   : Call the function V1 StartDtmf with serialId and a value of 0
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1StartDtmf005, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    DtmfInfo dtmfInfo = {};
    dtmfInfo.callId = 0;
    dtmfInfo.dtmfKey = "#";
    int32_t ret = g_rilInterface->StartDtmf(SLOTID_1, 0, dtmfInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_START_DTMF));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1StartDtmf_0800
 * @tc.name   : testV1StartDtmf006
 * @tc.desc   : Call the function V1 StartDtmf with serialId and a value of -11111
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1StartDtmf006, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    DtmfInfo dtmfInfo = {};
    dtmfInfo.callId = 0;
    dtmfInfo.dtmfKey = "#";
    int32_t ret = g_rilInterface->StartDtmf(SLOTID_1, -11111, dtmfInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_START_DTMF));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1StartDtmf_0900
 * @tc.name   : testV1StartDtmf007
 * @tc.desc   : Call the function V1 StartDtmf with serialId and a value of 32768
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1StartDtmf007, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    DtmfInfo dtmfInfo = {};
    dtmfInfo.callId = 0;
    dtmfInfo.dtmfKey = "#";
    int32_t ret = g_rilInterface->StartDtmf(SLOTID_1, 32768, dtmfInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_START_DTMF));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1StartDtmf_1000
 * @tc.name   : testV1StartDtmf008
 * @tc.desc   : Call the function V1 StartDtmf with serialId and a value of -32768
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1StartDtmf008, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    DtmfInfo dtmfInfo = {};
    dtmfInfo.callId = 0;
    dtmfInfo.dtmfKey = "#";
    int32_t ret = g_rilInterface->StartDtmf(SLOTID_1, -32768, dtmfInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_START_DTMF));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1StartDtmf_1100
 * @tc.name   : testV1StartDtmf009
 * @tc.desc   : Call the function V1 StartDtmf with callId and a value of 1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1StartDtmf009, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    DtmfInfo dtmfInfo = {};
    dtmfInfo.callId = 1;
    dtmfInfo.dtmfKey = "#";
    int32_t ret = g_rilInterface->StartDtmf(SLOTID_1, GetSerialId(), dtmfInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_START_DTMF));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1StartDtmf_1200
 * @tc.name   : testV1StartDtmf010
 * @tc.desc   : Call the function V1 StartDtmf with callId and a value of -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1StartDtmf010, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    DtmfInfo dtmfInfo = {};
    dtmfInfo.callId = -1;
    dtmfInfo.dtmfKey = "#";
    int32_t ret = g_rilInterface->StartDtmf(SLOTID_1, GetSerialId(), dtmfInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1StartDtmf_1300
 * @tc.name   : testV1StartDtmf011
 * @tc.desc   : Call the function V1 StartDtmf with dtmfKey and a value of #####
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1StartDtmf011, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    DtmfInfo dtmfInfo = {};
    dtmfInfo.callId = 0;
    dtmfInfo.dtmfKey = "#####";
    int32_t ret = g_rilInterface->StartDtmf(SLOTID_1, GetSerialId(), dtmfInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_START_DTMF));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1StartDtmf_1400
 * @tc.name   : testV1StartDtmf012
 * @tc.desc   : Call the function V1 StartDtmf with dtmfKey and a value of 0
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1StartDtmf012, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    DtmfInfo dtmfInfo = {};
    dtmfInfo.callId = 0;
    dtmfInfo.dtmfKey = "0";
    int32_t ret = g_rilInterface->StartDtmf(SLOTID_1, GetSerialId(), dtmfInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_START_DTMF));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1StartDtmf_1500
 * @tc.name   : testV1StartDtmf013
 * @tc.desc   : Call the function V1 StartDtmf with dtmfKey and a value of -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1StartDtmf013, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    DtmfInfo dtmfInfo = {};
    dtmfInfo.callId = 0;
    dtmfInfo.dtmfKey = "-1";
    int32_t ret = g_rilInterface->StartDtmf(SLOTID_1, GetSerialId(), dtmfInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_START_DTMF));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1StopDtmf_0300
 * @tc.name   : testV1StopDtmf001
 * @tc.desc   : Call the function V1 StopDtmf with slotId and a value of 2
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1StopDtmf001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    DtmfInfo dtmfInfo = {};
    dtmfInfo.callId = 0;
    dtmfInfo.dtmfKey = "#";
    int32_t ret = g_rilInterface->StopDtmf(2, GetSerialId(), dtmfInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_STOP_DTMF));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1StopDtmf_0400
 * @tc.name   : testV1StopDtmf002
 * @tc.desc   : Call the function V1 StopDtmf with slotId and a value of 256
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1StopDtmf002, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    DtmfInfo dtmfInfo = {};
    dtmfInfo.callId = 0;
    dtmfInfo.dtmfKey = "#";
    int32_t ret = g_rilInterface->StopDtmf(256, GetSerialId(), dtmfInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_STOP_DTMF));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1StopDtmf_0500
 * @tc.name   : testV1StopDtmf003
 * @tc.desc   : Call the function V1 StopDtmf with slotId and a value of -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1StopDtmf003, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    DtmfInfo dtmfInfo = {};
    dtmfInfo.callId = 0;
    dtmfInfo.dtmfKey = "#";
    int32_t ret = g_rilInterface->StopDtmf(-1, GetSerialId(), dtmfInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_STOP_DTMF));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1StopDtmf_0600
 * @tc.name   : testV1StopDtmf004
 * @tc.desc   : Call the function V1 StopDtmf with serialId and a value of 11111
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1StopDtmf004, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    DtmfInfo dtmfInfo = {};
    dtmfInfo.callId = 0;
    dtmfInfo.dtmfKey = "#";
    int32_t ret = g_rilInterface->StopDtmf(SLOTID_1, 11111, dtmfInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_STOP_DTMF));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1StopDtmf_0700
 * @tc.name   : testV1StopDtmf005
 * @tc.desc   : Call the function V1 StopDtmf with serialId and a value of 0
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1StopDtmf005, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    DtmfInfo dtmfInfo = {};
    dtmfInfo.callId = 0;
    dtmfInfo.dtmfKey = "#";
    int32_t ret = g_rilInterface->StopDtmf(SLOTID_1, 0, dtmfInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_STOP_DTMF));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1StopDtmf_0800
 * @tc.name   : testV1StopDtmf006
 * @tc.desc   : Call the function V1 StopDtmf with serialId and a value of -11111
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1StopDtmf006, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    DtmfInfo dtmfInfo = {};
    dtmfInfo.callId = 0;
    dtmfInfo.dtmfKey = "#";
    int32_t ret = g_rilInterface->StopDtmf(SLOTID_1, -11111, dtmfInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_STOP_DTMF));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1StopDtmf_0900
 * @tc.name   : testV1StopDtmf007
 * @tc.desc   : Call the function V1 StopDtmf with serialId and a value of 32768
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1StopDtmf007, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    DtmfInfo dtmfInfo = {};
    dtmfInfo.callId = 0;
    dtmfInfo.dtmfKey = "#";
    int32_t ret = g_rilInterface->StopDtmf(SLOTID_1, 32768, dtmfInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_STOP_DTMF));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1StopDtmf_1000
 * @tc.name   : testV1StopDtmf008
 * @tc.desc   : Call the function V1 StopDtmf with serialId and a value of -32768
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1StopDtmf008, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    DtmfInfo dtmfInfo = {};
    dtmfInfo.callId = 0;
    dtmfInfo.dtmfKey = "#";
    int32_t ret = g_rilInterface->StopDtmf(SLOTID_1, -32768, dtmfInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_STOP_DTMF));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1StopDtmf_1100
 * @tc.name   : testV1StopDtmf009
 * @tc.desc   : Call the function V1 StopDtmf with callId and a value of 1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1StopDtmf009, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    DtmfInfo dtmfInfo = {};
    dtmfInfo.callId = 1;
    dtmfInfo.dtmfKey = "#";
    int32_t ret = g_rilInterface->StopDtmf(SLOTID_1, GetSerialId(), dtmfInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_STOP_DTMF));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1StopDtmf_1200
 * @tc.name   : testV1StopDtmf010
 * @tc.desc   : Call the function V1 StopDtmf with callId and a value of -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1StopDtmf010, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    DtmfInfo dtmfInfo = {};
    dtmfInfo.callId = -1;
    dtmfInfo.dtmfKey = "#";
    int32_t ret = g_rilInterface->StopDtmf(SLOTID_1, GetSerialId(), dtmfInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1StopDtmf_1300
 * @tc.name   : testV1StopDtmf011
 * @tc.desc   : Call the function V1 StopDtmf with dtmfKey and a value of ####
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1StopDtmf011, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    DtmfInfo dtmfInfo = {};
    dtmfInfo.callId = 0;
    dtmfInfo.dtmfKey = "####";
    int32_t ret = g_rilInterface->StopDtmf(SLOTID_1, GetSerialId(), dtmfInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_STOP_DTMF));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1StopDtmf_1400
 * @tc.name   : testV1StopDtmf012
 * @tc.desc   : Call the function V1 StopDtmf with dtmfKey and a value of 0
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1StopDtmf012, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    DtmfInfo dtmfInfo = {};
    dtmfInfo.callId = 0;
    dtmfInfo.dtmfKey = "0";
    int32_t ret = g_rilInterface->StopDtmf(SLOTID_1, GetSerialId(), dtmfInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_STOP_DTMF));
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1StopDtmf_1500
 * @tc.name   : testV1StopDtmf013
 * @tc.desc   : Call the function V1 StopDtmf with dtmfKey and a value of -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1StopDtmf013, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    DtmfInfo dtmfInfo = {};
    dtmfInfo.callId = 0;
    dtmfInfo.dtmfKey = "-1";
    int32_t ret = g_rilInterface->StopDtmf(SLOTID_1, GetSerialId(), dtmfInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_CALL_STOP_DTMF));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetSimLock_0300
 * @tc.name: testV1SetSimLock001
 * @tc.desc: SetSimLock, classx is 1, fac is AO, mode is 0
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetSimLock001, Function | MediumTest | Level1)
{
#ifdef TEL_TEST_PIN_PUK
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SimLockInfo simLockInfo;
    simLockInfo.fac = "AO";
    simLockInfo.mode = 0;
    simLockInfo.classx = 1;
    simLockInfo.passwd = "1234";
    constexpr const char *FAC_PIN_LOCK = "AO";
    int32_t ret = g_rilInterface->SetSimLock(SLOTID_1, GetSerialId(), simLockInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_SET_SIM_LOCK));
#endif
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetSimLock_0400
 * @tc.name: testV1SetSimLock002
 * @tc.desc: SetSimLock, classx is 2, fac is AO, mode is 0
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetSimLock002, Function | MediumTest | Level1)
{
#ifdef TEL_TEST_PIN_PUK
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SimLockInfo simLockInfo;
    simLockInfo.fac = "AO";
    simLockInfo.mode = 0;
    simLockInfo.classx = 2;
    simLockInfo.passwd = "1234";
    constexpr const char *FAC_PIN_LOCK = "AO";
    int32_t ret = g_rilInterface->SetSimLock(SLOTID_1, GetSerialId(), simLockInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_SET_SIM_LOCK));
#endif
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetSimLock_0500
 * @tc.name: testV1SetSimLock003
 * @tc.desc: SetSimLock, classx is 4, fac is AO, mode is 0
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetSimLock003, Function | MediumTest | Level1)
{
#ifdef TEL_TEST_PIN_PUK
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SimLockInfo simLockInfo;
    simLockInfo.fac = "AO";
    simLockInfo.mode = 0;
    simLockInfo.classx = 4;
    simLockInfo.passwd = "1234";
    constexpr const char *FAC_PIN_LOCK = "AO";
    int32_t ret = g_rilInterface->SetSimLock(SLOTID_1, GetSerialId(), simLockInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_SET_SIM_LOCK));
#endif
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetSimLock_0600
 * @tc.name: testV1SetSimLock004
 * @tc.desc: SetSimLock, classx is 8, fac is AO, mode is 0
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetSimLock004, Function | MediumTest | Level1)
{
#ifdef TEL_TEST_PIN_PUK
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SimLockInfo simLockInfo;
    simLockInfo.fac = "AO";
    simLockInfo.mode = 0;
    simLockInfo.classx = 8;
    simLockInfo.passwd = "1234";
    constexpr const char *FAC_PIN_LOCK = "AO";
    int32_t ret = g_rilInterface->SetSimLock(SLOTID_1, GetSerialId(), simLockInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_SET_SIM_LOCK));
#endif
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetSimLock_0700
 * @tc.name: testV1SetSimLock005
 * @tc.desc: SetSimLock, classx is 16, fac is AO, mode is 0
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetSimLock005, Function | MediumTest | Level1)
{
#ifdef TEL_TEST_PIN_PUK
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SimLockInfo simLockInfo;
    simLockInfo.fac = "AO";
    simLockInfo.mode = 0;
    simLockInfo.classx = 16;
    simLockInfo.passwd = "1234";
    constexpr const char *FAC_PIN_LOCK = "AO";
    int32_t ret = g_rilInterface->SetSimLock(SLOTID_1, GetSerialId(), simLockInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_SET_SIM_LOCK));
#endif
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetSimLock_0800
 * @tc.name: testV1SetSimLock006
 * @tc.desc: SetSimLock, classx is 32, fac is AO, mode is 0
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetSimLock006, Function | MediumTest | Level1)
{
#ifdef TEL_TEST_PIN_PUK
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SimLockInfo simLockInfo;
    simLockInfo.fac = "AO";
    simLockInfo.mode = 0;
    simLockInfo.classx = 32;
    simLockInfo.passwd = "1234";
    constexpr const char *FAC_PIN_LOCK = "AO";
    int32_t ret = g_rilInterface->SetSimLock(SLOTID_1, GetSerialId(), simLockInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_SET_SIM_LOCK));
#endif
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetSimLock_0900
 * @tc.name: testV1SetSimLock007
 * @tc.desc: SetSimLock, classx is 64, fac is AO, mode is 0
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetSimLock007, Function | MediumTest | Level1)
{
#ifdef TEL_TEST_PIN_PUK
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SimLockInfo simLockInfo;
    simLockInfo.fac = "AO";
    simLockInfo.mode = 0;
    simLockInfo.classx = 64;
    simLockInfo.passwd = "1234";
    constexpr const char *FAC_PIN_LOCK = "AO";
    int32_t ret = g_rilInterface->SetSimLock(SLOTID_1, GetSerialId(), simLockInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_SET_SIM_LOCK));
#endif
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetSimLock_1000
 * @tc.name: testV1SetSimLock008
 * @tc.desc: SetSimLock, classx is 128, fac is AO, mode is 0
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetSimLock008, Function | MediumTest | Level1)
{
#ifdef TEL_TEST_PIN_PUK
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SimLockInfo simLockInfo;
    simLockInfo.fac = "AO";
    simLockInfo.mode = 0;
    simLockInfo.classx = 128;
    simLockInfo.passwd = "1234";
    constexpr const char *FAC_PIN_LOCK = "AO";
    int32_t ret = g_rilInterface->SetSimLock(SLOTID_1, GetSerialId(), simLockInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_SET_SIM_LOCK));
#endif
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetSimLock_1100
 * @tc.name: testV1SetSimLock009
 * @tc.desc: SetSimLock, classx is 255, fac is AO, mode is 0
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetSimLock009, Function | MediumTest | Level1)
{
#ifdef TEL_TEST_PIN_PUK
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SimLockInfo simLockInfo;
    simLockInfo.fac = "AO";
    simLockInfo.mode = 0;
    simLockInfo.classx = 255;
    simLockInfo.passwd = "1234";
    constexpr const char *FAC_PIN_LOCK = "AO";
    int32_t ret = g_rilInterface->SetSimLock(SLOTID_1, GetSerialId(), simLockInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_SET_SIM_LOCK));
#endif
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetSimLock_1200
 * @tc.name: testV1SetSimLock010
 * @tc.desc: SetSimLock, classx is 255, fac is OI, mode is 0
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetSimLock010, Function | MediumTest | Level1)
{
#ifdef TEL_TEST_PIN_PUK
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SimLockInfo simLockInfo;
    simLockInfo.fac = "OI";
    simLockInfo.mode = 0;
    simLockInfo.classx = 255;
    simLockInfo.passwd = "1234";
    constexpr const char *FAC_PIN_LOCK = "OI";
    int32_t ret = g_rilInterface->SetSimLock(SLOTID_1, GetSerialId(), simLockInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_SET_SIM_LOCK));
#endif
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetSimLock_1300
 * @tc.name: testV1SetSimLock011
 * @tc.desc: SetSimLock, classx is 255, fac is OX, mode is 0
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetSimLock011, Function | MediumTest | Level1)
{
#ifdef TEL_TEST_PIN_PUK
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SimLockInfo simLockInfo;
    simLockInfo.fac = "OX";
    simLockInfo.mode = 0;
    simLockInfo.classx = 255;
    simLockInfo.passwd = "1234";
    constexpr const char *FAC_PIN_LOCK = "OX";
    int32_t ret = g_rilInterface->SetSimLock(SLOTID_1, GetSerialId(), simLockInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_SET_SIM_LOCK));
#endif
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetSimLock_1400
 * @tc.name: testV1SetSimLock012
 * @tc.desc: SetSimLock, classx is 255, fac is AI, mode is 0
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetSimLock012, Function | MediumTest | Level1)
{
#ifdef TEL_TEST_PIN_PUK
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SimLockInfo simLockInfo;
    simLockInfo.fac = "AI";
    simLockInfo.mode = 0;
    simLockInfo.classx = 255;
    simLockInfo.passwd = "1234";
    constexpr const char *FAC_PIN_LOCK = "AI";
    int32_t ret = g_rilInterface->SetSimLock(SLOTID_1, GetSerialId(), simLockInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_SET_SIM_LOCK));
#endif
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetSimLock_1500
 * @tc.name: testV1SetSimLock013
 * @tc.desc: SetSimLock, classx is 255, fac is IR, mode is 0
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetSimLock013, Function | MediumTest | Level1)
{
#ifdef TEL_TEST_PIN_PUK
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SimLockInfo simLockInfo;
    simLockInfo.fac = "IR";
    simLockInfo.mode = 0;
    simLockInfo.classx = 255;
    simLockInfo.passwd = "1234";
    constexpr const char *FAC_PIN_LOCK = "IR";
    int32_t ret = g_rilInterface->SetSimLock(SLOTID_1, GetSerialId(), simLockInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_SET_SIM_LOCK));
#endif
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetSimLock_1600
 * @tc.name: testV1SetSimLock014
 * @tc.desc: SetSimLock, classx is 255, fac is AB, mode is 0
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetSimLock014, Function | MediumTest | Level1)
{
#ifdef TEL_TEST_PIN_PUK
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SimLockInfo simLockInfo;
    simLockInfo.fac = "AB";
    simLockInfo.mode = 0;
    simLockInfo.classx = 255;
    simLockInfo.passwd = "1234";
    constexpr const char *FAC_PIN_LOCK = "AB";
    int32_t ret = g_rilInterface->SetSimLock(SLOTID_1, GetSerialId(), simLockInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_SET_SIM_LOCK));
#endif
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetSimLock_1700
 * @tc.name: testV1SetSimLock015
 * @tc.desc: SetSimLock, classx is 255, fac is AG, mode is 0
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetSimLock015, Function | MediumTest | Level1)
{
#ifdef TEL_TEST_PIN_PUK
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SimLockInfo simLockInfo;
    simLockInfo.fac = "AG";
    simLockInfo.mode = 0;
    simLockInfo.classx = 255;
    simLockInfo.passwd = "1234";
    constexpr const char *FAC_PIN_LOCK = "AG";
    int32_t ret = g_rilInterface->SetSimLock(SLOTID_1, GetSerialId(), simLockInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_SET_SIM_LOCK));
#endif
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetSimLock_1800
 * @tc.name: testV1SetSimLock016
 * @tc.desc: SetSimLock, classx is 255, fac is AC, mode is 0
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetSimLock016, Function | MediumTest | Level1)
{
#ifdef TEL_TEST_PIN_PUK
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SimLockInfo simLockInfo;
    simLockInfo.fac = "AC";
    simLockInfo.mode = 0;
    simLockInfo.classx = 255;
    simLockInfo.passwd = "1234";
    constexpr const char *FAC_PIN_LOCK = "AC";
    int32_t ret = g_rilInterface->SetSimLock(SLOTID_1, GetSerialId(), simLockInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_SET_SIM_LOCK));
#endif
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetSimLock_1900
 * @tc.name: testV1SetSimLock017
 * @tc.desc: SetSimLock, classx is 255, fac is FD, mode is 0
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetSimLock017, Function | MediumTest | Level1)
{
#ifdef TEL_TEST_PIN_PUK
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SimLockInfo simLockInfo;
    simLockInfo.fac = "FD";
    simLockInfo.mode = 0;
    simLockInfo.classx = 255;
    simLockInfo.passwd = "1234";
    constexpr const char *FAC_PIN_LOCK = "FD";
    int32_t ret = g_rilInterface->SetSimLock(SLOTID_1, GetSerialId(), simLockInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_SET_SIM_LOCK));
#endif
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetSimLock_2000
 * @tc.name: testV1SetSimLock018
 * @tc.desc: SetSimLock, classx is 255, fac is PN, mode is 0
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetSimLock018, Function | MediumTest | Level1)
{
#ifdef TEL_TEST_PIN_PUK
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SimLockInfo simLockInfo;
    simLockInfo.fac = "PN";
    simLockInfo.mode = 0;
    simLockInfo.classx = 255;
    simLockInfo.passwd = "1234";
    constexpr const char *FAC_PIN_LOCK = "PN";
    int32_t ret = g_rilInterface->SetSimLock(SLOTID_1, GetSerialId(), simLockInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_SET_SIM_LOCK));
#endif
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetSimLock_2100
 * @tc.name: testV1SetSimLock019
 * @tc.desc: SetSimLock, classx is 255, fac is PU, mode is 0
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetSimLock019, Function | MediumTest | Level1)
{
#ifdef TEL_TEST_PIN_PUK
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SimLockInfo simLockInfo;
    simLockInfo.fac = "PU";
    simLockInfo.mode = 0;
    simLockInfo.classx = 255;
    simLockInfo.passwd = "1234";
    constexpr const char *FAC_PIN_LOCK = "PU";
    int32_t ret = g_rilInterface->SetSimLock(SLOTID_1, GetSerialId(), simLockInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_SET_SIM_LOCK));
#endif
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetSimLock_2200
 * @tc.name: testV1SetSimLock020
 * @tc.desc: SetSimLock, classx is 255, fac is PP, mode is 0
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetSimLock020, Function | MediumTest | Level1)
{
#ifdef TEL_TEST_PIN_PUK
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SimLockInfo simLockInfo;
    simLockInfo.fac = "PP";
    simLockInfo.mode = 0;
    simLockInfo.classx = 255;
    simLockInfo.passwd = "1234";
    constexpr const char *FAC_PIN_LOCK = "PP";
    int32_t ret = g_rilInterface->SetSimLock(SLOTID_1, GetSerialId(), simLockInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_SET_SIM_LOCK));
#endif
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetSimLock_2300
 * @tc.name: testV1SetSimLock021
 * @tc.desc: SetSimLock, classx is 255, fac is OI, mode is 1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetSimLock021, Function | MediumTest | Level1)
{
#ifdef TEL_TEST_PIN_PUK
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SimLockInfo simLockInfo;
    simLockInfo.fac = "OI";
    simLockInfo.mode = 1;
    simLockInfo.classx = 255;
    simLockInfo.passwd = "1234";
    constexpr const char *FAC_PIN_LOCK = "OI";
    int32_t ret = g_rilInterface->SetSimLock(SLOTID_1, GetSerialId(), simLockInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_SET_SIM_LOCK));
#endif
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetSimLock_2400
 * @tc.name: testV1SetSimLock022
 * @tc.desc: SetSimLock, classx is 255, fac is OI, mode is 2
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetSimLock022, Function | MediumTest | Level1)
{
#ifdef TEL_TEST_PIN_PUK
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SimLockInfo simLockInfo;
    simLockInfo.fac = "OI";
    simLockInfo.mode = 2;
    simLockInfo.classx = 255;
    simLockInfo.passwd = "1234";
    constexpr const char *FAC_PIN_LOCK = "OI";
    int32_t ret = g_rilInterface->SetSimLock(SLOTID_1, GetSerialId(), simLockInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_SET_SIM_LOCK));
#endif
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetSimLock_2500
 * @tc.name: testV1SetSimLock023
 * @tc.desc: SetSimLock, classx is 255, fac is IR, mode is 2, status is 0
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetSimLock023, Function | MediumTest | Level1)
{
#ifdef TEL_TEST_PIN_PUK
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SimLockInfo simLockInfo;
    simLockInfo.fac = "IR";
    simLockInfo.mode = 2;
    simLockInfo.classx = 255;
    simLockInfo.passwd = "1234";
    simLockInfo.status = 0;
    constexpr const char *FAC_PIN_LOCK = "IR";
    int32_t ret = g_rilInterface->SetSimLock(SLOTID_1, GetSerialId(), simLockInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_SET_SIM_LOCK));
#endif
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetSimLock_2600
 * @tc.name: testV1SetSimLock024
 * @tc.desc: SetSimLock, classx is 255, fac is IR, mode is 2, status is 1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetSimLock024, Function | MediumTest | Level1)
{
#ifdef TEL_TEST_PIN_PUK
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SimLockInfo simLockInfo;
    simLockInfo.fac = "IR";
    simLockInfo.mode = 2;
    simLockInfo.classx = 255;
    simLockInfo.passwd = "1234";
    simLockInfo.status = 1;
    constexpr const char *FAC_PIN_LOCK = "IR";
    int32_t ret = g_rilInterface->SetSimLock(SLOTID_1, GetSerialId(), simLockInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_SET_SIM_LOCK));
#endif
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetSimLock_2700
 * @tc.name: testV1SetSimLock025
 * @tc.desc: SetSimLock, SerialId is -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetSimLock025, Function | MediumTest | Level2)
{
#ifdef TEL_TEST_PIN_PUK
    if (!IsReady(SLOTID_1)) {
        return;
    }
    SimLockInfo simLockInfo;
    simLockInfo.fac = "IR";
    simLockInfo.mode = 2;
    simLockInfo.classx = 255;
    simLockInfo.passwd = "1234";
    simLockInfo.status = 1;
    constexpr const char *FAC_PIN_LOCK = "IR";
    int32_t ret = g_rilInterface->SetSimLock(SLOTID_1, -1, simLockInfo);
    EXPECT_NE(SUCCESS, ret);
#endif
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetSimLock_2800
 * @tc.name: testV1SetSimLock026
 * @tc.desc: SetSimLock, classx is 1, fac is AO, mode is 0
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetSimLock026, Function | MediumTest | Level1)
{
#ifdef TEL_TEST_PIN_PUK
    if (!IsReady(SLOTID_2)) {
        return;
    }
    SimLockInfo simLockInfo;
    simLockInfo.fac = "AO";
    simLockInfo.mode = 0;
    simLockInfo.classx = 1;
    simLockInfo.passwd = "1234";
    constexpr const char *FAC_PIN_LOCK = "AO";
    int32_t ret = g_rilInterface->SetSimLock(SLOTID_2, GetSerialId(), simLockInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_SET_SIM_LOCK));
#endif
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetSimLock_2900
 * @tc.name: testV1SetSimLock027
 * @tc.desc: SetSimLock, classx is 2, fac is AO, mode is 0
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetSimLock027, Function | MediumTest | Level1)
{
#ifdef TEL_TEST_PIN_PUK
    if (!IsReady(SLOTID_2)) {
        return;
    }
    SimLockInfo simLockInfo;
    simLockInfo.fac = "AO";
    simLockInfo.mode = 0;
    simLockInfo.classx = 2;
    simLockInfo.passwd = "1234";
    constexpr const char *FAC_PIN_LOCK = "AO";
    int32_t ret = g_rilInterface->SetSimLock(SLOTID_2, GetSerialId(), simLockInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_SET_SIM_LOCK));
#endif
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetSimLock_3000
 * @tc.name: testV1SetSimLock028
 * @tc.desc: SetSimLock, classx is 4, fac is AO, mode is 0
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetSimLock028, Function | MediumTest | Level1)
{
#ifdef TEL_TEST_PIN_PUK
    if (!IsReady(SLOTID_2)) {
        return;
    }
    SimLockInfo simLockInfo;
    simLockInfo.fac = "AO";
    simLockInfo.mode = 0;
    simLockInfo.classx = 4;
    simLockInfo.passwd = "1234";
    constexpr const char *FAC_PIN_LOCK = "AO";
    int32_t ret = g_rilInterface->SetSimLock(SLOTID_2, GetSerialId(), simLockInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_SET_SIM_LOCK));
#endif
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetSimLock_3100
 * @tc.name: testV1SetSimLock029
 * @tc.desc: SetSimLock, classx is 8, fac is AO, mode is 0
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetSimLock029, Function | MediumTest | Level1)
{
#ifdef TEL_TEST_PIN_PUK
    if (!IsReady(SLOTID_2)) {
        return;
    }
    SimLockInfo simLockInfo;
    simLockInfo.fac = "AO";
    simLockInfo.mode = 0;
    simLockInfo.classx = 8;
    simLockInfo.passwd = "1234";
    constexpr const char *FAC_PIN_LOCK = "AO";
    int32_t ret = g_rilInterface->SetSimLock(SLOTID_2, GetSerialId(), simLockInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_SET_SIM_LOCK));
#endif
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetSimLock_3200
 * @tc.name: testV1SetSimLock030
 * @tc.desc: SetSimLock, classx is 16, fac is AO, mode is 0
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetSimLock030, Function | MediumTest | Level1)
{
#ifdef TEL_TEST_PIN_PUK
    if (!IsReady(SLOTID_2)) {
        return;
    }
    SimLockInfo simLockInfo;
    simLockInfo.fac = "AO";
    simLockInfo.mode = 0;
    simLockInfo.classx = 16;
    simLockInfo.passwd = "1234";
    constexpr const char *FAC_PIN_LOCK = "AO";
    int32_t ret = g_rilInterface->SetSimLock(SLOTID_2, GetSerialId(), simLockInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_SET_SIM_LOCK));
#endif
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetSimLock_3300
 * @tc.name: testV1SetSimLock031
 * @tc.desc: SetSimLock, classx is 32, fac is AO, mode is 0
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetSimLock031, Function | MediumTest | Level1)
{
#ifdef TEL_TEST_PIN_PUK
    if (!IsReady(SLOTID_2)) {
        return;
    }
    SimLockInfo simLockInfo;
    simLockInfo.fac = "AO";
    simLockInfo.mode = 0;
    simLockInfo.classx = 32;
    simLockInfo.passwd = "1234";
    constexpr const char *FAC_PIN_LOCK = "AO";
    int32_t ret = g_rilInterface->SetSimLock(SLOTID_2, GetSerialId(), simLockInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_SET_SIM_LOCK));
#endif
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetSimLock_3400
 * @tc.name: testV1SetSimLock032
 * @tc.desc: SetSimLock, classx is 64, fac is AO, mode is 0
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetSimLock032, Function | MediumTest | Level1)
{
#ifdef TEL_TEST_PIN_PUK
    if (!IsReady(SLOTID_2)) {
        return;
    }
    SimLockInfo simLockInfo;
    simLockInfo.fac = "AO";
    simLockInfo.mode = 0;
    simLockInfo.classx = 64;
    simLockInfo.passwd = "1234";
    constexpr const char *FAC_PIN_LOCK = "AO";
    int32_t ret = g_rilInterface->SetSimLock(SLOTID_2, GetSerialId(), simLockInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_SET_SIM_LOCK));
#endif
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetSimLock_3500
 * @tc.name: testV1SetSimLock033
 * @tc.desc: SetSimLock, classx is 128, fac is AO, mode is 0
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetSimLock033, Function | MediumTest | Level1)
{
#ifdef TEL_TEST_PIN_PUK
    if (!IsReady(SLOTID_2)) {
        return;
    }
    SimLockInfo simLockInfo;
    simLockInfo.fac = "AO";
    simLockInfo.mode = 0;
    simLockInfo.classx = 128;
    simLockInfo.passwd = "1234";
    constexpr const char *FAC_PIN_LOCK = "AO";
    int32_t ret = g_rilInterface->SetSimLock(SLOTID_2, GetSerialId(), simLockInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_SET_SIM_LOCK));
#endif
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetSimLock_3600
 * @tc.name: testV1SetSimLock034
 * @tc.desc: SetSimLock, classx is 255, fac is AO, mode is 0
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetSimLock034, Function | MediumTest | Level1)
{
#ifdef TEL_TEST_PIN_PUK
    if (!IsReady(SLOTID_2)) {
        return;
    }
    SimLockInfo simLockInfo;
    simLockInfo.fac = "AO";
    simLockInfo.mode = 0;
    simLockInfo.classx = 255;
    simLockInfo.passwd = "1234";
    constexpr const char *FAC_PIN_LOCK = "AO";
    int32_t ret = g_rilInterface->SetSimLock(SLOTID_2, GetSerialId(), simLockInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_SET_SIM_LOCK));
#endif
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetSimLock_3700
 * @tc.name: testV1SetSimLock035
 * @tc.desc: SetSimLock, classx is 255, fac is OI, mode is 0
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetSimLock035, Function | MediumTest | Level1)
{
#ifdef TEL_TEST_PIN_PUK
    if (!IsReady(SLOTID_2)) {
        return;
    }
    SimLockInfo simLockInfo;
    simLockInfo.fac = "OI";
    simLockInfo.mode = 0;
    simLockInfo.classx = 255;
    simLockInfo.passwd = "1234";
    constexpr const char *FAC_PIN_LOCK = "OI";
    int32_t ret = g_rilInterface->SetSimLock(SLOTID_2, GetSerialId(), simLockInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_SET_SIM_LOCK));
#endif
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetSimLock_3800
 * @tc.name: testV1SetSimLock036
 * @tc.desc: SetSimLock, classx is 255, fac is OX, mode is 0
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetSimLock036, Function | MediumTest | Level1)
{
#ifdef TEL_TEST_PIN_PUK
    if (!IsReady(SLOTID_2)) {
        return;
    }
    SimLockInfo simLockInfo;
    simLockInfo.fac = "OX";
    simLockInfo.mode = 0;
    simLockInfo.classx = 255;
    simLockInfo.passwd = "1234";
    constexpr const char *FAC_PIN_LOCK = "OX";
    int32_t ret = g_rilInterface->SetSimLock(SLOTID_2, GetSerialId(), simLockInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_SET_SIM_LOCK));
#endif
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetSimLock_3900
 * @tc.name: testV1SetSimLock037
 * @tc.desc: SetSimLock, classx is 255, fac is AI, mode is 0
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetSimLock037, Function | MediumTest | Level1)
{
#ifdef TEL_TEST_PIN_PUK
    if (!IsReady(SLOTID_2)) {
        return;
    }
    SimLockInfo simLockInfo;
    simLockInfo.fac = "AI";
    simLockInfo.mode = 0;
    simLockInfo.classx = 255;
    simLockInfo.passwd = "1234";
    constexpr const char *FAC_PIN_LOCK = "AI";
    int32_t ret = g_rilInterface->SetSimLock(SLOTID_2, GetSerialId(), simLockInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_SET_SIM_LOCK));
#endif
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetSimLock_4000
 * @tc.name: testV1SetSimLock038
 * @tc.desc: SetSimLock, classx is 255, fac is IR, mode is 0
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetSimLock038, Function | MediumTest | Level1)
{
#ifdef TEL_TEST_PIN_PUK
    if (!IsReady(SLOTID_2)) {
        return;
    }
    SimLockInfo simLockInfo;
    simLockInfo.fac = "IR";
    simLockInfo.mode = 0;
    simLockInfo.classx = 255;
    simLockInfo.passwd = "1234";
    constexpr const char *FAC_PIN_LOCK = "IR";
    int32_t ret = g_rilInterface->SetSimLock(SLOTID_2, GetSerialId(), simLockInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_SET_SIM_LOCK));
#endif
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetSimLock_4100
 * @tc.name: testV1SetSimLock039
 * @tc.desc: SetSimLock, classx is 255, fac is AB, mode is 0
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetSimLock039, Function | MediumTest | Level1)
{
#ifdef TEL_TEST_PIN_PUK
    if (!IsReady(SLOTID_2)) {
        return;
    }
    SimLockInfo simLockInfo;
    simLockInfo.fac = "AB";
    simLockInfo.mode = 0;
    simLockInfo.classx = 255;
    simLockInfo.passwd = "1234";
    constexpr const char *FAC_PIN_LOCK = "AB";
    int32_t ret = g_rilInterface->SetSimLock(SLOTID_2, GetSerialId(), simLockInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_SET_SIM_LOCK));
#endif
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetSimLock_4200
 * @tc.name: testV1SetSimLock040
 * @tc.desc: SetSimLock, classx is 255, fac is AG, mode is 0
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetSimLock040, Function | MediumTest | Level1)
{
#ifdef TEL_TEST_PIN_PUK
    if (!IsReady(SLOTID_2)) {
        return;
    }
    SimLockInfo simLockInfo;
    simLockInfo.fac = "AG";
    simLockInfo.mode = 0;
    simLockInfo.classx = 255;
    simLockInfo.passwd = "1234";
    constexpr const char *FAC_PIN_LOCK = "AG";
    int32_t ret = g_rilInterface->SetSimLock(SLOTID_2, GetSerialId(), simLockInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_SET_SIM_LOCK));
#endif
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetSimLock_4300
 * @tc.name: testV1SetSimLock041
 * @tc.desc: SetSimLock, classx is 255, fac is AC, mode is 0
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetSimLock041, Function | MediumTest | Level1)
{
#ifdef TEL_TEST_PIN_PUK
    if (!IsReady(SLOTID_2)) {
        return;
    }
    SimLockInfo simLockInfo;
    simLockInfo.fac = "AC";
    simLockInfo.mode = 0;
    simLockInfo.classx = 255;
    simLockInfo.passwd = "1234";
    constexpr const char *FAC_PIN_LOCK = "AC";
    int32_t ret = g_rilInterface->SetSimLock(SLOTID_2, GetSerialId(), simLockInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_SET_SIM_LOCK));
#endif
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetSimLock_4400
 * @tc.name: testV1SetSimLock042
 * @tc.desc: SetSimLock, classx is 255, fac is FD, mode is 0
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetSimLock042, Function | MediumTest | Level1)
{
#ifdef TEL_TEST_PIN_PUK
    if (!IsReady(SLOTID_2)) {
        return;
    }
    SimLockInfo simLockInfo;
    simLockInfo.fac = "FD";
    simLockInfo.mode = 0;
    simLockInfo.classx = 255;
    simLockInfo.passwd = "1234";
    constexpr const char *FAC_PIN_LOCK = "FD";
    int32_t ret = g_rilInterface->SetSimLock(SLOTID_2, GetSerialId(), simLockInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_SET_SIM_LOCK));
#endif
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetSimLock_4500
 * @tc.name: testV1SetSimLock043
 * @tc.desc: SetSimLock, classx is 255, fac is PN, mode is 0
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetSimLock043, Function | MediumTest | Level1)
{
#ifdef TEL_TEST_PIN_PUK
    if (!IsReady(SLOTID_2)) {
        return;
    }
    SimLockInfo simLockInfo;
    simLockInfo.fac = "PN";
    simLockInfo.mode = 0;
    simLockInfo.classx = 255;
    simLockInfo.passwd = "1234";
    constexpr const char *FAC_PIN_LOCK = "PN";
    int32_t ret = g_rilInterface->SetSimLock(SLOTID_2, GetSerialId(), simLockInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_SET_SIM_LOCK));
#endif
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetSimLock_4600
 * @tc.name: testV1SetSimLock044
 * @tc.desc: SetSimLock, classx is 255, fac is PU, mode is 0
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetSimLock044, Function | MediumTest | Level1)
{
#ifdef TEL_TEST_PIN_PUK
    if (!IsReady(SLOTID_2)) {
        return;
    }
    SimLockInfo simLockInfo;
    simLockInfo.fac = "PU";
    simLockInfo.mode = 0;
    simLockInfo.classx = 255;
    simLockInfo.passwd = "1234";
    constexpr const char *FAC_PIN_LOCK = "PU";
    int32_t ret = g_rilInterface->SetSimLock(SLOTID_2, GetSerialId(), simLockInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_SET_SIM_LOCK));
#endif
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetSimLock_4700
 * @tc.name: testV1SetSimLock045
 * @tc.desc: SetSimLock, classx is 255, fac is PP, mode is 0
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetSimLock045, Function | MediumTest | Level1)
{
#ifdef TEL_TEST_PIN_PUK
    if (!IsReady(SLOTID_2)) {
        return;
    }
    SimLockInfo simLockInfo;
    simLockInfo.fac = "PP";
    simLockInfo.mode = 0;
    simLockInfo.classx = 255;
    simLockInfo.passwd = "1234";
    constexpr const char *FAC_PIN_LOCK = "PP";
    int32_t ret = g_rilInterface->SetSimLock(SLOTID_2, GetSerialId(), simLockInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_SET_SIM_LOCK));
#endif
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetSimLock_4800
 * @tc.name: testV1SetSimLock046
 * @tc.desc: SetSimLock, classx is 255, fac is OI, mode is 1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetSimLock046, Function | MediumTest | Level1)
{
#ifdef TEL_TEST_PIN_PUK
    if (!IsReady(SLOTID_2)) {
        return;
    }
    SimLockInfo simLockInfo;
    simLockInfo.fac = "OI";
    simLockInfo.mode = 1;
    simLockInfo.classx = 255;
    simLockInfo.passwd = "1234";
    constexpr const char *FAC_PIN_LOCK = "OI";
    int32_t ret = g_rilInterface->SetSimLock(SLOTID_2, GetSerialId(), simLockInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_SET_SIM_LOCK));
#endif
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetSimLock_4900
 * @tc.name: testV1SetSimLock047
 * @tc.desc: SetSimLock, classx is 255, fac is OI, mode is 2
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetSimLock047, Function | MediumTest | Level1)
{
#ifdef TEL_TEST_PIN_PUK
    if (!IsReady(SLOTID_2)) {
        return;
    }
    SimLockInfo simLockInfo;
    simLockInfo.fac = "OI";
    simLockInfo.mode = 2;
    simLockInfo.classx = 255;
    simLockInfo.passwd = "1234";
    constexpr const char *FAC_PIN_LOCK = "OI";
    int32_t ret = g_rilInterface->SetSimLock(SLOTID_2, GetSerialId(), simLockInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_SET_SIM_LOCK));
#endif
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetSimLock_5000
 * @tc.name: testV1SetSimLock048
 * @tc.desc: SetSimLock, classx is 255, fac is IR, mode is 2, status is 0
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetSimLock048, Function | MediumTest | Level1)
{
#ifdef TEL_TEST_PIN_PUK
    if (!IsReady(SLOTID_2)) {
        return;
    }
    SimLockInfo simLockInfo;
    simLockInfo.fac = "IR";
    simLockInfo.mode = 2;
    simLockInfo.classx = 255;
    simLockInfo.passwd = "1234";
    simLockInfo.status = 0;
    constexpr const char *FAC_PIN_LOCK = "IR";
    int32_t ret = g_rilInterface->SetSimLock(SLOTID_2, GetSerialId(), simLockInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_SET_SIM_LOCK));
#endif
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetSimLock_5100
 * @tc.name: testV1SetSimLock049
 * @tc.desc: SetSimLock, classx is 255, fac is IR, mode is 2, status is 1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetSimLock049, Function | MediumTest | Level1)
{
#ifdef TEL_TEST_PIN_PUK
    if (!IsReady(SLOTID_2)) {
        return;
    }
    SimLockInfo simLockInfo;
    simLockInfo.fac = "IR";
    simLockInfo.mode = 2;
    simLockInfo.classx = 255;
    simLockInfo.passwd = "1234";
    simLockInfo.status = 1;
    constexpr const char *FAC_PIN_LOCK = "IR";
    int32_t ret = g_rilInterface->SetSimLock(SLOTID_2, GetSerialId(), simLockInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_SET_SIM_LOCK));
#endif
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetSimLock_5200
 * @tc.name: testV1SetSimLock050
 * @tc.desc: SetSimLock, SerialId is -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetSimLock050, Function | MediumTest | Level2)
{
#ifdef TEL_TEST_PIN_PUK
    if (!IsReady(SLOTID_2)) {
        return;
    }
    SimLockInfo simLockInfo;
    simLockInfo.fac = "IR";
    simLockInfo.mode = 2;
    simLockInfo.classx = 255;
    simLockInfo.passwd = "1234";
    simLockInfo.status = 1;
    constexpr const char *FAC_PIN_LOCK = "IR";
    int32_t ret = g_rilInterface->SetSimLock(SLOTID_2, -1, simLockInfo);
    EXPECT_NE(SUCCESS, ret);
#endif
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SignalStrengthUpdated_0100
 * @tc.name  : testV1SignalStrengthUpdated001
 * @tc.desc  : Call function GetSignalStrength with serialId as 1.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SignalStrengthUpdated001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    g_signalStrengthUpdatedFlag = false;
    int32_t ret = g_rilInterface->GetSignalStrength(SLOTID_1, 1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_signalStrengthUpdatedFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1NetworkPhyChnlCfgUpdated_0100
 * @tc.name  : testV1NetworkPhyChnlCfgUpdated001
 * @tc.desc  : Call function GetPhysicalChannelConfig with serialId as 1.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1NetworkPhyChnlCfgUpdated001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    g_networkPhyChnlCfgUpdatedFlag = false;
    int32_t ret = g_rilInterface->GetPhysicalChannelConfig(SLOTID_1, 1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_networkPhyChnlCfgUpdatedFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1NetworkCurrentCellUpdated_0100
 * @tc.name: testV1NetworkCurrentCellUpdated001
 * @tc.desc: GetCurrentCellInfo, SerialId is 1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1NetworkCurrentCellUpdated001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    g_networkCurrentCellUpdatedFlag = false;
    int32_t ret = g_rilInterface->GetCurrentCellInfo(SLOTID_1, 1);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_networkCurrentCellUpdatedFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1UpdateCdmaSimMessageResponse_0100
 * @tc.name  : testV1UpdateCdmaSimMessageResponse001
 * @tc.desc  : Call function UpdateCdmaSimMessageResponse with slotId is SLOTID_1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1UpdateCdmaSimMessageResponse001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    g_updateCdmaSimMessageResponseFlag = false;
    SmsMessageIOInfo msgIoInfo;
    msgIoInfo.smscPdu = TEST_CDMA_PDU;
    msgIoInfo.pdu = TEST_STORAGE_PDU;
    msgIoInfo.state = static_cast<int32_t>(SimMessageStatus::SIM_MESSAGE_STATUS_SENT);
    msgIoInfo.index = 0;
    int32_t ret = g_rilInterface->UpdateCdmaSimMessage(SLOTID_1, GetSerialId(), msgIoInfo);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_updateCdmaSimMessageResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1UpdateCdmaSimMessageResponse_0200
 * @tc.name  : testV1UpdateCdmaSimMessageResponse002
 * @tc.desc  : Call function UpdateCdmaSimMessageResponse with slotId is SLOTID_2
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1UpdateCdmaSimMessageResponse002, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    g_updateCdmaSimMessageResponseFlag = false;
    SmsMessageIOInfo msgIoInfo;
    msgIoInfo.smscPdu = TEST_CDMA_PDU;
    msgIoInfo.pdu = TEST_STORAGE_PDU;
    msgIoInfo.state = static_cast<int32_t>(SimMessageStatus::SIM_MESSAGE_STATUS_SENT);
    msgIoInfo.index = 0;
    int32_t ret = g_rilInterface->UpdateCdmaSimMessage(SLOTID_2, GetSerialId(), msgIoInfo);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_updateCdmaSimMessageResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1UpdateCdmaSimMessageResponse_0300
 * @tc.name  : testV1UpdateCdmaSimMessageResponse003
 * @tc.desc  : Call function UpdateCdmaSimMessageResponse with slotId is SLOTID_1 SerialId is -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1UpdateCdmaSimMessageResponse003, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    g_updateCdmaSimMessageResponseFlag = false;
    SmsMessageIOInfo msgIoInfo;
    msgIoInfo.smscPdu = TEST_CDMA_PDU;
    msgIoInfo.pdu = TEST_STORAGE_PDU;
    msgIoInfo.state = static_cast<int32_t>(SimMessageStatus::SIM_MESSAGE_STATUS_SENT);
    msgIoInfo.index = 0;
    int32_t ret = g_rilInterface->UpdateCdmaSimMessage(SLOTID_1, -1, msgIoInfo);
    EXPECT_NE(SUCCESS, ret);
    EXPECT_EQ(false, g_updateCdmaSimMessageResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1UpdateCdmaSimMessageResponse_0400
 * @tc.name  : testV1UpdateCdmaSimMessageResponse004
 * @tc.desc  : Call function UpdateCdmaSimMessageResponse with slotId is SLOTID_2 SerialId is -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1UpdateCdmaSimMessageResponse004, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    g_updateCdmaSimMessageResponseFlag = false;
    SmsMessageIOInfo msgIoInfo;
    msgIoInfo.smscPdu = TEST_CDMA_PDU;
    msgIoInfo.pdu = TEST_STORAGE_PDU;
    msgIoInfo.state = static_cast<int32_t>(SimMessageStatus::SIM_MESSAGE_STATUS_SENT);
    msgIoInfo.index = 0;
    int32_t ret = g_rilInterface->UpdateCdmaSimMessage(SLOTID_2, -1, msgIoInfo);
    EXPECT_NE(SUCCESS, ret);
    EXPECT_EQ(false, g_updateCdmaSimMessageResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetSmscAddrResponse_0100
 * @tc.name  : testV1SetSmscAddrResponse001
 * @tc.desc  : Call function SetSmscAddrResponse with slotId is SLOTID_1.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetSmscAddrResponse001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    g_setSmscAddrResponseFlag = false;
    ServiceCenterAddress address;
    address.address = TEST_SMSC_ADDR;
    address.tosca = 0;
    int32_t ret = g_rilInterface->SetSmscAddr(SLOTID_1, GetSerialId(), address);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_setSmscAddrResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetSmscAddrResponse_0200
 * @tc.name  : testV1SetSmscAddrResponse002
 * @tc.desc  : Call function SetSmscAddrResponse with slotId is SLOTID_2.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetSmscAddrResponse002, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    g_setSmscAddrResponseFlag = false;
    ServiceCenterAddress address;
    address.address = TEST_SMSC_ADDR;
    address.tosca = 0;
    int32_t ret = g_rilInterface->SetSmscAddr(SLOTID_2, GetSerialId(), address);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_setSmscAddrResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetSmscAddrResponse_0300
 * @tc.name  : testV1SetSmscAddrResponse003
 * @tc.desc  : Call function SetSmscAddrResponse with slotId is SLOTID_1 SerialId is -1.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetSmscAddrResponse003, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    g_setSmscAddrResponseFlag = false;
    ServiceCenterAddress address;
    address.address = TEST_SMSC_ADDR;
    address.tosca = 0;
    int32_t ret = g_rilInterface->SetSmscAddr(SLOTID_1, -1, address);
    EXPECT_NE(SUCCESS, ret);
    EXPECT_EQ(false, g_setSmscAddrResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetSmscAddrResponse_0400
 * @tc.name  : testV1SetSmscAddrResponse004
 * @tc.desc  : Call function SetSmscAddrResponse with slotId is SLOTID_2 SerialId is -1.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetSmscAddrResponse004, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    g_setSmscAddrResponseFlag = false;
    ServiceCenterAddress address;
    address.address = TEST_SMSC_ADDR;
    address.tosca = 0;
    int32_t ret = g_rilInterface->SetSmscAddr(SLOTID_2, -1, address);
    EXPECT_NE(SUCCESS, ret);
    EXPECT_EQ(false, g_setSmscAddrResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetSmscAddrResponse_0100
 * @tc.name  : testV1GetSmscAddrResponse001
 * @tc.desc  : Call function GetSmscAddrResponse with slotId is SLOTID_1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetSmscAddrResponse001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    g_getSmscAddrResponseFlag = false;
    int32_t ret = g_rilInterface->GetSmscAddr(SLOTID_1, GetSerialId());
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_getSmscAddrResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetSmscAddrResponse_0200
 * @tc.name  : testV1GetSmscAddrResponse002
 * @tc.desc  : Call function GetSmscAddrResponse with slotId is SLOTID_2
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetSmscAddrResponse002, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    g_getSmscAddrResponseFlag = false;
    int32_t ret = g_rilInterface->GetSmscAddr(SLOTID_2, GetSerialId());
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_getSmscAddrResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetSmscAddrResponse_0300
 * @tc.name  : testV1GetSmscAddrResponse003
 * @tc.desc  : Call function GetSmscAddrResponse with slotId is SLOTID_1 SerialId is -1.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetSmscAddrResponse003, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    g_getSmscAddrResponseFlag = false;
    int32_t ret = g_rilInterface->GetSmscAddr(SLOTID_1, -1);
    EXPECT_NE(SUCCESS, ret);
    EXPECT_EQ(false, g_getSmscAddrResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetSmscAddrResponse_0400
 * @tc.name  : testV1GetSmscAddrResponse004
 * @tc.desc  : Call function GetSmscAddrResponse with slotId is SLOTID_2 SerialId is -1.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetSmscAddrResponse004, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    g_getSmscAddrResponseFlag = false;
    int32_t ret = g_rilInterface->GetSmscAddr(SLOTID_2, -1);
    EXPECT_NE(SUCCESS, ret);
    EXPECT_EQ(false, g_getSmscAddrResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetCBConfigResponse_0100
 * @tc.name  : testV1SetCBConfigResponse001
 * @tc.desc  : Call function SetCBConfigResponse with slotId is SLOTID_1.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetCBConfigResponse001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    g_setCBConfigResponseFlag = false;
    CBConfigInfo info;
    info.mode = 255;
    info.mids = TEST_ID_LIST;
    info.dcss = TEST_DCS_LIST;
    int32_t ret = g_rilInterface->SetCBConfig(SLOTID_1, GetSerialId(), info);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_setCBConfigResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetCBConfigResponse_0200
 * @tc.name  : testV1SetCBConfigResponse002
 * @tc.desc  : Call function SetCBConfigResponse with slotId is SLOTID_2.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetCBConfigResponse002, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    g_setCBConfigResponseFlag = false;
    CBConfigInfo info;
    info.mode = 255;
    info.mids = TEST_ID_LIST;
    info.dcss = TEST_DCS_LIST;
    int32_t ret = g_rilInterface->SetCBConfig(SLOTID_2, GetSerialId(), info);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_setCBConfigResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetCBConfigResponse_0300
 * @tc.name  : testV1SetCBConfigResponse003
 * @tc.desc  : Call function SetCBConfigResponse with slotId is SLOTID_1 SerialId is -1.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetCBConfigResponse003, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    g_setCBConfigResponseFlag = false;
    CBConfigInfo info;
    info.mode = 255;
    info.mids = TEST_ID_LIST;
    info.dcss = TEST_DCS_LIST;
    int32_t ret = g_rilInterface->SetCBConfig(SLOTID_1, -1, info);
    EXPECT_NE(SUCCESS, ret);
    EXPECT_EQ(false, g_setCBConfigResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetCBConfigResponse_0400
 * @tc.name  : testV1SetCBConfigResponse004
 * @tc.desc  : Call function SetCBConfigResponse with slotId is SLOTID_2 SerialId is -1.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetCBConfigResponse004, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    g_setCBConfigResponseFlag = false;
    CBConfigInfo info;
    info.mode = 255;
    info.mids = TEST_ID_LIST;
    info.dcss = TEST_DCS_LIST;
    int32_t ret = g_rilInterface->SetCBConfig(SLOTID_2, -1, info);
    EXPECT_NE(SUCCESS, ret);
    EXPECT_EQ(false, g_setCBConfigResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetCBConfigResponse_0100
 * @tc.name  : testV1GetCBConfigResponse001
 * @tc.desc  : Call function GetCBConfigResponse with slotId is SLOTID_1.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetCBConfigResponse001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    g_getCBConfigResponseFlag = false;
    int32_t ret = g_rilInterface->GetCBConfig(SLOTID_1, GetSerialId());
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_getCBConfigResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetCBConfigResponse_0200
 * @tc.name  : testV1GetCBConfigResponse002
 * @tc.desc  : Call function GetCBConfigResponse with slotId is SLOTID_2.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetCBConfigResponse002, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    g_getCBConfigResponseFlag = false;
    int32_t ret = g_rilInterface->GetCBConfig(SLOTID_2, GetSerialId());
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_getCBConfigResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetCBConfigResponse_0300
 * @tc.name  : testV1GetCBConfigResponse003
 * @tc.desc  : Call function GetCBConfigResponse with slotId is SLOTID_1 SerialId is -1.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetCBConfigResponse003, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    g_getCBConfigResponseFlag = false;
    int32_t ret = g_rilInterface->GetCBConfig(SLOTID_1, -1);
    EXPECT_NE(SUCCESS, ret);
    EXPECT_EQ(false, g_getCBConfigResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetCBConfigResponse_0400
 * @tc.name  : testV1GetCBConfigResponse004
 * @tc.desc  : Call function GetCBConfigResponse with slotId is SLOTID_2 SerialId is -1.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetCBConfigResponse004, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    g_getCBConfigResponseFlag = false;
    int32_t ret = g_rilInterface->GetCBConfig(SLOTID_2, -1);
    EXPECT_NE(SUCCESS, ret);
    EXPECT_EQ(false, g_getCBConfigResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetSmscAddr_0300
 * @tc.name  : testV1GetSmscAddr001
 * @tc.desc  : Call function GetSmscAddr with SerialId is 1.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetSmscAddr001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->GetSmscAddr(SLOTID_1, 1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SMS_GET_SMSC_ADDR));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetSmscAddr_0400
 * @tc.name  : testV1GetSmscAddr002
 * @tc.desc  : Call function GetSmscAddr with SerialId is 0.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetSmscAddr002, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->GetSmscAddr(SLOTID_1, 0);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SMS_GET_SMSC_ADDR));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetSmscAddr_0500
 * @tc.name  : testV1GetSmscAddr003
 * @tc.desc  : Call function GetSmscAddr with SerialId is -1.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetSmscAddr003, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->GetSmscAddr(SLOTID_1, -1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetSmscAddr_0600
 * @tc.name  : testV1GetSmscAddr004
 * @tc.desc  : Call function GetSmscAddr with SerialId is 1000000001.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetSmscAddr004, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->GetSmscAddr(SLOTID_1, 1000000001);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SMS_GET_SMSC_ADDR));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetSmscAddr_0700
 * @tc.name  : testV1GetSmscAddr005
 * @tc.desc  : Call function GetSmscAddr with SerialId is 1.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetSmscAddr005, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t ret = g_rilInterface->GetSmscAddr(SLOTID_2, 1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SMS_GET_SMSC_ADDR));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetSmscAddr_0800
 * @tc.name  : testV1GetSmscAddr006
 * @tc.desc  : Call function GetSmscAddr with SerialId is 0.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetSmscAddr006, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t ret = g_rilInterface->GetSmscAddr(SLOTID_2, 0);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SMS_GET_SMSC_ADDR));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetSmscAddr_0900
 * @tc.name  : testV1GetSmscAddr007
 * @tc.desc  : Call function GetSmscAddr with SerialId is -1.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetSmscAddr007, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t ret = g_rilInterface->GetSmscAddr(SLOTID_2, -1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetSmscAddr_1000
 * @tc.name  : testV1GetSmscAddr008
 * @tc.desc  : Call function GetSmscAddr with SerialId is 1000000001.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetSmscAddr008, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t ret = g_rilInterface->GetSmscAddr(SLOTID_2, 1000000001);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SMS_GET_SMSC_ADDR));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetSmscAddr_1100
 * @tc.name  : testV1GetSmscAddr009
 * @tc.desc  : Call function GetSmscAddr with SLOTID_1 SerialId is 1 1000times.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetSmscAddr009, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = 0;
    for (int i = 0; i < 1000; i++) {
        ret = g_rilInterface->GetSmscAddr(SLOTID_1, 1);
        WaitFor(WAIT_TIME_SECOND);
        EXPECT_EQ(SUCCESS, ret);
        ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SMS_GET_SMSC_ADDR));
    }
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetSmscAddr_1200
 * @tc.name  : testV1GetSmscAddr010
 * @tc.desc  : Call function GetSmscAddr with SLOTID_2 SerialId is 1 1000times..
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetSmscAddr010, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t ret = 0;
    for (int i = 0; i < 1000; i++) {
        ret = g_rilInterface->GetSmscAddr(SLOTID_2, 1);
        WaitFor(WAIT_TIME_SECOND);
        EXPECT_EQ(SUCCESS, ret);
        ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SMS_GET_SMSC_ADDR));
    }
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetLinkBandwidthInfo_0300
 * @tc.name  : testV1GetLinkBandwidthInfo001
 * @tc.desc  : Call function GetLinkBandwidthInfo with slotId is SLOTID_1 SerialId is -1.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetLinkBandwidthInfo001, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->GetLinkBandwidthInfo(SLOTID_1, -1, 1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetLinkBandwidthInfo_0400
 * @tc.name  : testV1GetLinkBandwidthInfo002
 * @tc.desc  : Call function GetLinkBandwidthInfo with slotId is SLOTID_1 SerialId is 0.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetLinkBandwidthInfo002, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->GetLinkBandwidthInfo(SLOTID_1, 0, 1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_DATA_GET_LINK_BANDWIDTH_INFO));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetLinkBandwidthInfo_0500
 * @tc.name  : testV1GetLinkBandwidthInfo003
 * @tc.desc  : Call function GetLinkBandwidthInfo with slotId is SLOTID_1 SerialId is 1.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetLinkBandwidthInfo003, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->GetLinkBandwidthInfo(SLOTID_1, 1, 1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_DATA_GET_LINK_BANDWIDTH_INFO));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetLinkBandwidthInfo_0600
 * @tc.name  : testV1GetLinkBandwidthInfo004
 * @tc.desc  : Call function GetLinkBandwidthInfo with slotId is SLOTID_1 SerialId is 1000000001.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetLinkBandwidthInfo004, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->GetLinkBandwidthInfo(SLOTID_1, 1000000001, 1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_DATA_GET_LINK_BANDWIDTH_INFO));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetLinkBandwidthInfo_0700
 * @tc.name  : testV1GetLinkBandwidthInfo005
 * @tc.desc  : Call function GetLinkBandwidthInfo with slotId is SLOTID_2 SerialId is -1.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetLinkBandwidthInfo005, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t ret = g_rilInterface->GetLinkBandwidthInfo(SLOTID_2, -1, 1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetLinkBandwidthInfo_0800
 * @tc.name  : testV1GetLinkBandwidthInfo006
 * @tc.desc  : Call function GetLinkBandwidthInfo with slotId is SLOTID_2 SerialId is 0.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetLinkBandwidthInfo006, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t ret = g_rilInterface->GetLinkBandwidthInfo(SLOTID_2, 0, 1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_DATA_GET_LINK_BANDWIDTH_INFO));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetLinkBandwidthInfo_0900
 * @tc.name  : testV1GetLinkBandwidthInfo007
 * @tc.desc  : Call function GetLinkBandwidthInfo with slotId is SLOTID_2 SerialId is 1.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetLinkBandwidthInfo007, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t ret = g_rilInterface->GetLinkBandwidthInfo(SLOTID_2, 1, 1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_DATA_GET_LINK_BANDWIDTH_INFO));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetLinkBandwidthInfo_1000
 * @tc.name  : testV1GetLinkBandwidthInfo008
 * @tc.desc  : Call function GetLinkBandwidthInfo with slotId is SLOTID_2 SerialId is 1000000001.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetLinkBandwidthInfo008, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t ret = g_rilInterface->GetLinkBandwidthInfo(SLOTID_2, 1000000001, 1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_DATA_GET_LINK_BANDWIDTH_INFO));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetLinkBandwidthInfo_1100
 * @tc.name  : testV1GetLinkBandwidthInfo009
 * @tc.desc  : Call function GetLinkBandwidthInfo 100 times.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetLinkBandwidthInfo009, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = 1;
    for (int i = 0; i < 100; i++) {
        ret = g_rilInterface->GetLinkBandwidthInfo(SLOTID_1, GetSerialId(), 1);
        WaitFor(WAIT_TIME_SECOND);
        EXPECT_EQ(SUCCESS, ret);
        ASSERT_TRUE(GetBoolResult(HdiId::HREQ_DATA_GET_LINK_BANDWIDTH_INFO));
    }
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetLinkCapability_0300
 * @tc.name  : testV1GetLinkCapability001
 * @tc.desc  : Call function GetLinkCapability with slotId is SLOTID_1 SerialId is -1.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetLinkCapability001, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->GetLinkCapability(SLOTID_1, -1);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetLinkCapability_0400
 * @tc.name  : testV1GetLinkCapability002
 * @tc.desc  : Call function GetLinkCapability with slotId is SLOTID_1 SerialId is 0.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetLinkCapability002, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->GetLinkCapability(SLOTID_1, 0);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetLinkCapability_0500
 * @tc.name  : testV1GetLinkCapability003
 * @tc.desc  : Call function GetLinkCapability with slotId is SLOTID_1 SerialId is 1.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetLinkCapability003, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->GetLinkCapability(SLOTID_1, 1);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetLinkCapability_0600
 * @tc.name  : testV1GetLinkCapability004
 * @tc.desc  : Call function GetLinkCapability with slotId is SLOTID_1 SerialId is 1000000001.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetLinkCapability004, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->GetLinkCapability(SLOTID_1, 1000000001);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetLinkCapability_0700
 * @tc.name  : testV1GetLinkCapability005
 * @tc.desc  : Call function GetLinkCapability with slotId is SLOTID_2 SerialId is -1.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetLinkCapability005, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t ret = g_rilInterface->GetLinkCapability(SLOTID_2, -1);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetLinkCapability_0800
 * @tc.name  : testV1GetLinkCapability006
 * @tc.desc  : Call function GetLinkCapability with slotId is SLOTID_2 SerialId is 0.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetLinkCapability006, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t ret = g_rilInterface->GetLinkCapability(SLOTID_2, 0);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetLinkCapability_0900
 * @tc.name  : testV1GetLinkCapability007
 * @tc.desc  : Call function GetLinkCapability with slotId is SLOTID_2 SerialId is 1.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetLinkCapability007, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t ret = g_rilInterface->GetLinkCapability(SLOTID_2, 1);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetLinkCapability_1000
 * @tc.name  : testV1GetLinkCapability008
 * @tc.desc  : Call function GetLinkCapability with slotId is SLOTID_2 SerialId is 1000000001.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetLinkCapability008, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t ret = g_rilInterface->GetLinkCapability(SLOTID_2, 1000000001);
    EXPECT_EQ(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetLinkCapability_1100
 * @tc.name  : testV1GetLinkCapability009
 * @tc.desc  : Call function GetLinkCapability 100 times.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetLinkCapability009, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = 0;
    for (int i = 0; i < 100; i++) {
        ret = g_rilInterface->GetLinkCapability(SLOTID_1, GetSerialId());
        EXPECT_EQ(SUCCESS, ret);
    }
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetSmscAddr_0300
 * @tc.name  : testV1SetSmscAddr001
 * @tc.desc  : Call function SetSmscAddr SerialId is 1.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetSmscAddr001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    ServiceCenterAddress address;
    address.address = TEST_SMSC_ADDR;
    address.tosca = 0;
    int32_t ret = g_rilInterface->SetSmscAddr(SLOTID_1, 1, address);
    WaitFor(WAIT_TIME_SECOND_LONG);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SMS_SET_SMSC_ADDR));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetSmscAddr_0400
 * @tc.name  : testV1SetSmscAddr002
 * @tc.desc  : Call function SetSmscAddr SerialId is 0.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetSmscAddr002, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    ServiceCenterAddress address;
    address.address = TEST_SMSC_ADDR;
    address.tosca = 0;
    int32_t ret = g_rilInterface->SetSmscAddr(SLOTID_1, 0, address);
    WaitFor(WAIT_TIME_SECOND_LONG);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SMS_SET_SMSC_ADDR));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetSmscAddr_0500
 * @tc.name  : testV1SetSmscAddr003
 * @tc.desc  : Call function SetSmscAddr SerialId is -1.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetSmscAddr003, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    ServiceCenterAddress address;
    address.address = TEST_SMSC_ADDR;
    address.tosca = 0;
    int32_t ret = g_rilInterface->SetSmscAddr(SLOTID_1, -1, address);
    WaitFor(WAIT_TIME_SECOND_LONG);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetSmscAddr_0600
 * @tc.name  : testV1SetSmscAddr004
 * @tc.desc  : Call function SetSmscAddr SerialId is 1000000001.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetSmscAddr004, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    ServiceCenterAddress address;
    address.address = TEST_SMSC_ADDR;
    address.tosca = 0;
    int32_t ret = g_rilInterface->SetSmscAddr(SLOTID_1, 1000000001, address);
    WaitFor(WAIT_TIME_SECOND_LONG);
    EXPECT_NE(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SMS_SET_SMSC_ADDR));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetSmscAddr_0700
 * @tc.name  : testV1SetSmscAddr005
 * @tc.desc  : Call function SetSmscAddr Slotid is SLOTID_2 SerialId is 1.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetSmscAddr005, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    ServiceCenterAddress address;
    address.address = TEST_SMSC_ADDR;
    address.tosca = 0;
    int32_t ret = g_rilInterface->SetSmscAddr(SLOTID_2, 1, address);
    WaitFor(WAIT_TIME_SECOND_LONG);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SMS_SET_SMSC_ADDR));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetSmscAddr_0800
 * @tc.name  : testV1SetSmscAddr006
 * @tc.desc  : Call function SetSmscAddr Slotid is SLOTID_2 SerialId is 0.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetSmscAddr006, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    ServiceCenterAddress address;
    address.address = TEST_SMSC_ADDR;
    address.tosca = 0;
    int32_t ret = g_rilInterface->SetSmscAddr(SLOTID_2, 0, address);
    WaitFor(WAIT_TIME_SECOND_LONG);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SMS_SET_SMSC_ADDR));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetSmscAddr_0900
 * @tc.name  : testV1SetSmscAddr007
 * @tc.desc  : Call function SetSmscAddr Slotid is SLOTID_2 SerialId is -1.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetSmscAddr007, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    ServiceCenterAddress address;
    address.address = TEST_SMSC_ADDR;
    address.tosca = 0;
    int32_t ret = g_rilInterface->SetSmscAddr(SLOTID_2, -1, address);
    WaitFor(WAIT_TIME_SECOND_LONG);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetSmscAddr_1000
 * @tc.name  : testV1SetSmscAddr008
 * @tc.desc  : Call function SetSmscAddr SerialId is 1000000001.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetSmscAddr008, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    ServiceCenterAddress address;
    address.address = TEST_SMSC_ADDR;
    address.tosca = 0;
    int32_t ret = g_rilInterface->SetSmscAddr(SLOTID_2, 1000000001, address);
    WaitFor(WAIT_TIME_SECOND_LONG);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SMS_SET_SMSC_ADDR));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetSmscAddr_1100
 * @tc.name  : testV1SetSmscAddr009
 * @tc.desc  : Call function SetSmscAddr 1000 times Slotid is SLOTID_1.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetSmscAddr009, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    ServiceCenterAddress address;
    address.address = TEST_SMSC_ADDR;
    address.tosca = 0;
    int32_t ret = 0;
    for (int i = 0; i < 1000; i++) {
        ret = g_rilInterface->SetSmscAddr(SLOTID_1, 1000000001, address);
        WaitFor(WAIT_TIME_SECOND_LONG);
        EXPECT_EQ(SUCCESS, ret);
        ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SMS_SET_SMSC_ADDR));
    }
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetSmscAddr_1200
 * @tc.name  : testV1SetSmscAddr010
 * @tc.desc  : Call function SetSmscAddr 1000 times Slotid is SLOTID_2.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetSmscAddr010, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    ServiceCenterAddress address;
    address.address = TEST_SMSC_ADDR;
    address.tosca = 0;
    int32_t ret = 0;
    for (int i = 0; i < 1000; i++) {
        ret = g_rilInterface->SetSmscAddr(SLOTID_2, 1000000001, address);
        WaitFor(WAIT_TIME_SECOND_LONG);
        EXPECT_EQ(SUCCESS, ret);
        ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SMS_SET_SMSC_ADDR));
    }
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SetCallTransferInfoResponse_0100
 * @tc.name   : testV1SetCallTransferInfoResponse001
 * @tc.desc   : Call the function V1 SetCallTransferInfoResponse with slotId and a value of SLOTID_1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetCallTransferInfoResponse001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    g_setCallTransferInfoResponseFlag = false;
    CallForwardSetInfo callForwardSetInfo = {};
    callForwardSetInfo.reason = 1;
    callForwardSetInfo.mode = 1;
    callForwardSetInfo.classx = 1;
    callForwardSetInfo.number = "10086";
    int32_t ret = g_rilInterface->SetCallTransferInfo(SLOTID_1, GetSerialId(), callForwardSetInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_setCallTransferInfoResponseFlag);
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SetCallTransferInfoResponse_0200
 * @tc.name   : testV1SetCallTransferInfoResponse002
 * @tc.desc   : Call the function V1 SetCallTransferInfoResponse with slotId and a value of SLOTID_2
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetCallTransferInfoResponse002, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    g_setCallTransferInfoResponseFlag = false;
    CallForwardSetInfo callForwardSetInfo = {};
    callForwardSetInfo.reason = 1;
    callForwardSetInfo.mode = 1;
    callForwardSetInfo.classx = 1;
    callForwardSetInfo.number = "10086";
    int32_t ret = g_rilInterface->SetCallTransferInfo(SLOTID_2, GetSerialId(), callForwardSetInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_setCallTransferInfoResponseFlag);
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1GetCallRestriction_0100
 * @tc.name   : testV1GetCallRestrictionResponse001
 * @tc.desc   : Call the function V1 GetCallRestrictionResponse with slotId  and a value of SLOTID_1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetCallRestrictionResponse001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    g_getCallRestrictionResponseFlag = false;
    std::string fac = "AO";
    int32_t ret = g_rilInterface->GetCallRestriction(SLOTID_1, GetSerialId(), fac);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_getCallRestrictionResponseFlag);
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1GetCallRestriction_0200
 * @tc.name   : testV1GetCallRestrictionResponse002
 * @tc.desc   : Call the function V1 GetCallRestrictionResponse with slotId  and a value of SLOTID_2
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetCallRestrictionResponse002, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    g_getCallRestrictionResponseFlag = false;
    std::string fac = "AO";
    int32_t ret = g_rilInterface->GetCallRestriction(SLOTID_2, GetSerialId(), fac);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_getCallRestrictionResponseFlag);
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SetCallRestrictionResponse_0100
 * @tc.name   : testV1SetCallRestrictionResponse001
 * @tc.desc   : Call the function V1 SetCallRestrictionResponse with slotId  and a value of SLOTID_1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetCallRestrictionResponse001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    g_setCallRestrictionResponseFlag = false;
    CallRestrictionInfo callRestrictionInfo = {};
    callRestrictionInfo.fac = "AO";
    callRestrictionInfo.mode = 1;
    callRestrictionInfo.password = "123456";
    int32_t ret = g_rilInterface->SetCallRestriction(SLOTID_1, GetSerialId(), callRestrictionInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_setCallRestrictionResponseFlag);
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SetCallRestrictionResponse_0200
 * @tc.name   : testV1SetCallRestrictionResponse002
 * @tc.desc   : Call the function V1 SetCallRestrictionResponse with slotId  and a value of SLOTID_2
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetCallRestrictionResponse002, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    g_setCallRestrictionResponseFlag = false;
    CallRestrictionInfo callRestrictionInfo = {};
    callRestrictionInfo.fac = "AO";
    callRestrictionInfo.mode = 1;
    callRestrictionInfo.password = "123456";
    int32_t ret = g_rilInterface->SetCallRestriction(SLOTID_2, GetSerialId(), callRestrictionInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_setCallRestrictionResponseFlag);
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1GetClirResponse_0100
 * @tc.name   : testV1GetClirResponse001
 * @tc.desc   : Call the function V1 GetClirResponse with slotId  and a value of SLOTID_1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetClirResponse001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    g_getClirResponseFlag = false;
    int32_t ret = g_rilInterface->GetClir(SLOTID_1, GetSerialId());
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_getClirResponseFlag);
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1GetClirResponse_0200
 * @tc.name   : testV1GetClirResponse002
 * @tc.desc   : Call the function V1 GetClirResponse with slotId  and a value of SLOTID_2
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetClirResponse002, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    g_getClirResponseFlag = false;
    int32_t ret = g_rilInterface->GetClir(SLOTID_2, GetSerialId());
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_getClirResponseFlag);
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SetClir_0100
 * @tc.name   : testV1SetClirResponse001
 * @tc.desc   : Call the function V1 SetClirResponse with slotId  and a value of SLOTID_1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetClirResponse001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    g_setClirResponseFlag = false;
    int32_t ret = g_rilInterface->SetClir(SLOTID_1, GetSerialId(), 1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_setClirResponseFlag);
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SetClir_0200
 * @tc.name   : testV1SetClirResponse002
 * @tc.desc   : Call the function V1 SetClirResponse with slotId  and a value of SLOTID_2
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetClirResponse002, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    g_setClirResponseFlag = false;
    int32_t ret = g_rilInterface->SetClir(SLOTID_2, GetSerialId(), 1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_setClirResponseFlag);
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1StartDtmfResponse_0100
 * @tc.name   : testV1StartDtmfResponse001
 * @tc.desc   : Call the function V1 StartDtmfResponse with slotId and a value of SLOTID_1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1StartDtmfResponse001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    g_startDtmfResponseFlag = false;
    DtmfInfo dtmfInfo = {};
    dtmfInfo.callId = 0;
    dtmfInfo.dtmfKey = "#";
    int32_t ret = g_rilInterface->StartDtmf(SLOTID_1, GetSerialId(), dtmfInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_startDtmfResponseFlag);
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1StartDtmfResponse_0200
 * @tc.name   : testV1StartDtmfResponse002
 * @tc.desc   : Call the function V1 StartDtmfResponse with slotId and a value of SLOTID_2
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1StartDtmfResponse002, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    g_startDtmfResponseFlag = false;
    DtmfInfo dtmfInfo = {};
    dtmfInfo.callId = 0;
    dtmfInfo.dtmfKey = "#";
    int32_t ret = g_rilInterface->StartDtmf(SLOTID_2, GetSerialId(), dtmfInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_startDtmfResponseFlag);
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SendDtmfResponse_0100
 * @tc.name   : testV1SendDtmfResponse001
 * @tc.desc   : Call the function V1 SendDtmfResponse with slotId  and a value of SLOTID_1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendDtmfResponse001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    g_sendDtmfResponseFlag = false;
    DtmfInfo dtmfInfo = {};
    dtmfInfo.callId = 0;
    dtmfInfo.dtmfKey = "#";
    dtmfInfo.onLength = 300;
    dtmfInfo.offLength = 0;
    dtmfInfo.stringLength = 1;
    int32_t ret = g_rilInterface->SendDtmf(SLOTID_1, GetSerialId(), dtmfInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_sendDtmfResponseFlag);
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SendDtmfResponse_0200
 * @tc.name   : testV1SendDtmfResponse002
 * @tc.desc   : Call the function V1 SendDtmfResponse with slotId  and a value of SLOTID_2
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SendDtmfResponse002, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    g_sendDtmfResponseFlag = false;
    DtmfInfo dtmfInfo = {};
    dtmfInfo.callId = 0;
    dtmfInfo.dtmfKey = "#";
    dtmfInfo.onLength = 300;
    dtmfInfo.offLength = 0;
    dtmfInfo.stringLength = 1;
    int32_t ret = g_rilInterface->SendDtmf(SLOTID_2, GetSerialId(), dtmfInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_sendDtmfResponseFlag);
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1StopDtmfResponse_0100
 * @tc.name   : testV1StopDtmfResponse001
 * @tc.desc   : Call the function V1 StopDtmfResponse with slotId and a value of SLOTID_1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1StopDtmfResponse001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    g_stopDtmfResponseFlag = false;
    DtmfInfo dtmfInfo = {};
    dtmfInfo.callId = 0;
    dtmfInfo.dtmfKey = "#";
    int32_t ret = g_rilInterface->StopDtmf(SLOTID_1, GetSerialId(), dtmfInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_stopDtmfResponseFlag);
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1StopDtmfResponse_0200
 * @tc.name   : testV1StopDtmfResponse002
 * @tc.desc   : Call the function V1 StopDtmfResponse with slotId and a value of SLOTID_2
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1StopDtmfResponse002, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    g_stopDtmfResponseFlag = false;
    DtmfInfo dtmfInfo = {};
    dtmfInfo.callId = 0;
    dtmfInfo.dtmfKey = "#";
    int32_t ret = g_rilInterface->StopDtmf(SLOTID_2, GetSerialId(), dtmfInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_stopDtmfResponseFlag);
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1GetCallPreferenceModeResponse_0100
 * @tc.name   : testV1GetCallPreferenceModeResponse001
 * @tc.desc   : Call the function V1 GetCallPreferenceModeResponse with slotId  and a value of SLOTID_1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetCallPreferenceModeResponse001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    g_getCallPreferenceModeResponseFlag = false;
    int32_t ret = g_rilInterface->GetCallPreferenceMode(SLOTID_1, GetSerialId());
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_getCallPreferenceModeResponseFlag);
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1GetCallPreferenceModeResponse_0200
 * @tc.name   : testV1GetCallPreferenceModeResponse002
 * @tc.desc   : Call the function V1 GetCallPreferenceModeResponse with slotId  and a value of SLOTID_2
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetCallPreferenceModeResponse002, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    g_getCallPreferenceModeResponseFlag = false;
    int32_t ret = g_rilInterface->GetCallPreferenceMode(SLOTID_2, GetSerialId());
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_getCallPreferenceModeResponseFlag);
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SetCallPreferenceModeResponse_0100
 * @tc.name   : testV1SetCallPreferenceModeResponse001
 * @tc.desc   : Call the function V1 SetCallPreferenceModeResponse with slotId  and a value of SLOTID_1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetCallPreferenceModeResponse001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    g_setCallPreferenceModeResponseFlag = false;
    int32_t ret = g_rilInterface->SetCallPreferenceMode(SLOTID_1, GetSerialId(), 1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_setCallPreferenceModeResponseFlag);
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SetCallPreferenceModeResponse_0200
 * @tc.name   : testV1SetCallPreferenceModeResponse002
 * @tc.desc   : Call the function V1 SetCallPreferenceModeResponse with slotId  and a value of SLOTID_2
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetCallPreferenceModeResponse002, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    g_setCallPreferenceModeResponseFlag = false;
    int32_t ret = g_rilInterface->SetCallPreferenceMode(SLOTID_2, GetSerialId(), 1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_setCallPreferenceModeResponseFlag);
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SetUssdResponse_0100
 * @tc.name   : testV1SetUssdResponse001
 * @tc.desc   : Call the function V1 SetUssdResponse with slotId  and a value of SLOTID_1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetUssdResponse001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    g_setUssdResponseFlag = false;
    int32_t ret = g_rilInterface->SetUssd(SLOTID_1, GetSerialId(), "12345678");
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_setUssdResponseFlag);
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SetUssdResponse_0200
 * @tc.name   : testV1SetUssdResponse002
 * @tc.desc   : Call the function V1 SetUssdResponse with slotId  and a value of SLOTID_2
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetUssdResponse002, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    g_setUssdResponseFlag = false;
    int32_t ret = g_rilInterface->SetUssd(SLOTID_2, GetSerialId(), "12345678");
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_setUssdResponseFlag);
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1CloseUnFinishedUssdResponse_0100
 * @tc.name   : testV1CloseUnFinishedUssdResponse001
 * @tc.desc   : Call the function V1 CloseUnFinishedUssdResponse with slotId and a value of SLOTID_1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1CloseUnFinishedUssdResponse001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    g_closeUnFinishedUssdResponseFlag = false;
    int32_t ret = g_rilInterface->CloseUnFinishedUssd(SLOTID_1, GetSerialId());
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_closeUnFinishedUssdResponseFlag);
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1CloseUnFinishedUssdResponse_0200
 * @tc.name   : testV1CloseUnFinishedUssdResponse002
 * @tc.desc   : Call the function V1 CloseUnFinishedUssdResponse with slotId and a value of SLOTID_2
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1CloseUnFinishedUssdResponse002, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    g_closeUnFinishedUssdResponseFlag = false;
    int32_t ret = g_rilInterface->CloseUnFinishedUssd(SLOTID_2, GetSerialId());
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_closeUnFinishedUssdResponseFlag);
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1GetCallFailReasonResponse_0100
 * @tc.name   : testV1GetCallFailReasonResponse001
 * @tc.desc   : Call the function V1 GetCallFailReasonResponse with slotId  and a value of SLOTID_1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetCallFailReasonResponse001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    g_getCallFailReasonResponseFlag = false;
    int32_t ret = g_rilInterface->GetCallFailReason(SLOTID_1, GetSerialId());
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_getCallFailReasonResponseFlag);
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1GetCallFailReasonResponse_0200
 * @tc.name   : testV1GetCallFailReasonResponse002
 * @tc.desc   : Call the function V1 GetCallFailReasonResponse with slotId  and a value of SLOTID_2
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetCallFailReasonResponse002, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    g_getCallFailReasonResponseFlag = false;
    int32_t ret = g_rilInterface->GetCallFailReason(SLOTID_2, GetSerialId());
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_getCallFailReasonResponseFlag);
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SetBarringPasswordResponse_0100
 * @tc.name   : testV1SetBarringPasswordResponse001
 * @tc.desc   : Call the function V1 SetBarringPasswordResponse with slotId and a value of SLOTID_1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetBarringPasswordResponse001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    g_setBarringPasswordResponseFlag = false;
    SetBarringInfo setBarringInfo = {};
    setBarringInfo.fac = "AB";
    setBarringInfo.oldPassword = "1234";
    setBarringInfo.newPassword = "2345";
    int32_t ret = g_rilInterface->SetBarringPassword(SLOTID_1, GetSerialId(), setBarringInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_setBarringPasswordResponseFlag);
}

/**
 * @tc.number : SUB_Telephony_DriverSystem_V1SetBarringPasswordResponse_0200
 * @tc.name   : testV1SetBarringPasswordResponse002
 * @tc.desc   : Call the function V1 SetBarringPasswordResponse with slotId and a value of SLOTID_2
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetBarringPasswordResponse002, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    g_setBarringPasswordResponseFlag = false;
    SetBarringInfo setBarringInfo = {};
    setBarringInfo.fac = "AB";
    setBarringInfo.oldPassword = "1234";
    setBarringInfo.newPassword = "2345";
    int32_t ret = g_rilInterface->SetBarringPassword(SLOTID_2, GetSerialId(), setBarringInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_setBarringPasswordResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1DeactivatePdpContextResponse_0100
 * @tc.name  : testV1DeactivatePdpContextResponse001
 * @tc.desc  : Deactivates the PDP context. SLOTID_1 serialId = 0.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1DeactivatePdpContextResponse001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    g_deactivatePdpContextResponseFlag = false;
    int32_t serialId = 0;
    UniInfo uniInfo;
    uniInfo.serial = serialId;
    uniInfo.gsmIndex = 1;
    uniInfo.arg1 = 2;
    int32_t ret = g_rilInterface->DeactivatePdpContext(SLOTID_1, serialId, uniInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_deactivatePdpContextResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1DeactivatePdpContextResponse_0100
 * @tc.name  : testV1DeactivatePdpContextResponse002
 * @tc.desc  : Deactivates the PDP context. SLOTID_2 serialId = 0.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1DeactivatePdpContextResponse002, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    g_deactivatePdpContextResponseFlag = false;
    int32_t serialId = 0;
    UniInfo uniInfo;
    uniInfo.serial = serialId;
    uniInfo.gsmIndex = 1;
    uniInfo.arg1 = 2;
    int32_t ret = g_rilInterface->DeactivatePdpContext(SLOTID_2, serialId, uniInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_deactivatePdpContextResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetPdpContextListResponse_0100
 * @tc.name  : testV1GetPdpContextListResponse001
 * @tc.desc  : Obtains the PDP context list. SLOTID_1 serialId = 0.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetPdpContextListResponse001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    g_getPdpContextListResponseFlag = false;
    int32_t serialId = 0;
    UniInfo uniInfo;
    uniInfo.serial = serialId;
    int32_t ret = g_rilInterface->GetPdpContextList(SLOTID_1, serialId, uniInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_getPdpContextListResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetPdpContextListResponse_0200
 * @tc.name  : testV1GetPdpContextListResponse002
 * @tc.desc  : Obtains the PDP context list. SLOTID_2 serialId = 0.
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetPdpContextListResponse002, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    g_getPdpContextListResponseFlag = false;
    int32_t serialId = 0;
    UniInfo uniInfo;
    uniInfo.serial = serialId;
    int32_t ret = g_rilInterface->GetPdpContextList(SLOTID_2, serialId, uniInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_getPdpContextListResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetInitApnInfoResponse_0100
 * @tc.name  : testV1SetInitApnInfoResponse001
 * @tc.desc  : Call function SetInitApnInfoResponse with slotId is SLOTID_1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetInitApnInfoResponse001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    g_setInitApnInfoResponseFlag = false;
    int32_t serialId = 0;
    DataProfileDataInfo dataProfileInfo;
    dataProfileInfo.profileId = 0;
    dataProfileInfo.password = "user1";
    dataProfileInfo.authenticationType = 0;
    dataProfileInfo.userName = "user1";
    dataProfileInfo.apn = "cmnet";
    dataProfileInfo.protocol = "IPV4V6";
    dataProfileInfo.roamingProtocol = "IPV4V6";
    dataProfileInfo.serial = serialId;
    int32_t ret = g_rilInterface->SetInitApnInfo(SLOTID_1, serialId, dataProfileInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_setInitApnInfoResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetInitApnInfoResponse_0200
 * @tc.name  : testV1SetInitApnInfoResponse002
 * @tc.desc  : Call function SetInitApnInfoResponse with slotId is SLOTID_2
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetInitApnInfoResponse002, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    g_setInitApnInfoResponseFlag = false;
    int32_t serialId = 0;
    DataProfileDataInfo dataProfileInfo;
    dataProfileInfo.profileId = 0;
    dataProfileInfo.password = "user1";
    dataProfileInfo.authenticationType = 0;
    dataProfileInfo.userName = "user1";
    dataProfileInfo.apn = "cmnet";
    dataProfileInfo.protocol = "IPV4V6";
    dataProfileInfo.roamingProtocol = "IPV4V6";
    dataProfileInfo.serial = serialId;
    int32_t ret = g_rilInterface->SetInitApnInfo(SLOTID_2, serialId, dataProfileInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_setInitApnInfoResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetLinkBandwidthInfoResponse_0100
 * @tc.name  : testV1GetLinkBandwidthInfoResponse001
 * @tc.desc  : Call function GetLinkBandwidthInfoResponse with slotId is SLOTID_1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetLinkBandwidthInfoResponse001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    g_getLinkBandwidthInfoResponseFlag = false;
    int32_t ret = g_rilInterface->GetLinkBandwidthInfo(SLOTID_1, 0, 1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_getLinkBandwidthInfoResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetLinkBandwidthInfoResponse_0200
 * @tc.name  : testV1GetLinkBandwidthInfoResponse002
 * @tc.desc  : Call function GetLinkBandwidthInfoResponse with slotId is SLOTID_2
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetLinkBandwidthInfoResponse002, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    g_getLinkBandwidthInfoResponseFlag = false;
    int32_t ret = g_rilInterface->GetLinkBandwidthInfo(SLOTID_2, 0, 1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_getLinkBandwidthInfoResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetLinkCapabilityResponse_0100
 * @tc.name  : testV1GetLinkCapabilityResponse001
 * @tc.desc  : Call function GetLinkCapabilityResponse with slotId is SLOTID_1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetLinkCapabilityResponse001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    g_getLinkCapabilityResponseFlag = false;
    int32_t ret = g_rilInterface->GetLinkCapability(SLOTID_1, 0);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_getLinkCapabilityResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetLinkCapabilityResponse_0200
 * @tc.name  : testV1GetLinkCapabilityResponse002
 * @tc.desc  : Call function GetLinkCapabilityResponse with slotId is SLOTID_2
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetLinkCapabilityResponse002, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    g_getLinkCapabilityResponseFlag = false;
    int32_t ret = g_rilInterface->GetLinkCapability(SLOTID_2, 0);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_getLinkCapabilityResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetVoiceRadioTechnologyResponse_0100
 * @tc.name: testV1GetVoiceRadioTechnologyResponse001
 * @tc.desc: Call function GetVoiceRadioTechnologyResponse slotId is SLOTID_1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetVoiceRadioTechnologyResponse001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    g_getVoiceRadioTechnologyResponseFlag = false;
    int32_t ret = g_rilInterface->GetVoiceRadioTechnology(SLOTID_1, GetSerialId());
    ;
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_getVoiceRadioTechnologyResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetVoiceRadioTechnologyResponse_0200
 * @tc.name: testV1GetVoiceRadioTechnologyResponse002
 * @tc.desc: Call function GetVoiceRadioTechnologyResponse slotId is SLOTID_2
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetVoiceRadioTechnologyResponse002, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    g_getVoiceRadioTechnologyResponseFlag = false;
    int32_t ret = g_rilInterface->GetVoiceRadioTechnology(SLOTID_2, GetSerialId());
    ;
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_getVoiceRadioTechnologyResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetSimIOResponse_0100
 * @tc.name: testV1GetSimIOResponse001
 * @tc.desc: GetSimIOResponse, slotId is SLOTID_1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetSimIOResponse001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    g_getSimIOResponseFlag = false;
    SimIoRequestInfo msg;
    msg.command = 0xc0;
    msg.fileId = 0x2FE2;
    msg.p1 = 0;
    msg.p2 = 0;
    msg.p3 = 15;
    msg.data = "";
    msg.path = "3F00";
    msg.pin2 = "";
    int32_t ret = g_rilInterface->GetSimIO(SLOTID_1, GetSerialId(), msg);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_getSimIOResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetSimIOResponse_0200
 * @tc.name: testV1GetSimIOResponse002
 * @tc.desc: GetSimIOResponse, slotId is SLOTID_2
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetSimIOResponse002, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    g_getSimIOResponseFlag = false;
    SimIoRequestInfo msg;
    msg.command = 0xc0;
    msg.fileId = 0x2FE2;
    msg.p1 = 0;
    msg.p2 = 0;
    msg.p3 = 15;
    msg.data = "";
    msg.path = "3F00";
    msg.pin2 = "";
    int32_t ret = g_rilInterface->GetSimIO(SLOTID_2, GetSerialId(), msg);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_getSimIOResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetSimStatusResponse_0100
 * @tc.name  : testV1GetSimStatusResponse001
 * @tc.desc  : GetSimStatusResponse, slotId is SLOTID_1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetSimStatusResponse001, Function | MediumTest | Level1)
{
    if (g_rilInterface == nullptr) {
        return;
    }
    g_getSimStatusResponseFlag = false;
    int32_t ret = g_rilInterface->GetSimStatus(SLOTID_1, GetSerialId());
    if (ret != 2) {
        WaitFor(WAIT_TIME_SECOND);
        EXPECT_EQ(SUCCESS, ret);
        EXPECT_EQ(true, g_getSimStatusResponseFlag);
    } else {
        return;
    }
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1GetSimStatusResponse_0200
 * @tc.name  : testV1GetSimStatusResponse002
 * @tc.desc  : GetSimStatusResponse, slotId is SLOTID_2
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetSimStatusResponse002, Function | MediumTest | Level1)
{
    if (g_rilInterface == nullptr) {
        return;
    }
    g_getSimStatusResponseFlag = false;
    int32_t ret = g_rilInterface->GetSimStatus(SLOTID_2, GetSerialId());
    if (ret != 2) {
        WaitFor(WAIT_TIME_SECOND);
        EXPECT_EQ(SUCCESS, ret);
        EXPECT_EQ(true, g_getSimStatusResponseFlag);
    } else {
        return;
    }
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetSimLockResponse_0100
 * @tc.name: testV1SetSimLockResponse001
 * @tc.desc: SetSimLockResponse, slotId is SLOTID_1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetSimLockResponse001, Function | MediumTest | Level1)
{
#ifdef TEL_TEST_PIN_PUK
    if (!IsReady(SLOTID_1)) {
        return;
    }
    g_setSimLockResponseFlag = false;
    SimLockInfo simLockInfo;
    simLockInfo.fac = "AO";
    simLockInfo.mode = 0;
    simLockInfo.classx = 1;
    simLockInfo.passwd = "1234";
    constexpr const char *FAC_PIN_LOCK = "AO";
    int32_t ret = g_rilInterface->SetSimLock(SLOTID_1, GetSerialId(), simLockInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_setSimLockResponseFlag);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_SET_SIM_LOCK));
#endif
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetSimLockResponse_0200
 * @tc.name: testV1SetSimLockResponse002
 * @tc.desc: SetSimLockResponse, slotId is SLOTID_2
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetSimLockResponse002, Function | MediumTest | Level1)
{
#ifdef TEL_TEST_PIN_PUK
    if (!IsReady(SLOTID_2)) {
        return;
    }
    g_setSimLockResponseFlag = false;
    SimLockInfo simLockInfo;
    simLockInfo.fac = "AO";
    simLockInfo.mode = 0;
    simLockInfo.classx = 1;
    simLockInfo.passwd = "1234";
    constexpr const char *FAC_PIN_LOCK = "AO";
    int32_t ret = g_rilInterface->SetSimLock(SLOTID_2, GetSerialId(), simLockInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_setSimLockResponseFlag);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SIM_SET_SIM_LOCK));
#endif
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1ChangeSimPasswordResponse_0100
 * @tc.name  : testV1ChangeSimPasswordResponse001
 * @tc.desc  : ChangeSimPasswordResponse, slotId is SLOTID_1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1ChangeSimPasswordResponse001, Function | MediumTest | Level2)
{
#ifdef TEL_TEST_PIN_PUK
    if (!IsReady(SLOTID_1)) {
        return;
    }
    g_changeSimPasswordResponseFlag = false;
    ISimPasswordInfo simPassword;
    simPassword.fac = "AO";
    simPassword.oldPassword = "1234";
    simPassword.newPassword = "1234";
    simPassword.passwordLength = 4;
    int32_t ret = g_rilInterface->ChangeSimPassword(SLOTID_1, GetSerialId(), simPassword);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_changeSimPasswordResponseFlag);
#endif
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1ChangeSimPasswordResponse_0200
 * @tc.name  : testV1ChangeSimPasswordResponse002
 * @tc.desc  : ChangeSimPasswordResponse, slotId is SLOTID_2
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1ChangeSimPasswordResponse002, Function | MediumTest | Level2)
{
#ifdef TEL_TEST_PIN_PUK
    if (!IsReady(SLOTID_2)) {
        return;
    }
    g_changeSimPasswordResponseFlag = false;
    ISimPasswordInfo simPassword;
    simPassword.fac = "AO";
    simPassword.oldPassword = "1234";
    simPassword.newPassword = "1234";
    simPassword.passwordLength = 4;
    int32_t ret = g_rilInterface->ChangeSimPassword(SLOTID_2, GetSerialId(), simPassword);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_changeSimPasswordResponseFlag);
#endif
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1UnlockPinResponse_0100
 * @tc.name  : testV1UnlockPinResponse001
 * @tc.desc  : Call function UnlockPinResponse with slotId is SLOTID_1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1UnlockPinResponse001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    g_unlockPinResponseFlag = false;
    std::string pin = TEST_STORAGE_PDU;
    int32_t ret = g_rilInterface->UnlockPin(SLOTID_1, GetSerialId(), pin);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_unlockPinResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1UnlockPinResponse_0200
 * @tc.name  : testV1UnlockPinResponse002
 * @tc.desc  : Call function UnlockPinResponse with slotId is SLOTID_2
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1UnlockPinResponse002, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    g_unlockPinResponseFlag = false;
    std::string pin = TEST_STORAGE_PDU;
    int32_t ret = g_rilInterface->UnlockPin(SLOTID_2, GetSerialId(), pin);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_unlockPinResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1UnlockPukResponse_0100
 * @tc.name  : testV1UnlockPukResponse001
 * @tc.desc  : Call function UnlockPukResponse with slotId is SLOTID_1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1UnlockPukResponse001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    g_unlockPukResponseFlag = false;
    std::string puk = TEST_SEND_PDU;
    std::string pin = TEST_STORAGE_PDU;
    int32_t ret = g_rilInterface->UnlockPuk(SLOTID_1, GetSerialId(), puk, pin);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_unlockPukResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1UnlockPukResponse_0200
 * @tc.name  : testV1UnlockPukResponse002
 * @tc.desc  : Call function UnlockPukResponse with slotId is SLOTID_2
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1UnlockPukResponse002, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    g_unlockPukResponseFlag = false;
    std::string puk = TEST_SEND_PDU;
    std::string pin = TEST_STORAGE_PDU;
    int32_t ret = g_rilInterface->UnlockPuk(SLOTID_2, GetSerialId(), puk, pin);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_unlockPukResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1UnlockPin2Response_0100
 * @tc.name  : testV1UnlockPin2Response001
 * @tc.desc  : Call function UnlockPin2Response with with slotId is SLOTID_1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1UnlockPin2Response001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    g_unlockPin2ResponseFlag = false;
    std::string pin2 = TEST_SEND_PDU;
    int32_t ret = g_rilInterface->UnlockPin2(SLOTID_1, GetSerialId(), pin2);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_unlockPin2ResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1UnlockPin2Response_0200
 * @tc.name  : testV1UnlockPin2Response002
 * @tc.desc  : Call function UnlockPin2Response with slotId is SLOTID_2
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1UnlockPin2Response002, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    g_unlockPin2ResponseFlag = false;
    std::string pin2 = TEST_SEND_PDU;
    int32_t ret = g_rilInterface->UnlockPin2(SLOTID_2, GetSerialId(), pin2);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_unlockPin2ResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1UnlockPuk2Response_0100
 * @tc.name  : testV1UnlockPuk2Response001
 * @tc.desc  : Call function UnlockPuk2Response with slotId is SLOTID_1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1UnlockPuk2Response001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    g_unlockPuk2ResponseFlag = false;
    std::string puk2 = TEST_SEND_PDU;
    std::string pin2 = TEST_STORAGE_PDU;
    int32_t ret = g_rilInterface->UnlockPuk2(SLOTID_1, GetSerialId(), puk2, pin2);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_unlockPuk2ResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1UnlockPuk2Response_0200
 * @tc.name  : testV1UnlockPuk2Response002
 * @tc.desc  : Call function UnlockPuk2Response with slotId is SLOTID_2
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1UnlockPuk2Response002, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    g_unlockPuk2ResponseFlag = false;
    std::string puk2 = TEST_SEND_PDU;
    std::string pin2 = TEST_STORAGE_PDU;
    int32_t ret = g_rilInterface->UnlockPuk2(SLOTID_2, GetSerialId(), puk2, pin2);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_unlockPuk2ResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetVonrSwitch_0300
 * @tc.name  : testV1SetVonrSwitch001
 * @tc.desc  : Call function SetVonrSwitch with slotId is SLOTID_1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetVonrSwitch001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SetVonrSwitch(SLOTID_1, GetSerialId(), 0);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SET_VONR_SWITCH));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetVonrSwitch_0400
 * @tc.name  : testV1SetVonrSwitch002
 * @tc.desc  : Call function SetVonrSwitch with slotId is SLOTID_2
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetVonrSwitch002, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t ret = g_rilInterface->SetVonrSwitch(SLOTID_2, GetSerialId(), 0);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SET_VONR_SWITCH));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetVonrSwitch_0500
 * @tc.name  : testV1SetVonrSwitch003
 * @tc.desc  : Call stability SetVonrSwitch with slotId is SLOTID_1 for 100 times
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetVonrSwitch003, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = 0;
    for (int i = 0; i < 100; i++) {
        ret = g_rilInterface->SetVonrSwitch(SLOTID_1, GetSerialId(), 1);
        WaitFor(WAIT_TIME_SECOND);
        EXPECT_EQ(SUCCESS, ret);
        ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SET_VONR_SWITCH));
    }
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetVonrSwitch_0600
 * @tc.name  : testV1SetVonrSwitch004
 * @tc.desc  : Call stability SetVonrSwitch with slotId is SLOTID_2 for 100 times
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetVonrSwitch004, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t ret = 0;
    for (int i = 0; i < 100; i++) {
        ret = g_rilInterface->SetVonrSwitch(SLOTID_2, GetSerialId(), 1);
        WaitFor(WAIT_TIME_SECOND);
        EXPECT_EQ(SUCCESS, ret);
        ASSERT_TRUE(GetBoolResult(HdiId::HREQ_SET_VONR_SWITCH));
    }
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetVonrSwitch_0700
 * @tc.name  : testV1SetVonrSwitch005
 * @tc.desc  : Call function SetVonrSwitch with slotId is SLOTID_1 Serialid is -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetVonrSwitch005, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t ret = g_rilInterface->SetVonrSwitch(SLOTID_1, -1, 1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetVonrSwitch_0800
 * @tc.name  : testV1SetVonrSwitch006
 * @tc.desc  : Call function SetVonrSwitch with slotId is SLOTID_2 Serialid is -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetVonrSwitch006, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t ret = g_rilInterface->SetVonrSwitch(SLOTID_2, -1, 1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1ActivatePdpContext_0300
 * @tc.name  : testV1ActivatePdpContext001
 * @tc.desc  : Call function ActivatePdpContext with radioTechnology is RADIO_TECHNOLOGY_INVALID
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1ActivatePdpContext001, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t serialId = GetSerialId();
    DataProfileDataInfo dataProfileInfo;
    dataProfileInfo.profileId = 0;
    dataProfileInfo.password = "";
    dataProfileInfo.authenticationType = 0;
    dataProfileInfo.userName = "";
    dataProfileInfo.apn = "cmnet";
    dataProfileInfo.protocol = "IPV4V6";
    dataProfileInfo.roamingProtocol = "IPV4V6";
    DataCallInfo dataCallInfo;
    dataCallInfo.serial = serialId;
    dataCallInfo.radioTechnology = RADIO_TECHNOLOGY_INVALID;
    dataCallInfo.dataProfileInfo = dataProfileInfo;
    dataCallInfo.roamingAllowed = true;
    dataCallInfo.isRoaming = false;
    int32_t ret = g_rilInterface->ActivatePdpContext(SLOTID_1, serialId, dataCallInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_NE(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_DATA_ACTIVATE_PDP_CONTEXT));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1ActivatePdpContext_0400
 * @tc.name  : testV1ActivatePdpContext002
 * @tc.desc  : Call function ActivatePdpContext with radioTechnology is RADIO_TECHNOLOGY_UNKNOWN
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1ActivatePdpContext002, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t serialId = GetSerialId();
    DataProfileDataInfo dataProfileInfo;
    dataProfileInfo.profileId = 0;
    dataProfileInfo.password = "";
    dataProfileInfo.authenticationType = 0;
    dataProfileInfo.userName = "";
    dataProfileInfo.apn = "cmnet";
    dataProfileInfo.protocol = "IPV4V6";
    dataProfileInfo.roamingProtocol = "IPV4V6";
    DataCallInfo dataCallInfo;
    dataCallInfo.serial = serialId;
    dataCallInfo.radioTechnology = RADIO_TECHNOLOGY_UNKNOWN;
    dataCallInfo.dataProfileInfo = dataProfileInfo;
    dataCallInfo.roamingAllowed = true;
    dataCallInfo.isRoaming = false;
    int32_t ret = g_rilInterface->ActivatePdpContext(SLOTID_1, serialId, dataCallInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_DATA_ACTIVATE_PDP_CONTEXT));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1ActivatePdpContext_0500
 * @tc.name  : testV1ActivatePdpContext003
 * @tc.desc  : Call function ActivatePdpContext with radioTechnology is RADIO_TECHNOLOGY_GSM
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1ActivatePdpContext003, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t serialId = GetSerialId();
    DataProfileDataInfo dataProfileInfo;
    dataProfileInfo.profileId = 0;
    dataProfileInfo.password = "";
    dataProfileInfo.authenticationType = 0;
    dataProfileInfo.userName = "";
    dataProfileInfo.apn = "cmnet";
    dataProfileInfo.protocol = "IPV4V6";
    dataProfileInfo.roamingProtocol = "IPV4V6";
    DataCallInfo dataCallInfo;
    dataCallInfo.serial = serialId;
    dataCallInfo.radioTechnology = RADIO_TECHNOLOGY_GSM;
    dataCallInfo.dataProfileInfo = dataProfileInfo;
    dataCallInfo.roamingAllowed = true;
    dataCallInfo.isRoaming = false;
    int32_t ret = g_rilInterface->ActivatePdpContext(SLOTID_1, serialId, dataCallInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_DATA_ACTIVATE_PDP_CONTEXT));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1ActivatePdpContext_0600
 * @tc.name  : testV1ActivatePdpContext004
 * @tc.desc  : Call function ActivatePdpContext with radioTechnology is RADIO_TECHNOLOGY_1XRTT
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1ActivatePdpContext004, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t serialId = GetSerialId();
    DataProfileDataInfo dataProfileInfo;
    dataProfileInfo.profileId = 0;
    dataProfileInfo.password = "";
    dataProfileInfo.authenticationType = 0;
    dataProfileInfo.userName = "";
    dataProfileInfo.apn = "cmnet";
    dataProfileInfo.protocol = "IPV4V6";
    dataProfileInfo.roamingProtocol = "IPV4V6";
    DataCallInfo dataCallInfo;
    dataCallInfo.serial = serialId;
    dataCallInfo.radioTechnology = RADIO_TECHNOLOGY_1XRTT;
    dataCallInfo.dataProfileInfo = dataProfileInfo;
    dataCallInfo.roamingAllowed = true;
    dataCallInfo.isRoaming = false;
    int32_t ret = g_rilInterface->ActivatePdpContext(SLOTID_1, serialId, dataCallInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_DATA_ACTIVATE_PDP_CONTEXT));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1ActivatePdpContext_0700
 * @tc.name  : testV1ActivatePdpContext005
 * @tc.desc  : Call function ActivatePdpContext with radioTechnology is RADIO_TECHNOLOGY_WCDMA
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1ActivatePdpContext005, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t serialId = GetSerialId();
    DataProfileDataInfo dataProfileInfo;
    dataProfileInfo.profileId = 0;
    dataProfileInfo.password = "";
    dataProfileInfo.authenticationType = 0;
    dataProfileInfo.userName = "";
    dataProfileInfo.apn = "cmnet";
    dataProfileInfo.protocol = "IPV4V6";
    dataProfileInfo.roamingProtocol = "IPV4V6";
    DataCallInfo dataCallInfo;
    dataCallInfo.serial = serialId;
    dataCallInfo.radioTechnology = RADIO_TECHNOLOGY_WCDMA;
    dataCallInfo.dataProfileInfo = dataProfileInfo;
    dataCallInfo.roamingAllowed = true;
    dataCallInfo.isRoaming = false;
    int32_t ret = g_rilInterface->ActivatePdpContext(SLOTID_1, serialId, dataCallInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_DATA_ACTIVATE_PDP_CONTEXT));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1ActivatePdpContext_0800
 * @tc.name  : testV1ActivatePdpContext006
 * @tc.desc  : Call function ActivatePdpContext with radioTechnology is RADIO_TECHNOLOGY_HSPA
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1ActivatePdpContext006, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t serialId = GetSerialId();
    DataProfileDataInfo dataProfileInfo;
    dataProfileInfo.profileId = 0;
    dataProfileInfo.password = "";
    dataProfileInfo.authenticationType = 0;
    dataProfileInfo.userName = "";
    dataProfileInfo.apn = "cmnet";
    dataProfileInfo.protocol = "IPV4V6";
    dataProfileInfo.roamingProtocol = "IPV4V6";
    DataCallInfo dataCallInfo;
    dataCallInfo.serial = serialId;
    dataCallInfo.radioTechnology = RADIO_TECHNOLOGY_HSPA;
    dataCallInfo.dataProfileInfo = dataProfileInfo;
    dataCallInfo.roamingAllowed = true;
    dataCallInfo.isRoaming = false;
    int32_t ret = g_rilInterface->ActivatePdpContext(SLOTID_1, serialId, dataCallInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_DATA_ACTIVATE_PDP_CONTEXT));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1ActivatePdpContext_0900
 * @tc.name  : testV1ActivatePdpContext007
 * @tc.desc  : Call function ActivatePdpContext with radioTechnology is RADIO_TECHNOLOGY_HSPAP
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1ActivatePdpContext007, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t serialId = GetSerialId();
    DataProfileDataInfo dataProfileInfo;
    dataProfileInfo.profileId = 0;
    dataProfileInfo.password = "";
    dataProfileInfo.authenticationType = 0;
    dataProfileInfo.userName = "";
    dataProfileInfo.apn = "cmnet";
    dataProfileInfo.protocol = "IPV4V6";
    dataProfileInfo.roamingProtocol = "IPV4V6";
    DataCallInfo dataCallInfo;
    dataCallInfo.serial = serialId;
    dataCallInfo.radioTechnology = RADIO_TECHNOLOGY_HSPAP;
    dataCallInfo.dataProfileInfo = dataProfileInfo;
    dataCallInfo.roamingAllowed = true;
    dataCallInfo.isRoaming = false;
    int32_t ret = g_rilInterface->ActivatePdpContext(SLOTID_1, serialId, dataCallInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_DATA_ACTIVATE_PDP_CONTEXT));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1ActivatePdpContext_1000
 * @tc.name  : testV1ActivatePdpContext008
 * @tc.desc  : Call function ActivatePdpContext with radioTechnology is RADIO_TECHNOLOGY_TD_SCDMA
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1ActivatePdpContext008, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t serialId = GetSerialId();
    DataProfileDataInfo dataProfileInfo;
    dataProfileInfo.profileId = 0;
    dataProfileInfo.password = "";
    dataProfileInfo.authenticationType = 0;
    dataProfileInfo.userName = "";
    dataProfileInfo.apn = "cmnet";
    dataProfileInfo.protocol = "IPV4V6";
    dataProfileInfo.roamingProtocol = "IPV4V6";
    DataCallInfo dataCallInfo;
    dataCallInfo.serial = serialId;
    dataCallInfo.radioTechnology = RADIO_TECHNOLOGY_TD_SCDMA;
    dataCallInfo.dataProfileInfo = dataProfileInfo;
    dataCallInfo.roamingAllowed = true;
    dataCallInfo.isRoaming = false;
    int32_t ret = g_rilInterface->ActivatePdpContext(SLOTID_1, serialId, dataCallInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_DATA_ACTIVATE_PDP_CONTEXT));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1ActivatePdpContext_1100
 * @tc.name  : testV1ActivatePdpContext009
 * @tc.desc  : Call function ActivatePdpContext with radioTechnology is RADIO_TECHNOLOGY_EVDO
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1ActivatePdpContext009, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t serialId = GetSerialId();
    DataProfileDataInfo dataProfileInfo;
    dataProfileInfo.profileId = 0;
    dataProfileInfo.password = "";
    dataProfileInfo.authenticationType = 0;
    dataProfileInfo.userName = "";
    dataProfileInfo.apn = "cmnet";
    dataProfileInfo.protocol = "IPV4V6";
    dataProfileInfo.roamingProtocol = "IPV4V6";
    DataCallInfo dataCallInfo;
    dataCallInfo.serial = serialId;
    dataCallInfo.radioTechnology = RADIO_TECHNOLOGY_EVDO;
    dataCallInfo.dataProfileInfo = dataProfileInfo;
    dataCallInfo.roamingAllowed = true;
    dataCallInfo.isRoaming = false;
    int32_t ret = g_rilInterface->ActivatePdpContext(SLOTID_1, serialId, dataCallInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_DATA_ACTIVATE_PDP_CONTEXT));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1ActivatePdpContext_1200
 * @tc.name  : testV1ActivatePdpContext010
 * @tc.desc  : Call function ActivatePdpContext with radioTechnology is RADIO_TECHNOLOGY_EHRPD
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1ActivatePdpContext010, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t serialId = GetSerialId();
    DataProfileDataInfo dataProfileInfo;
    dataProfileInfo.profileId = 0;
    dataProfileInfo.password = "";
    dataProfileInfo.authenticationType = 0;
    dataProfileInfo.userName = "";
    dataProfileInfo.apn = "cmnet";
    dataProfileInfo.protocol = "IPV4V6";
    dataProfileInfo.roamingProtocol = "IPV4V6";
    DataCallInfo dataCallInfo;
    dataCallInfo.serial = serialId;
    dataCallInfo.radioTechnology = RADIO_TECHNOLOGY_EHRPD;
    dataCallInfo.dataProfileInfo = dataProfileInfo;
    dataCallInfo.roamingAllowed = true;
    dataCallInfo.isRoaming = false;
    int32_t ret = g_rilInterface->ActivatePdpContext(SLOTID_1, serialId, dataCallInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_DATA_ACTIVATE_PDP_CONTEXT));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1ActivatePdpContext_1300
 * @tc.name  : testV1ActivatePdpContext011
 * @tc.desc  : Call function ActivatePdpContext with radioTechnology is RADIO_TECHNOLOGY_LTE
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1ActivatePdpContext011, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t serialId = GetSerialId();
    DataProfileDataInfo dataProfileInfo;
    dataProfileInfo.profileId = 0;
    dataProfileInfo.password = "";
    dataProfileInfo.authenticationType = 0;
    dataProfileInfo.userName = "";
    dataProfileInfo.apn = "cmnet";
    dataProfileInfo.protocol = "IPV4V6";
    dataProfileInfo.roamingProtocol = "IPV4V6";
    DataCallInfo dataCallInfo;
    dataCallInfo.serial = serialId;
    dataCallInfo.radioTechnology = RADIO_TECHNOLOGY_LTE;
    dataCallInfo.dataProfileInfo = dataProfileInfo;
    dataCallInfo.roamingAllowed = true;
    dataCallInfo.isRoaming = false;
    int32_t ret = g_rilInterface->ActivatePdpContext(SLOTID_1, serialId, dataCallInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_DATA_ACTIVATE_PDP_CONTEXT));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1ActivatePdpContext_1400
 * @tc.name  : testV1ActivatePdpContext012
 * @tc.desc  : Call function ActivatePdpContext with radioTechnology is RADIO_TECHNOLOGY_LTE_CA
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1ActivatePdpContext012, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t serialId = GetSerialId();
    DataProfileDataInfo dataProfileInfo;
    dataProfileInfo.profileId = 0;
    dataProfileInfo.password = "";
    dataProfileInfo.authenticationType = 0;
    dataProfileInfo.userName = "";
    dataProfileInfo.apn = "cmnet";
    dataProfileInfo.protocol = "IPV4V6";
    dataProfileInfo.roamingProtocol = "IPV4V6";
    DataCallInfo dataCallInfo;
    dataCallInfo.serial = serialId;
    dataCallInfo.radioTechnology = RADIO_TECHNOLOGY_LTE_CA;
    dataCallInfo.dataProfileInfo = dataProfileInfo;
    dataCallInfo.roamingAllowed = true;
    dataCallInfo.isRoaming = false;
    int32_t ret = g_rilInterface->ActivatePdpContext(SLOTID_1, serialId, dataCallInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_DATA_ACTIVATE_PDP_CONTEXT));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1ActivatePdpContext_1500
 * @tc.name  : testV1ActivatePdpContext013
 * @tc.desc  : Call function ActivatePdpContext with radioTechnology is RADIO_TECHNOLOGY_IWLAN
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1ActivatePdpContext013, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t serialId = GetSerialId();
    DataProfileDataInfo dataProfileInfo;
    dataProfileInfo.profileId = 0;
    dataProfileInfo.password = "";
    dataProfileInfo.authenticationType = 0;
    dataProfileInfo.userName = "";
    dataProfileInfo.apn = "cmnet";
    dataProfileInfo.protocol = "IPV4V6";
    dataProfileInfo.roamingProtocol = "IPV4V6";
    DataCallInfo dataCallInfo;
    dataCallInfo.serial = serialId;
    dataCallInfo.radioTechnology = RADIO_TECHNOLOGY_IWLAN;
    dataCallInfo.dataProfileInfo = dataProfileInfo;
    dataCallInfo.roamingAllowed = true;
    dataCallInfo.isRoaming = false;
    int32_t ret = g_rilInterface->ActivatePdpContext(SLOTID_1, serialId, dataCallInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_DATA_ACTIVATE_PDP_CONTEXT));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1ActivatePdpContext_1600
 * @tc.name  : testV1ActivatePdpContext014
 * @tc.desc  : Call function ActivatePdpContext with radioTechnology is RADIO_TECHNOLOGY_NR
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1ActivatePdpContext014, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t serialId = GetSerialId();
    DataProfileDataInfo dataProfileInfo;
    dataProfileInfo.profileId = 0;
    dataProfileInfo.password = "";
    dataProfileInfo.authenticationType = 0;
    dataProfileInfo.userName = "";
    dataProfileInfo.apn = "cmnet";
    dataProfileInfo.protocol = "IPV4V6";
    dataProfileInfo.roamingProtocol = "IPV4V6";
    DataCallInfo dataCallInfo;
    dataCallInfo.serial = serialId;
    dataCallInfo.radioTechnology = RADIO_TECHNOLOGY_NR;
    dataCallInfo.dataProfileInfo = dataProfileInfo;
    dataCallInfo.roamingAllowed = true;
    dataCallInfo.isRoaming = false;
    int32_t ret = g_rilInterface->ActivatePdpContext(SLOTID_1, serialId, dataCallInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_DATA_ACTIVATE_PDP_CONTEXT));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1ActivatePdpContext_1700
 * @tc.name  : testV1ActivatePdpContext015
 * @tc.desc  : Call function ActivatePdpContext with radioTechnology is RADIO_TECHNOLOGY_NR and cycle 100 times
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1ActivatePdpContext015, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t serialId = GetSerialId();
    DataProfileDataInfo dataProfileInfo;
    dataProfileInfo.profileId = 0;
    dataProfileInfo.password = "";
    dataProfileInfo.authenticationType = 0;
    dataProfileInfo.userName = "";
    dataProfileInfo.apn = "cmnet";
    dataProfileInfo.protocol = "IPV4V6";
    dataProfileInfo.roamingProtocol = "IPV4V6";
    DataCallInfo dataCallInfo;
    dataCallInfo.serial = serialId;
    dataCallInfo.radioTechnology = RADIO_TECHNOLOGY_NR;
    dataCallInfo.dataProfileInfo = dataProfileInfo;
    dataCallInfo.roamingAllowed = true;
    dataCallInfo.isRoaming = false;
    int32_t ret = 0;
    for (int i = 0; i < 100; i++) {
        ret = g_rilInterface->ActivatePdpContext(SLOTID_1, serialId, dataCallInfo);
        WaitFor(WAIT_TIME_SECOND);
        EXPECT_EQ(SUCCESS, ret);
    }
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetLinkBandwidthReportingRule_0300
 * @tc.name  : testV1SetLinkBandwidthReportingRule001
 * @tc.desc  : Call function SetLinkBandwidthReportingRule with rat is NETWORK_TYPE_UNKNOWN
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetLinkBandwidthReportingRule001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t serialId = GetSerialId();
    const int32_t BANDWIDTH_HYSTERESIS_MS = 3000;
    const int32_t BANDWIDTH_HYSTERESIS_KBPS = 50;
    const int32_t MAX_UPLINK_LINK_BANDWIDTH[] = {100, 500, 1000, 5000, 10000, 20000, 50000, 100000, 200000};
    uint32_t uplinkKbpsSize = sizeof(MAX_UPLINK_LINK_BANDWIDTH) / sizeof(int32_t);
    const int32_t MAX_DOWNLINK_LINK_BANDWIDTH[] = {100,   // VoIP
                                                   500,   // Web
                                                   1000,  // SD
                                                   5000,  // HD
                                                   10000, // file
                                                   20000, // 4K
                                                   50000, // LTE
                                                   100000,
                                                   200000, // 5G
                                                   500000, 1000000};
    uint32_t downlinkKbpsSize = sizeof(MAX_DOWNLINK_LINK_BANDWIDTH) / sizeof(int32_t);
    DataLinkBandwidthReportingRule dLinkBandwidth;
    dLinkBandwidth.serial = serialId;
    dLinkBandwidth.rat = static_cast<int32_t>(RatType::NETWORK_TYPE_UNKNOWN);
    dLinkBandwidth.delayMs = BANDWIDTH_HYSTERESIS_MS;
    dLinkBandwidth.delayUplinkKbps = BANDWIDTH_HYSTERESIS_KBPS;
    dLinkBandwidth.delayDownlinkKbps = BANDWIDTH_HYSTERESIS_KBPS;
    dLinkBandwidth.maximumUplinkKbpsSize = uplinkKbpsSize;
    dLinkBandwidth.maximumDownlinkKbpsSize = downlinkKbpsSize;
    for (uint32_t i = 0; i < uplinkKbpsSize; i++) {
        dLinkBandwidth.maximumUplinkKbps.push_back(MAX_UPLINK_LINK_BANDWIDTH[i]);
    }
    for (uint32_t i = 0; i < downlinkKbpsSize; i++) {
        dLinkBandwidth.maximumDownlinkKbps.push_back(MAX_DOWNLINK_LINK_BANDWIDTH[i]);
    }
    int32_t ret = g_rilInterface->SetLinkBandwidthReportingRule(SLOTID_1, GetSerialId(), dLinkBandwidth);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_DATA_SET_LINK_BANDWIDTH_REPORTING_RULE));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetLinkBandwidthReportingRule_0400
 * @tc.name  : testV1SetLinkBandwidthReportingRule002
 * @tc.desc  : Call function SetLinkBandwidthReportingRule with rat is NETWORK_TYPE_GSM
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetLinkBandwidthReportingRule002, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t serialId = GetSerialId();
    const int32_t BANDWIDTH_HYSTERESIS_MS = 3000;
    const int32_t BANDWIDTH_HYSTERESIS_KBPS = 50;
    const int32_t MAX_UPLINK_LINK_BANDWIDTH[] = {100, 500, 1000, 5000, 10000, 20000, 50000, 100000, 200000};
    uint32_t uplinkKbpsSize = sizeof(MAX_UPLINK_LINK_BANDWIDTH) / sizeof(int32_t);
    const int32_t MAX_DOWNLINK_LINK_BANDWIDTH[] = {100,   // VoIP
                                                   500,   // Web
                                                   1000,  // SD
                                                   5000,  // HD
                                                   10000, // file
                                                   20000, // 4K
                                                   50000, // LTE
                                                   100000,
                                                   200000, // 5G
                                                   500000, 1000000};
    uint32_t downlinkKbpsSize = sizeof(MAX_DOWNLINK_LINK_BANDWIDTH) / sizeof(int32_t);
    DataLinkBandwidthReportingRule dLinkBandwidth;
    dLinkBandwidth.serial = serialId;
    dLinkBandwidth.rat = static_cast<int32_t>(RatType::NETWORK_TYPE_GSM);
    dLinkBandwidth.delayMs = BANDWIDTH_HYSTERESIS_MS;
    dLinkBandwidth.delayUplinkKbps = BANDWIDTH_HYSTERESIS_KBPS;
    dLinkBandwidth.delayDownlinkKbps = BANDWIDTH_HYSTERESIS_KBPS;
    dLinkBandwidth.maximumUplinkKbpsSize = uplinkKbpsSize;
    dLinkBandwidth.maximumDownlinkKbpsSize = downlinkKbpsSize;
    for (uint32_t i = 0; i < uplinkKbpsSize; i++) {
        dLinkBandwidth.maximumUplinkKbps.push_back(MAX_UPLINK_LINK_BANDWIDTH[i]);
    }
    for (uint32_t i = 0; i < downlinkKbpsSize; i++) {
        dLinkBandwidth.maximumDownlinkKbps.push_back(MAX_DOWNLINK_LINK_BANDWIDTH[i]);
    }
    int32_t ret = g_rilInterface->SetLinkBandwidthReportingRule(SLOTID_1, GetSerialId(), dLinkBandwidth);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_DATA_SET_LINK_BANDWIDTH_REPORTING_RULE));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetLinkBandwidthReportingRule_0500
 * @tc.name  : testV1SetLinkBandwidthReportingRule003
 * @tc.desc  : Call function SetLinkBandwidthReportingRule with rat is NETWORK_TYPE_CDMA
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetLinkBandwidthReportingRule003, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t serialId = GetSerialId();
    const int32_t BANDWIDTH_HYSTERESIS_MS = 3000;
    const int32_t BANDWIDTH_HYSTERESIS_KBPS = 50;
    const int32_t MAX_UPLINK_LINK_BANDWIDTH[] = {100, 500, 1000, 5000, 10000, 20000, 50000, 100000, 200000};
    uint32_t uplinkKbpsSize = sizeof(MAX_UPLINK_LINK_BANDWIDTH) / sizeof(int32_t);
    const int32_t MAX_DOWNLINK_LINK_BANDWIDTH[] = {100,   // VoIP
                                                   500,   // Web
                                                   1000,  // SD
                                                   5000,  // HD
                                                   10000, // file
                                                   20000, // 4K
                                                   50000, // LTE
                                                   100000,
                                                   200000, // 5G
                                                   500000, 1000000};
    uint32_t downlinkKbpsSize = sizeof(MAX_DOWNLINK_LINK_BANDWIDTH) / sizeof(int32_t);
    DataLinkBandwidthReportingRule dLinkBandwidth;
    dLinkBandwidth.serial = serialId;
    dLinkBandwidth.rat = static_cast<int32_t>(RatType::NETWORK_TYPE_CDMA);
    dLinkBandwidth.delayMs = BANDWIDTH_HYSTERESIS_MS;
    dLinkBandwidth.delayUplinkKbps = BANDWIDTH_HYSTERESIS_KBPS;
    dLinkBandwidth.delayDownlinkKbps = BANDWIDTH_HYSTERESIS_KBPS;
    dLinkBandwidth.maximumUplinkKbpsSize = uplinkKbpsSize;
    dLinkBandwidth.maximumDownlinkKbpsSize = downlinkKbpsSize;
    for (uint32_t i = 0; i < uplinkKbpsSize; i++) {
        dLinkBandwidth.maximumUplinkKbps.push_back(MAX_UPLINK_LINK_BANDWIDTH[i]);
    }
    for (uint32_t i = 0; i < downlinkKbpsSize; i++) {
        dLinkBandwidth.maximumDownlinkKbps.push_back(MAX_DOWNLINK_LINK_BANDWIDTH[i]);
    }
    int32_t ret = g_rilInterface->SetLinkBandwidthReportingRule(SLOTID_1, GetSerialId(), dLinkBandwidth);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_DATA_SET_LINK_BANDWIDTH_REPORTING_RULE));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetLinkBandwidthReportingRule_0600
 * @tc.name  : testV1SetLinkBandwidthReportingRule004
 * @tc.desc  : Call function SetLinkBandwidthReportingRule with rat is NETWORK_TYPE_WCDMA
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetLinkBandwidthReportingRule004, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t serialId = GetSerialId();
    const int32_t BANDWIDTH_HYSTERESIS_MS = 3000;
    const int32_t BANDWIDTH_HYSTERESIS_KBPS = 50;
    const int32_t MAX_UPLINK_LINK_BANDWIDTH[] = {100, 500, 1000, 5000, 10000, 20000, 50000, 100000, 200000};
    uint32_t uplinkKbpsSize = sizeof(MAX_UPLINK_LINK_BANDWIDTH) / sizeof(int32_t);
    const int32_t MAX_DOWNLINK_LINK_BANDWIDTH[] = {100,   // VoIP
                                                   500,   // Web
                                                   1000,  // SD
                                                   5000,  // HD
                                                   10000, // file
                                                   20000, // 4K
                                                   50000, // LTE
                                                   100000,
                                                   200000, // 5G
                                                   500000, 1000000};
    uint32_t downlinkKbpsSize = sizeof(MAX_DOWNLINK_LINK_BANDWIDTH) / sizeof(int32_t);
    DataLinkBandwidthReportingRule dLinkBandwidth;
    dLinkBandwidth.serial = serialId;
    dLinkBandwidth.rat = static_cast<int32_t>(RatType::NETWORK_TYPE_WCDMA);
    dLinkBandwidth.delayMs = BANDWIDTH_HYSTERESIS_MS;
    dLinkBandwidth.delayUplinkKbps = BANDWIDTH_HYSTERESIS_KBPS;
    dLinkBandwidth.delayDownlinkKbps = BANDWIDTH_HYSTERESIS_KBPS;
    dLinkBandwidth.maximumUplinkKbpsSize = uplinkKbpsSize;
    dLinkBandwidth.maximumDownlinkKbpsSize = downlinkKbpsSize;
    for (uint32_t i = 0; i < uplinkKbpsSize; i++) {
        dLinkBandwidth.maximumUplinkKbps.push_back(MAX_UPLINK_LINK_BANDWIDTH[i]);
    }
    for (uint32_t i = 0; i < downlinkKbpsSize; i++) {
        dLinkBandwidth.maximumDownlinkKbps.push_back(MAX_DOWNLINK_LINK_BANDWIDTH[i]);
    }
    int32_t ret = g_rilInterface->SetLinkBandwidthReportingRule(SLOTID_1, GetSerialId(), dLinkBandwidth);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_DATA_SET_LINK_BANDWIDTH_REPORTING_RULE));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetLinkBandwidthReportingRule_0700
 * @tc.name  : testV1SetLinkBandwidthReportingRule005
 * @tc.desc  : Call function SetLinkBandwidthReportingRule with rat is NETWORK_TYPE_TDSCDMA
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetLinkBandwidthReportingRule005, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t serialId = GetSerialId();
    const int32_t BANDWIDTH_HYSTERESIS_MS = 3000;
    const int32_t BANDWIDTH_HYSTERESIS_KBPS = 50;
    const int32_t MAX_UPLINK_LINK_BANDWIDTH[] = {100, 500, 1000, 5000, 10000, 20000, 50000, 100000, 200000};
    uint32_t uplinkKbpsSize = sizeof(MAX_UPLINK_LINK_BANDWIDTH) / sizeof(int32_t);
    const int32_t MAX_DOWNLINK_LINK_BANDWIDTH[] = {100,   // VoIP
                                                   500,   // Web
                                                   1000,  // SD
                                                   5000,  // HD
                                                   10000, // file
                                                   20000, // 4K
                                                   50000, // LTE
                                                   100000,
                                                   200000, // 5G
                                                   500000, 1000000};
    uint32_t downlinkKbpsSize = sizeof(MAX_DOWNLINK_LINK_BANDWIDTH) / sizeof(int32_t);
    DataLinkBandwidthReportingRule dLinkBandwidth;
    dLinkBandwidth.serial = serialId;
    dLinkBandwidth.rat = static_cast<int32_t>(RatType::NETWORK_TYPE_TDSCDMA);
    dLinkBandwidth.delayMs = BANDWIDTH_HYSTERESIS_MS;
    dLinkBandwidth.delayUplinkKbps = BANDWIDTH_HYSTERESIS_KBPS;
    dLinkBandwidth.delayDownlinkKbps = BANDWIDTH_HYSTERESIS_KBPS;
    dLinkBandwidth.maximumUplinkKbpsSize = uplinkKbpsSize;
    dLinkBandwidth.maximumDownlinkKbpsSize = downlinkKbpsSize;
    for (uint32_t i = 0; i < uplinkKbpsSize; i++) {
        dLinkBandwidth.maximumUplinkKbps.push_back(MAX_UPLINK_LINK_BANDWIDTH[i]);
    }
    for (uint32_t i = 0; i < downlinkKbpsSize; i++) {
        dLinkBandwidth.maximumDownlinkKbps.push_back(MAX_DOWNLINK_LINK_BANDWIDTH[i]);
    }
    int32_t ret = g_rilInterface->SetLinkBandwidthReportingRule(SLOTID_1, GetSerialId(), dLinkBandwidth);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_DATA_SET_LINK_BANDWIDTH_REPORTING_RULE));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetLinkBandwidthReportingRule_0800
 * @tc.name  : testV1SetLinkBandwidthReportingRule006
 * @tc.desc  : Call function SetLinkBandwidthReportingRule with rat is NETWORK_TYPE_LTE
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetLinkBandwidthReportingRule006, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t serialId = GetSerialId();
    const int32_t BANDWIDTH_HYSTERESIS_MS = 3000;
    const int32_t BANDWIDTH_HYSTERESIS_KBPS = 50;
    const int32_t MAX_UPLINK_LINK_BANDWIDTH[] = {100, 500, 1000, 5000, 10000, 20000, 50000, 100000, 200000};
    uint32_t uplinkKbpsSize = sizeof(MAX_UPLINK_LINK_BANDWIDTH) / sizeof(int32_t);
    const int32_t MAX_DOWNLINK_LINK_BANDWIDTH[] = {100,   // VoIP
                                                   500,   // Web
                                                   1000,  // SD
                                                   5000,  // HD
                                                   10000, // file
                                                   20000, // 4K
                                                   50000, // LTE
                                                   100000,
                                                   200000, // 5G
                                                   500000, 1000000};
    uint32_t downlinkKbpsSize = sizeof(MAX_DOWNLINK_LINK_BANDWIDTH) / sizeof(int32_t);
    DataLinkBandwidthReportingRule dLinkBandwidth;
    dLinkBandwidth.serial = serialId;
    dLinkBandwidth.rat = static_cast<int32_t>(RatType::NETWORK_TYPE_LTE);
    dLinkBandwidth.delayMs = BANDWIDTH_HYSTERESIS_MS;
    dLinkBandwidth.delayUplinkKbps = BANDWIDTH_HYSTERESIS_KBPS;
    dLinkBandwidth.delayDownlinkKbps = BANDWIDTH_HYSTERESIS_KBPS;
    dLinkBandwidth.maximumUplinkKbpsSize = uplinkKbpsSize;
    dLinkBandwidth.maximumDownlinkKbpsSize = downlinkKbpsSize;
    for (uint32_t i = 0; i < uplinkKbpsSize; i++) {
        dLinkBandwidth.maximumUplinkKbps.push_back(MAX_UPLINK_LINK_BANDWIDTH[i]);
    }
    for (uint32_t i = 0; i < downlinkKbpsSize; i++) {
        dLinkBandwidth.maximumDownlinkKbps.push_back(MAX_DOWNLINK_LINK_BANDWIDTH[i]);
    }
    int32_t ret = g_rilInterface->SetLinkBandwidthReportingRule(SLOTID_1, GetSerialId(), dLinkBandwidth);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_DATA_SET_LINK_BANDWIDTH_REPORTING_RULE));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetLinkBandwidthReportingRule_0900
 * @tc.name  : testV1SetLinkBandwidthReportingRule007
 * @tc.desc  : Call function SetLinkBandwidthReportingRule with rat is NETWORK_TYPE_NR
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetLinkBandwidthReportingRule007, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t serialId = GetSerialId();
    const int32_t BANDWIDTH_HYSTERESIS_MS = 3000;
    const int32_t BANDWIDTH_HYSTERESIS_KBPS = 50;
    const int32_t MAX_UPLINK_LINK_BANDWIDTH[] = {100, 500, 1000, 5000, 10000, 20000, 50000, 100000, 200000};
    uint32_t uplinkKbpsSize = sizeof(MAX_UPLINK_LINK_BANDWIDTH) / sizeof(int32_t);
    const int32_t MAX_DOWNLINK_LINK_BANDWIDTH[] = {100,   // VoIP
                                                   500,   // Web
                                                   1000,  // SD
                                                   5000,  // HD
                                                   10000, // file
                                                   20000, // 4K
                                                   50000, // LTE
                                                   100000,
                                                   200000, // 5G
                                                   500000, 1000000};
    uint32_t downlinkKbpsSize = sizeof(MAX_DOWNLINK_LINK_BANDWIDTH) / sizeof(int32_t);
    DataLinkBandwidthReportingRule dLinkBandwidth;
    dLinkBandwidth.serial = serialId;
    dLinkBandwidth.rat = static_cast<int32_t>(RatType::NETWORK_TYPE_NR);
    dLinkBandwidth.delayMs = BANDWIDTH_HYSTERESIS_MS;
    dLinkBandwidth.delayUplinkKbps = BANDWIDTH_HYSTERESIS_KBPS;
    dLinkBandwidth.delayDownlinkKbps = BANDWIDTH_HYSTERESIS_KBPS;
    dLinkBandwidth.maximumUplinkKbpsSize = uplinkKbpsSize;
    dLinkBandwidth.maximumDownlinkKbpsSize = downlinkKbpsSize;
    for (uint32_t i = 0; i < uplinkKbpsSize; i++) {
        dLinkBandwidth.maximumUplinkKbps.push_back(MAX_UPLINK_LINK_BANDWIDTH[i]);
    }
    for (uint32_t i = 0; i < downlinkKbpsSize; i++) {
        dLinkBandwidth.maximumDownlinkKbps.push_back(MAX_DOWNLINK_LINK_BANDWIDTH[i]);
    }
    int32_t ret = g_rilInterface->SetLinkBandwidthReportingRule(SLOTID_1, GetSerialId(), dLinkBandwidth);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_DATA_SET_LINK_BANDWIDTH_REPORTING_RULE));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetLinkBandwidthReportingRule_1000
 * @tc.name  : testV1SetLinkBandwidthReportingRule008
 * @tc.desc  : Call function SetLinkBandwidthReportingRule with rat is NETWORK_TYPE_NR
 *slotId is SLOTID_1 and cycle 100 times
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetLinkBandwidthReportingRule008, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    int32_t serialId = GetSerialId();
    const int32_t BANDWIDTH_HYSTERESIS_MS = 3000;
    const int32_t BANDWIDTH_HYSTERESIS_KBPS = 50;
    const int32_t MAX_UPLINK_LINK_BANDWIDTH[] = {100, 500, 1000, 5000, 10000, 20000, 50000, 100000, 200000};
    uint32_t uplinkKbpsSize = sizeof(MAX_UPLINK_LINK_BANDWIDTH) / sizeof(int32_t);
    const int32_t MAX_DOWNLINK_LINK_BANDWIDTH[] = {100,   // VoIP
                                                   500,   // Web
                                                   1000,  // SD
                                                   5000,  // HD
                                                   10000, // file
                                                   20000, // 4K
                                                   50000, // LTE
                                                   100000,
                                                   200000, // 5G
                                                   500000, 1000000};
    uint32_t downlinkKbpsSize = sizeof(MAX_DOWNLINK_LINK_BANDWIDTH) / sizeof(int32_t);
    DataLinkBandwidthReportingRule dLinkBandwidth;
    dLinkBandwidth.serial = serialId;
    dLinkBandwidth.rat = static_cast<int32_t>(RatType::NETWORK_TYPE_NR);
    dLinkBandwidth.delayMs = BANDWIDTH_HYSTERESIS_MS;
    dLinkBandwidth.delayUplinkKbps = BANDWIDTH_HYSTERESIS_KBPS;
    dLinkBandwidth.delayDownlinkKbps = BANDWIDTH_HYSTERESIS_KBPS;
    dLinkBandwidth.maximumUplinkKbpsSize = uplinkKbpsSize;
    dLinkBandwidth.maximumDownlinkKbpsSize = downlinkKbpsSize;
    for (uint32_t i = 0; i < uplinkKbpsSize; i++) {
        dLinkBandwidth.maximumUplinkKbps.push_back(MAX_UPLINK_LINK_BANDWIDTH[i]);
    }
    for (uint32_t i = 0; i < downlinkKbpsSize; i++) {
        dLinkBandwidth.maximumDownlinkKbps.push_back(MAX_DOWNLINK_LINK_BANDWIDTH[i]);
    }
    int32_t ret = 0;
    for (int i = 0; i < 100; i++) {
        ret = g_rilInterface->SetLinkBandwidthReportingRule(SLOTID_1, GetSerialId(), dLinkBandwidth);
        WaitFor(WAIT_TIME_SECOND);
        EXPECT_EQ(SUCCESS, ret);
    }
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetLinkBandwidthReportingRule_1100
 * @tc.name  : testV1SetLinkBandwidthReportingRule009
 * @tc.desc  : Call function SetLinkBandwidthReportingRule with rat is NETWORK_TYPE_UNKNOWN slotId is SLOTID_2
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetLinkBandwidthReportingRule009, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t serialId = GetSerialId();
    const int32_t BANDWIDTH_HYSTERESIS_MS = 3000;
    const int32_t BANDWIDTH_HYSTERESIS_KBPS = 50;
    const int32_t MAX_UPLINK_LINK_BANDWIDTH[] = {100, 500, 1000, 5000, 10000, 20000, 50000, 100000, 200000};
    uint32_t uplinkKbpsSize = sizeof(MAX_UPLINK_LINK_BANDWIDTH) / sizeof(int32_t);
    const int32_t MAX_DOWNLINK_LINK_BANDWIDTH[] = {100,   // VoIP
                                                   500,   // Web
                                                   1000,  // SD
                                                   5000,  // HD
                                                   10000, // file
                                                   20000, // 4K
                                                   50000, // LTE
                                                   100000,
                                                   200000, // 5G
                                                   500000, 1000000};
    uint32_t downlinkKbpsSize = sizeof(MAX_DOWNLINK_LINK_BANDWIDTH) / sizeof(int32_t);
    DataLinkBandwidthReportingRule dLinkBandwidth;
    dLinkBandwidth.serial = serialId;
    dLinkBandwidth.rat = static_cast<int32_t>(RatType::NETWORK_TYPE_UNKNOWN);
    dLinkBandwidth.delayMs = BANDWIDTH_HYSTERESIS_MS;
    dLinkBandwidth.delayUplinkKbps = BANDWIDTH_HYSTERESIS_KBPS;
    dLinkBandwidth.delayDownlinkKbps = BANDWIDTH_HYSTERESIS_KBPS;
    dLinkBandwidth.maximumUplinkKbpsSize = uplinkKbpsSize;
    dLinkBandwidth.maximumDownlinkKbpsSize = downlinkKbpsSize;
    for (uint32_t i = 0; i < uplinkKbpsSize; i++) {
        dLinkBandwidth.maximumUplinkKbps.push_back(MAX_UPLINK_LINK_BANDWIDTH[i]);
    }
    for (uint32_t i = 0; i < downlinkKbpsSize; i++) {
        dLinkBandwidth.maximumDownlinkKbps.push_back(MAX_DOWNLINK_LINK_BANDWIDTH[i]);
    }
    int32_t ret = g_rilInterface->SetLinkBandwidthReportingRule(SLOTID_2, GetSerialId(), dLinkBandwidth);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_DATA_SET_LINK_BANDWIDTH_REPORTING_RULE));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetLinkBandwidthReportingRule_1200
 * @tc.name  : testV1SetLinkBandwidthReportingRule010
 * @tc.desc  : Call function SetLinkBandwidthReportingRule with rat is NETWORK_TYPE_GSM slotId is SLOTID_2
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetLinkBandwidthReportingRule010, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t serialId = GetSerialId();
    const int32_t BANDWIDTH_HYSTERESIS_MS = 3000;
    const int32_t BANDWIDTH_HYSTERESIS_KBPS = 50;
    const int32_t MAX_UPLINK_LINK_BANDWIDTH[] = {100, 500, 1000, 5000, 10000, 20000, 50000, 100000, 200000};
    uint32_t uplinkKbpsSize = sizeof(MAX_UPLINK_LINK_BANDWIDTH) / sizeof(int32_t);
    const int32_t MAX_DOWNLINK_LINK_BANDWIDTH[] = {100,   // VoIP
                                                   500,   // Web
                                                   1000,  // SD
                                                   5000,  // HD
                                                   10000, // file
                                                   20000, // 4K
                                                   50000, // LTE
                                                   100000,
                                                   200000, // 5G
                                                   500000, 1000000};
    uint32_t downlinkKbpsSize = sizeof(MAX_DOWNLINK_LINK_BANDWIDTH) / sizeof(int32_t);
    DataLinkBandwidthReportingRule dLinkBandwidth;
    dLinkBandwidth.serial = serialId;
    dLinkBandwidth.rat = static_cast<int32_t>(RatType::NETWORK_TYPE_GSM);
    dLinkBandwidth.delayMs = BANDWIDTH_HYSTERESIS_MS;
    dLinkBandwidth.delayUplinkKbps = BANDWIDTH_HYSTERESIS_KBPS;
    dLinkBandwidth.delayDownlinkKbps = BANDWIDTH_HYSTERESIS_KBPS;
    dLinkBandwidth.maximumUplinkKbpsSize = uplinkKbpsSize;
    dLinkBandwidth.maximumDownlinkKbpsSize = downlinkKbpsSize;
    for (uint32_t i = 0; i < uplinkKbpsSize; i++) {
        dLinkBandwidth.maximumUplinkKbps.push_back(MAX_UPLINK_LINK_BANDWIDTH[i]);
    }
    for (uint32_t i = 0; i < downlinkKbpsSize; i++) {
        dLinkBandwidth.maximumDownlinkKbps.push_back(MAX_DOWNLINK_LINK_BANDWIDTH[i]);
    }
    int32_t ret = g_rilInterface->SetLinkBandwidthReportingRule(SLOTID_2, GetSerialId(), dLinkBandwidth);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_DATA_SET_LINK_BANDWIDTH_REPORTING_RULE));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetLinkBandwidthReportingRule_1300
 * @tc.name  : testV1SetLinkBandwidthReportingRule011
 * @tc.desc  : Call function SetLinkBandwidthReportingRule with rat is NETWORK_TYPE_CDMA slotId is SLOTID_2
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetLinkBandwidthReportingRule011, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t serialId = GetSerialId();
    const int32_t BANDWIDTH_HYSTERESIS_MS = 3000;
    const int32_t BANDWIDTH_HYSTERESIS_KBPS = 50;
    const int32_t MAX_UPLINK_LINK_BANDWIDTH[] = {100, 500, 1000, 5000, 10000, 20000, 50000, 100000, 200000};
    uint32_t uplinkKbpsSize = sizeof(MAX_UPLINK_LINK_BANDWIDTH) / sizeof(int32_t);
    const int32_t MAX_DOWNLINK_LINK_BANDWIDTH[] = {100,   // VoIP
                                                   500,   // Web
                                                   1000,  // SD
                                                   5000,  // HD
                                                   10000, // file
                                                   20000, // 4K
                                                   50000, // LTE
                                                   100000,
                                                   200000, // 5G
                                                   500000, 1000000};
    uint32_t downlinkKbpsSize = sizeof(MAX_DOWNLINK_LINK_BANDWIDTH) / sizeof(int32_t);
    DataLinkBandwidthReportingRule dLinkBandwidth;
    dLinkBandwidth.serial = serialId;
    dLinkBandwidth.rat = static_cast<int32_t>(RatType::NETWORK_TYPE_CDMA);
    dLinkBandwidth.delayMs = BANDWIDTH_HYSTERESIS_MS;
    dLinkBandwidth.delayUplinkKbps = BANDWIDTH_HYSTERESIS_KBPS;
    dLinkBandwidth.delayDownlinkKbps = BANDWIDTH_HYSTERESIS_KBPS;
    dLinkBandwidth.maximumUplinkKbpsSize = uplinkKbpsSize;
    dLinkBandwidth.maximumDownlinkKbpsSize = downlinkKbpsSize;
    for (uint32_t i = 0; i < uplinkKbpsSize; i++) {
        dLinkBandwidth.maximumUplinkKbps.push_back(MAX_UPLINK_LINK_BANDWIDTH[i]);
    }
    for (uint32_t i = 0; i < downlinkKbpsSize; i++) {
        dLinkBandwidth.maximumDownlinkKbps.push_back(MAX_DOWNLINK_LINK_BANDWIDTH[i]);
    }
    int32_t ret = g_rilInterface->SetLinkBandwidthReportingRule(SLOTID_2, GetSerialId(), dLinkBandwidth);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_DATA_SET_LINK_BANDWIDTH_REPORTING_RULE));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetLinkBandwidthReportingRule_1400
 * @tc.name  : testV1SetLinkBandwidthReportingRule012
 * @tc.desc  : Call function SetLinkBandwidthReportingRule with rat is NETWORK_TYPE_WCDMA slotId is SLOTID_2
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetLinkBandwidthReportingRule012, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t serialId = GetSerialId();
    const int32_t BANDWIDTH_HYSTERESIS_MS = 3000;
    const int32_t BANDWIDTH_HYSTERESIS_KBPS = 50;
    const int32_t MAX_UPLINK_LINK_BANDWIDTH[] = {100, 500, 1000, 5000, 10000, 20000, 50000, 100000, 200000};
    uint32_t uplinkKbpsSize = sizeof(MAX_UPLINK_LINK_BANDWIDTH) / sizeof(int32_t);
    const int32_t MAX_DOWNLINK_LINK_BANDWIDTH[] = {100,   // VoIP
                                                   500,   // Web
                                                   1000,  // SD
                                                   5000,  // HD
                                                   10000, // file
                                                   20000, // 4K
                                                   50000, // LTE
                                                   100000,
                                                   200000, // 5G
                                                   500000, 1000000};
    uint32_t downlinkKbpsSize = sizeof(MAX_DOWNLINK_LINK_BANDWIDTH) / sizeof(int32_t);
    DataLinkBandwidthReportingRule dLinkBandwidth;
    dLinkBandwidth.serial = serialId;
    dLinkBandwidth.rat = static_cast<int32_t>(RatType::NETWORK_TYPE_WCDMA);
    dLinkBandwidth.delayMs = BANDWIDTH_HYSTERESIS_MS;
    dLinkBandwidth.delayUplinkKbps = BANDWIDTH_HYSTERESIS_KBPS;
    dLinkBandwidth.delayDownlinkKbps = BANDWIDTH_HYSTERESIS_KBPS;
    dLinkBandwidth.maximumUplinkKbpsSize = uplinkKbpsSize;
    dLinkBandwidth.maximumDownlinkKbpsSize = downlinkKbpsSize;
    for (uint32_t i = 0; i < uplinkKbpsSize; i++) {
        dLinkBandwidth.maximumUplinkKbps.push_back(MAX_UPLINK_LINK_BANDWIDTH[i]);
    }
    for (uint32_t i = 0; i < downlinkKbpsSize; i++) {
        dLinkBandwidth.maximumDownlinkKbps.push_back(MAX_DOWNLINK_LINK_BANDWIDTH[i]);
    }
    int32_t ret = g_rilInterface->SetLinkBandwidthReportingRule(SLOTID_2, GetSerialId(), dLinkBandwidth);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_DATA_SET_LINK_BANDWIDTH_REPORTING_RULE));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetLinkBandwidthReportingRule_1500
 * @tc.name  : testV1SetLinkBandwidthReportingRule013
 * @tc.desc  : Call function SetLinkBandwidthReportingRule with rat is NETWORK_TYPE_TDSCDMA slotId is SLOTID_2
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetLinkBandwidthReportingRule013, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t serialId = GetSerialId();
    const int32_t BANDWIDTH_HYSTERESIS_MS = 3000;
    const int32_t BANDWIDTH_HYSTERESIS_KBPS = 50;
    const int32_t MAX_UPLINK_LINK_BANDWIDTH[] = {100, 500, 1000, 5000, 10000, 20000, 50000, 100000, 200000};
    uint32_t uplinkKbpsSize = sizeof(MAX_UPLINK_LINK_BANDWIDTH) / sizeof(int32_t);
    const int32_t MAX_DOWNLINK_LINK_BANDWIDTH[] = {100,   // VoIP
                                                   500,   // Web
                                                   1000,  // SD
                                                   5000,  // HD
                                                   10000, // file
                                                   20000, // 4K
                                                   50000, // LTE
                                                   100000,
                                                   200000, // 5G
                                                   500000, 1000000};
    uint32_t downlinkKbpsSize = sizeof(MAX_DOWNLINK_LINK_BANDWIDTH) / sizeof(int32_t);
    DataLinkBandwidthReportingRule dLinkBandwidth;
    dLinkBandwidth.serial = serialId;
    dLinkBandwidth.rat = static_cast<int32_t>(RatType::NETWORK_TYPE_TDSCDMA);
    dLinkBandwidth.delayMs = BANDWIDTH_HYSTERESIS_MS;
    dLinkBandwidth.delayUplinkKbps = BANDWIDTH_HYSTERESIS_KBPS;
    dLinkBandwidth.delayDownlinkKbps = BANDWIDTH_HYSTERESIS_KBPS;
    dLinkBandwidth.maximumUplinkKbpsSize = uplinkKbpsSize;
    dLinkBandwidth.maximumDownlinkKbpsSize = downlinkKbpsSize;
    for (uint32_t i = 0; i < uplinkKbpsSize; i++) {
        dLinkBandwidth.maximumUplinkKbps.push_back(MAX_UPLINK_LINK_BANDWIDTH[i]);
    }
    for (uint32_t i = 0; i < downlinkKbpsSize; i++) {
        dLinkBandwidth.maximumDownlinkKbps.push_back(MAX_DOWNLINK_LINK_BANDWIDTH[i]);
    }
    int32_t ret = g_rilInterface->SetLinkBandwidthReportingRule(SLOTID_2, GetSerialId(), dLinkBandwidth);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_DATA_SET_LINK_BANDWIDTH_REPORTING_RULE));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetLinkBandwidthReportingRule_1600
 * @tc.name  : testV1SetLinkBandwidthReportingRule014
 * @tc.desc  : Call function SetLinkBandwidthReportingRule with rat is NETWORK_TYPE_LTE slotId is SLOTID_2
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetLinkBandwidthReportingRule014, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t serialId = GetSerialId();
    const int32_t BANDWIDTH_HYSTERESIS_MS = 3000;
    const int32_t BANDWIDTH_HYSTERESIS_KBPS = 50;
    const int32_t MAX_UPLINK_LINK_BANDWIDTH[] = {100, 500, 1000, 5000, 10000, 20000, 50000, 100000, 200000};
    uint32_t uplinkKbpsSize = sizeof(MAX_UPLINK_LINK_BANDWIDTH) / sizeof(int32_t);
    const int32_t MAX_DOWNLINK_LINK_BANDWIDTH[] = {100,   // VoIP
                                                   500,   // Web
                                                   1000,  // SD
                                                   5000,  // HD
                                                   10000, // file
                                                   20000, // 4K
                                                   50000, // LTE
                                                   100000,
                                                   200000, // 5G
                                                   500000, 1000000};
    uint32_t downlinkKbpsSize = sizeof(MAX_DOWNLINK_LINK_BANDWIDTH) / sizeof(int32_t);
    DataLinkBandwidthReportingRule dLinkBandwidth;
    dLinkBandwidth.serial = serialId;
    dLinkBandwidth.rat = static_cast<int32_t>(RatType::NETWORK_TYPE_LTE);
    dLinkBandwidth.delayMs = BANDWIDTH_HYSTERESIS_MS;
    dLinkBandwidth.delayUplinkKbps = BANDWIDTH_HYSTERESIS_KBPS;
    dLinkBandwidth.delayDownlinkKbps = BANDWIDTH_HYSTERESIS_KBPS;
    dLinkBandwidth.maximumUplinkKbpsSize = uplinkKbpsSize;
    dLinkBandwidth.maximumDownlinkKbpsSize = downlinkKbpsSize;
    for (uint32_t i = 0; i < uplinkKbpsSize; i++) {
        dLinkBandwidth.maximumUplinkKbps.push_back(MAX_UPLINK_LINK_BANDWIDTH[i]);
    }
    for (uint32_t i = 0; i < downlinkKbpsSize; i++) {
        dLinkBandwidth.maximumDownlinkKbps.push_back(MAX_DOWNLINK_LINK_BANDWIDTH[i]);
    }
    int32_t ret = g_rilInterface->SetLinkBandwidthReportingRule(SLOTID_2, GetSerialId(), dLinkBandwidth);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_DATA_SET_LINK_BANDWIDTH_REPORTING_RULE));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetLinkBandwidthReportingRule_1700
 * @tc.name  : testV1SetLinkBandwidthReportingRule015
 * @tc.desc  : Call function SetLinkBandwidthReportingRule with rat is NETWORK_TYPE_NR slotId is SLOTID_2
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetLinkBandwidthReportingRule015, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    int32_t serialId = GetSerialId();
    const int32_t BANDWIDTH_HYSTERESIS_MS = 3000;
    const int32_t BANDWIDTH_HYSTERESIS_KBPS = 50;
    const int32_t MAX_UPLINK_LINK_BANDWIDTH[] = {100, 500, 1000, 5000, 10000, 20000, 50000, 100000, 200000};
    uint32_t uplinkKbpsSize = sizeof(MAX_UPLINK_LINK_BANDWIDTH) / sizeof(int32_t);
    const int32_t MAX_DOWNLINK_LINK_BANDWIDTH[] = {100,   // VoIP
                                                   500,   // Web
                                                   1000,  // SD
                                                   5000,  // HD
                                                   10000, // file
                                                   20000, // 4K
                                                   50000, // LTE
                                                   100000,
                                                   200000, // 5G
                                                   500000, 1000000};
    uint32_t downlinkKbpsSize = sizeof(MAX_DOWNLINK_LINK_BANDWIDTH) / sizeof(int32_t);
    DataLinkBandwidthReportingRule dLinkBandwidth;
    dLinkBandwidth.serial = serialId;
    dLinkBandwidth.rat = static_cast<int32_t>(RatType::NETWORK_TYPE_NR);
    dLinkBandwidth.delayMs = BANDWIDTH_HYSTERESIS_MS;
    dLinkBandwidth.delayUplinkKbps = BANDWIDTH_HYSTERESIS_KBPS;
    dLinkBandwidth.delayDownlinkKbps = BANDWIDTH_HYSTERESIS_KBPS;
    dLinkBandwidth.maximumUplinkKbpsSize = uplinkKbpsSize;
    dLinkBandwidth.maximumDownlinkKbpsSize = downlinkKbpsSize;
    for (uint32_t i = 0; i < uplinkKbpsSize; i++) {
        dLinkBandwidth.maximumUplinkKbps.push_back(MAX_UPLINK_LINK_BANDWIDTH[i]);
    }
    for (uint32_t i = 0; i < downlinkKbpsSize; i++) {
        dLinkBandwidth.maximumDownlinkKbps.push_back(MAX_DOWNLINK_LINK_BANDWIDTH[i]);
    }
    int32_t ret = g_rilInterface->SetLinkBandwidthReportingRule(SLOTID_2, GetSerialId(), dLinkBandwidth);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    ASSERT_TRUE(GetBoolResult(HdiId::HREQ_DATA_SET_LINK_BANDWIDTH_REPORTING_RULE));
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetVonrSwitchResponse_0100
 * @tc.name  : testV1SetVonrSwitchResponse001
 * @tc.desc  : Call function SetVonrSwitchResponse with slotId is SLOTID_1 and status is 1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetVonrSwitchResponse001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    g_setVonrSwitchResponseFlag = false;
    int32_t ret = g_rilInterface->SetVonrSwitch(SLOTID_1, GetSerialId(), 1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_setVonrSwitchResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetVonrSwitchResponse_0200
 * @tc.name  : testV1SetVonrSwitchResponse002
 * @tc.desc  : Call function SetVonrSwitchResponse with slotId is SLOTID_2 and status is 1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetVonrSwitchResponse002, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    g_setVonrSwitchResponseFlag = false;
    int32_t ret = g_rilInterface->SetVonrSwitch(SLOTID_2, GetSerialId(), 1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_setVonrSwitchResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetVonrSwitchResponse_0300
 * @tc.name  : testV1SetVonrSwitchResponse003
 * @tc.desc  : Call function SetVonrSwitchResponse with slotId is SLOTID_1 and status is 0
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetVonrSwitchResponse003, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    g_setVonrSwitchResponseFlag = false;
    int32_t ret = g_rilInterface->SetVonrSwitch(SLOTID_1, GetSerialId(), 0);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_setVonrSwitchResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_DriverSystem_V1SetVonrSwitchResponse_0400
 * @tc.name  : testV1SetVonrSwitchResponse004
 * @tc.desc  : Call function SetVonrSwitchResponse with slotId is SLOTID_2 and status is 0
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetVonrSwitchResponse004, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    g_setVonrSwitchResponseFlag = false;
    int32_t ret = g_rilInterface->SetVonrSwitch(SLOTID_2, GetSerialId(), 0);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_setVonrSwitchResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_Driversystem_V1GetSimLockStatusResponse_0100
 * @tc.name  : testV1GetSimLockStatusResponse001
 * @tc.desc  : Call function GetSimLockStatus with SLOTID_1 simLockStatus is 1 classx is 255 fac is "OI" mode is 0;
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetSimLockStatusResponse001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    g_getSimLockStatusResponseFlag = false;
    SimLockInfo simLockInfo;
    simLockInfo.classx = 255;
    simLockInfo.fac = "OI";
    simLockInfo.mode = 0;
    int32_t ret = g_rilInterface->GetSimLockStatus(SLOTID_1, GetSerialId(), simLockInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_getSimLockStatusResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_Driversystem_V1GetSimLockStatusResponse_0200
 * @tc.name  : testV1GetSimLockStatusResponse002
 * @tc.desc  : Call function GetSimLockStatus with SLOTID_2 simLockStatus is 1 classx is 255 fac is "OI" mode is 1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetSimLockStatusResponse002, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    g_getSimLockStatusResponseFlag = false;
    SimLockInfo simLockInfo;
    simLockInfo.classx = 255;
    simLockInfo.fac = "OI";
    simLockInfo.mode = 1;
    int32_t ret = g_rilInterface->GetSimLockStatus(SLOTID_2, GetSerialId(), simLockInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_getSimLockStatusResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_Driversystem_V1GetSimLockStatusResponse_0300
 * @tc.name  : testV1GetSimLockStatusResponse003
 * @tc.desc  : Call function GetSimLockStatus with SLOTID_1 SerialId is -1 fac is "SC" mode is 2 classx is 255
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetSimLockStatusResponse003, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    g_getSimLockStatusResponseFlag = false;
    SimLockInfo simLockInfo;
    simLockInfo.fac = "SC";
    simLockInfo.mode = 2;
    simLockInfo.classx = 255;
    int32_t ret = g_rilInterface->GetSimLockStatus(SLOTID_1, -1, simLockInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(false, g_getSimLockStatusResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_Driversystem_V1GetSimLockStatusResponse_0400
 * @tc.name  : testV1GetSimLockStatusResponse004
 * @tc.desc  : Call function GetSimLockStatus with SLOTID_2 SerialId is -1 classx is 255 fac is "AB" mode is 1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetSimLockStatusResponse004, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    g_getSimLockStatusResponseFlag = false;
    SimLockInfo simLockInfo;
    simLockInfo.classx = 255;
    simLockInfo.fac = "AB";
    simLockInfo.mode = 1;
    int32_t ret = g_rilInterface->GetSimLockStatus(SLOTID_2, -1, simLockInfo);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(false, g_getSimLockStatusResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_Driversystem_V1GetCallTransferInfoResponse_0100
 * @tc.name  : testV1GetCallTransferInfoResponse001
 * @tc.desc  : Call function GetCallTransferInfo with SLOTID_2 SerialId is -1 a value of 1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetCallTransferInfoResponse001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    g_getCallTransferInfoResponseFlag = false;
    int32_t ret = g_rilInterface->GetCallTransferInfo(SLOTID_2, -1, 1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_getCallTransferInfoResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_Driversystem_V1GetCallTransferInfoResponse_0200
 * @tc.name  : testV1GetCallTransferInfoResponse002
 * @tc.desc  : Call function GetCallTransferInfo with SLOTID_2 and a value of -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetCallTransferInfoResponse002, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    g_getCallTransferInfoResponseFlag = false;
    int32_t ret = g_rilInterface->GetCallTransferInfo(SLOTID_2, GetSerialId(), -1);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(false, g_getCallTransferInfoResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_Driversystem_V1GetCallTransferInfoResponse_0300
 * @tc.name  : testV1GetCallTransferInfoResponse003
 * @tc.desc  : Call function GetCallTransferInfo with SLOTID_1 a value of 65535
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetCallTransferInfoResponse003, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    g_getCallTransferInfoResponseFlag = false;
    int32_t ret = g_rilInterface->GetCallTransferInfo(SLOTID_1, GetSerialId(), 65535);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_getCallTransferInfoResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_Driversystem_V1GetCallTransferInfoResponse_0400
 * @tc.name  : testV1GetCallTransferInfoResponse004
 * @tc.desc  : Call function GetCallTransferInfo with SLOTID_2 a value of 4555
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetCallTransferInfoResponse004, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    g_getCallTransferInfoResponseFlag = false;
    int32_t ret = g_rilInterface->GetCallTransferInfo(SLOTID_2, GetSerialId(), 4555);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_getCallTransferInfoResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_Driversystem_V1CombineConferenceResponse_0100
 * @tc.name  : testV1CombineConferenceResponse001
 * @tc.desc  : Call function CombineConference with SLOTID_2 a value of -32768999
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1CombineConferenceResponse001, Function | MediumTest | Level2)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    g_combineConferenceResponseFlag = false;
    int32_t ret = g_rilInterface->CombineConference(SLOTID_2, GetSerialId(), -32768999);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(false, g_combineConferenceResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_Driversystem_V1CombineConferenceResponse_0200
 * @tc.name  : testV1CombineConferenceResponse002
 * @tc.desc  : Call function CombineConference with SLOTID_2 a value of 32768999
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1CombineConferenceResponse002, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    g_combineConferenceResponseFlag = false;
    int32_t ret = g_rilInterface->CombineConference(SLOTID_2, GetSerialId(), 32768999);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_combineConferenceResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_Driversystem_V1CombineConferenceResponse_0300
 * @tc.name  : testV1CombineConferenceResponse003
 * @tc.desc  : Call function CombineConference with SLOTID_2  SerialId is 1111 a value of 32768999
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1CombineConferenceResponse003, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    g_combineConferenceResponseFlag = false;
    int32_t ret = g_rilInterface->CombineConference(SLOTID_2, 1111, 32768999);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_combineConferenceResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_Driversystem_V1CombineConferenceResponse_0400
 * @tc.name  : testV1CombineConferenceResponse004
 * @tc.desc  : Call function CombineConference with SLOTID_1 and a value of 32768999
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1CombineConferenceResponse004, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    g_combineConferenceResponseFlag = false;
    int32_t ret = g_rilInterface->CombineConference(SLOTID_1, GetSerialId(), 32768999);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_combineConferenceResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_Driversystem_V1GetCallListResponse_0100
 * @tc.name  : testV1GetCallListResponse001
 * @tc.desc  : Call function GetCallList with SLOTID_1 and a value of 65535
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetCallListResponse001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    g_getCallListResponseFlag = false;
    int32_t ret = g_rilInterface->GetCallList(65535, GetSerialId());
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_getCallListResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_Driversystem_V1GetCallListResponse_0200
 * @tc.name  : testV1GetCallListResponse002
 * @tc.desc  : Call function GetCallList with SLOTID_1 and a value of -65535
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetCallListResponse002, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    g_getCallListResponseFlag = false;
    int32_t ret = g_rilInterface->GetCallList(-65535, GetSerialId());
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_getCallListResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_Driversystem_V1GetCallListResponse_0300
 * @tc.name  : testV1GetCallListResponse003
 * @tc.desc  : Call function GetCallList with SLOTID_2 and a value of -11111
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetCallListResponse003, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    g_getCallListResponseFlag = false;
    int32_t ret = g_rilInterface->GetCallList(SLOTID_2, -11111);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_getCallListResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_Driversystem_V1GetCallListResponse_0400
 * @tc.name  : testV1GetCallListResponse004
 * @tc.desc  : Call function GetCallList with SLOTID_2 and a value of 0
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetCallListResponse004, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    g_getCallListResponseFlag = false;
    int32_t ret = g_rilInterface->GetCallList(SLOTID_2, 0);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_getCallListResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_Driversystem_V1GetEmergencyCallListResponse_0100
 * @tc.name  : testV1GetEmergencyCallListResponse001
 * @tc.desc  : Call function GetEmergencyCallList with SLOTID_2 and a value of 1111
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetEmergencyCallListResponse001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    g_getEmergencyCallListResponseFlag = false;
    int32_t ret = g_rilInterface->GetEmergencyCallList(1111, GetSerialId());
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_getEmergencyCallListResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_Driversystem_V1GetEmergencyCallListResponse_0200
 * @tc.name  : testV1GetEmergencyCallListResponse002
 * @tc.desc  : Call function GetEmergencyCallList with SLOTID_2 and a value of -1
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetEmergencyCallListResponse002, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    g_getEmergencyCallListResponseFlag = false;
    int32_t ret = g_rilInterface->GetEmergencyCallList(-1, GetSerialId());
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_getEmergencyCallListResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_Driversystem_V1GetEmergencyCallListResponse_0300
 * @tc.name  : testV1GetEmergencyCallListResponse003
 * @tc.desc  : Call function GetEmergencyCallList with SLOTID_2 and a value of 0
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetEmergencyCallListResponse003, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    g_getEmergencyCallListResponseFlag = false;
    int32_t ret = g_rilInterface->GetEmergencyCallList(SLOTID_2, 0);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_getEmergencyCallListResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_Driversystem_V1GetEmergencyCallListResponse_0400
 * @tc.name  : testV1GetEmergencyCallListResponse004
 * @tc.desc  : Call function GetEmergencyCallList with SLOTID_2 and a value of 32768
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1GetEmergencyCallListResponse004, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    g_getEmergencyCallListResponseFlag = false;
    int32_t ret = g_rilInterface->GetEmergencyCallList(SLOTID_2, 32768);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_getEmergencyCallListResponseFlag);
}

/**
 * @tc.number: SUB_Telephony_Driversystem_V1SetEmergencyCallListResponse_0100
 * @tc.name  : testV1SetEmergencyCallListResponse001
 * @tc.desc  : Call function GetEmergencyCallList with SLOTID_1 and a value of 11111
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetEmergencyCallListResponse001, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    g_setEmergencyCallListResponse = false;
    EmergencyInfoList emergencyInfoList;
    EmergencyCall emergencyInfo = {};
    emergencyInfo.index = 1;
    emergencyInfo.total = 1;
    emergencyInfo.eccNum = "120";
    emergencyInfo.eccType = EccType::TYPE_CATEGORY;
    emergencyInfo.simpresent = SimpresentType::TYPE_HAS_CARD;
    emergencyInfo.mcc = "460";
    emergencyInfo.abnormalService = AbnormalServiceType::TYPE_ALL;
    emergencyInfoList.calls.push_back(emergencyInfo);
    int32_t ret = g_rilInterface->SetEmergencyCallList(11111, GetSerialId(), emergencyInfoList);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_setEmergencyCallListResponse);
}

/**
 * @tc.number: SUB_Telephony_Driversystem_V1SetEmergencyCallListResponse_0200
 * @tc.name  : testV1SetEmergencyCallListResponse002
 * @tc.desc  : Call function GetEmergencyCallList with SLOTID_1 and a value of -11111
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetEmergencyCallListResponse002, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_1)) {
        return;
    }
    g_setEmergencyCallListResponse = false;
    EmergencyInfoList emergencyInfoList;
    EmergencyCall emergencyInfo = {};
    emergencyInfo.index = 1;
    emergencyInfo.total = 1;
    emergencyInfo.eccNum = "120";
    emergencyInfo.eccType = EccType::TYPE_CATEGORY;
    emergencyInfo.simpresent = SimpresentType::TYPE_HAS_CARD;
    emergencyInfo.mcc = "460";
    emergencyInfo.abnormalService = AbnormalServiceType::TYPE_ALL;
    emergencyInfoList.calls.push_back(emergencyInfo);
    int32_t ret = g_rilInterface->SetEmergencyCallList(-11111, GetSerialId(), emergencyInfoList);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_setEmergencyCallListResponse);
}

/**
 * @tc.number: SUB_Telephony_Driversystem_V1SetEmergencyCallListResponse_0300
 * @tc.name  : testV1SetEmergencyCallListResponse003
 * @tc.desc  : Call function GetEmergencyCallList with SLOTID_2 and a value of 65535
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetEmergencyCallListResponse003, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    g_setEmergencyCallListResponse = false;
    EmergencyInfoList emergencyInfoList;
    EmergencyCall emergencyInfo = {};
    emergencyInfo.index = 1;
    emergencyInfo.total = 1;
    emergencyInfo.eccNum = "120";
    emergencyInfo.eccType = EccType::TYPE_CATEGORY;
    emergencyInfo.simpresent = SimpresentType::TYPE_HAS_CARD;
    emergencyInfo.mcc = "460";
    emergencyInfo.abnormalService = AbnormalServiceType::TYPE_ALL;
    emergencyInfoList.calls.push_back(emergencyInfo);
    int32_t ret = g_rilInterface->SetEmergencyCallList(SLOTID_2, 65535, emergencyInfoList);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_setEmergencyCallListResponse);
}

/**
 * @tc.number: SUB_Telephony_Driversystem_V1SetEmergencyCallListResponse_0400
 * @tc.name  : testV1SetEmergencyCallListResponse004
 * @tc.desc  : Call function GetEmergencyCallList with SLOTID_2 and a value of -65535
 */
HWTEST_F(HdfRilHdiTestAdditional, testV1SetEmergencyCallListResponse004, Function | MediumTest | Level1)
{
    if (!IsReady(SLOTID_2)) {
        return;
    }
    g_setEmergencyCallListResponse = false;
    EmergencyInfoList emergencyInfoList;
    EmergencyCall emergencyInfo = {};
    emergencyInfo.index = 1;
    emergencyInfo.total = 1;
    emergencyInfo.eccNum = "120";
    emergencyInfo.eccType = EccType::TYPE_CATEGORY;
    emergencyInfo.simpresent = SimpresentType::TYPE_HAS_CARD;
    emergencyInfo.mcc = "460";
    emergencyInfo.abnormalService = AbnormalServiceType::TYPE_ALL;
    emergencyInfoList.calls.push_back(emergencyInfo);
    int32_t ret = g_rilInterface->SetEmergencyCallList(SLOTID_2, -65535, emergencyInfoList);
    WaitFor(WAIT_TIME_SECOND);
    EXPECT_EQ(SUCCESS, ret);
    EXPECT_EQ(true, g_setEmergencyCallListResponse);
}